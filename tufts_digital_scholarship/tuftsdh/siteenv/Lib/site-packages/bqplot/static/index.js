define(["@jupyter-widgets/base"], function(__WEBPACK_EXTERNAL_MODULE_7__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	__webpack_require__(1);
	module.exports = __webpack_require__(5);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../node_modules/css-loader/index.js!../node_modules/less-loader/index.js!./bqplot.less", function() {
				var newContent = require("!!../node_modules/css-loader/index.js!../node_modules/less-loader/index.js!./bqplot.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	
	
	// module
	exports.push([module.id, "/* Copyright 2015 Bloomberg Finance L.P.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n.theme-light .bqplot {\n  box-sizing: border-box;\n  display: flex;\n  width: 640px;\n  height: 480px;\n}\n.theme-light .bqplot > svg {\n  font: 11px sans-serif;\n  user-select: none;\n  -ms-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  flex-grow: 1;\n}\n.theme-light .bqplot > svg .axis line {\n  shape-rendering: crispEdges;\n  font: 10px sans-serif;\n  stroke-width: 1px;\n}\n.theme-light .bqplot > svg .axis path,\n.theme-light .bqplot > svg .axis line {\n  fill: none;\n}\n.theme-light .bqplot > svg .axis text.axislabel,\n.theme-light .bqplot > svg .axis tspan.axislabel {\n  text-anchor: end;\n  font: 14px sans-serif;\n}\n.theme-light .bqplot > svg .axis .tick text {\n  cursor: default;\n}\n.theme-light .bqplot > svg .axis.axisbold path {\n  stroke-width: 3px;\n}\n.theme-light .bqplot > svg .axis.axisbold text,\n.theme-light .bqplot > svg .axis.axisbold text.axislabel {\n  font-weight: bolder;\n}\n.theme-light .bqplot > svg text.mainheading {\n  text-anchor: middle;\n  font: 16px sans-serif;\n}\n.theme-light .bqplot > svg .zeroLine {\n  shape-rendering: crispEdges;\n}\n.theme-light .bqplot > svg .brushintsel,\n.theme-light .bqplot > svg .intsel {\n  pointer-events: none;\n}\n.theme-light .bqplot > svg .indsel {\n  stroke: red;\n}\n.theme-light .bqplot > svg .brushintsel,\n.theme-light .bqplot > svg .intsel {\n  fill-opacity: 0.2;\n}\n.theme-light .bqplot > svg .intselmouse {\n  visibility: hidden;\n  pointer-events: all;\n  /*none?*/\n}\n.theme-light .bqplot > svg text.legendtext {\n  text-anchor: start;\n  font: 14px sans-serif;\n}\n.theme-light .bqplot > svg .multiselector .active {\n  pointer-events: all  !important;\n  stroke: green;\n}\n.theme-light .bqplot > svg .multiselector .inactive {\n  pointer-events: none !important;\n  stroke: red;\n}\n.theme-light .bqplot > svg .multiselector .visible {\n  pointer-events: visible !important;\n  stroke: red;\n}\n.theme-light .bqplot > svg .lassoselector .selected {\n  opacity: 0.3;\n}\n.theme-light .bqplot > svg .lassoselector path {\n  fill: none;\n  stroke: orange;\n  stroke-width: 4;\n}\n.theme-light .tooltip_div {\n  z-index: 1001;\n}\n.theme-light .mark_tooltip {\n  pointer-events: none;\n  z-index: 1001;\n}\n.theme-light .mark_tooltip table {\n  border-radius: 5px;\n}\n.theme-light .mark_tooltip .tooltiptext {\n  text-align: center;\n  padding: 0.5em;\n}\n.theme-light .world_map .hovered {\n  fill: Orange;\n  stroke: Orange;\n  stroke-width: 2.5px;\n}\n.theme-light .world_map #container {\n  margin: 10px 10%;\n  border: 2px solid #000;\n  border-radius: 5px;\n  height: 100%;\n  overflow: hidden;\n  background: #F0F8FF;\n}\n.theme-light .world_map .graticule {\n  fill: none;\n  stroke: #bbb;\n  stroke-width: .5px;\n  stroke-opacity: .5;\n}\n.theme-light .g_legend {\n  fill: none;\n}\n.theme-light .bqplot > svg .axis rect {\n  stroke: white;\n  opacity: 1.0;\n}\n.theme-light .bqplot > svg .axis .tick line {\n  stroke: white;\n  stroke-width: 1;\n  opacity: 1.0;\n}\n.theme-light .bqplot > svg .axis .tick.short line {\n  stroke: #8B8B8B;\n}\n.theme-light .bqplot > svg .axis .tick text {\n  fill: #8B8B8B;\n  font: 12px sans-serif;\n}\n.theme-light .bqplot > svg .stick,\n.theme-light .bqplot > svg .zeroLine {\n  stroke: black;\n  fill: black;\n}\n.theme-light .bqplot > svg .bargroup rect,\n.theme-light .bqplot > svg .boxplot rect,\n.theme-light .bqplot > svg .slice rect,\n.theme-light .bqplot > svg .bargroup path,\n.theme-light .bqplot > svg .boxplot path,\n.theme-light .bqplot > svg .slice path,\n.theme-light .bqplot > svg .bargroup line,\n.theme-light .bqplot > svg .boxplot line,\n.theme-light .bqplot > svg .slice line {\n  stroke: black;\n}\n.theme-light .bqplot > svg .sticktext {\n  fill: black;\n}\n.theme-light .bqplot > svg .brushintsel,\n.theme-light .bqplot > svg .intsel {\n  fill: #000000;\n}\n.theme-light .bqplot > svg text.axislabel,\n.theme-light .bqplot > svg tspan.axislabel {\n  fill: black;\n  font: serif;\n}\n.theme-light .bqplot > svg text.mainheading {\n  fill: black;\n  font: serif;\n  font-size: large;\n}\n.theme-light .bqplot > svg .plotarea_background {\n  fill: #F7F7F7;\n}\n.theme-light .mark_tooltip {\n  border: 2px solid black;\n  border-radius: 5px;\n  box-shadow: 1px 1px 2px rgba(10, 10, 10, 0.8);\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  background-color: #FCFCFC;\n}\n.theme-light .mark_tooltip td {\n  border: thin solid black;\n}\n.theme-light .mark_tooltip table {\n  background: #ececec;\n}\n.theme-light .world_map path {\n  stroke: #FFF;\n  stroke-width: 0.25px;\n  fill: dodgerblue;\n}\n.theme-light .pie polyline {\n  opacity: .3;\n  stroke: black;\n  stroke-width: 1px;\n  fill: none;\n}\n.theme-light .network .node .element {\n  fill: #ccc;\n  stroke: #000;\n  stroke-width: 1.5px;\n}\n.theme-light .network .link {\n  fill: none;\n  stroke: #666;\n  stroke-width: 1.5px;\n}\n.theme-light .network .node .label {\n  font: 12px sans-serif;\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;\n}\n.theme-light .linkarrow {\n  fill: #000;\n}\n/* by default, activate theme-light*/\n.bqplot {\n  box-sizing: border-box;\n  display: flex;\n  width: 640px;\n  height: 480px;\n}\n.bqplot > svg {\n  font: 11px sans-serif;\n  user-select: none;\n  -ms-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  flex-grow: 1;\n}\n.bqplot > svg .axis line {\n  shape-rendering: crispEdges;\n  font: 10px sans-serif;\n  stroke-width: 1px;\n}\n.bqplot > svg .axis path,\n.bqplot > svg .axis line {\n  fill: none;\n}\n.bqplot > svg .axis text.axislabel,\n.bqplot > svg .axis tspan.axislabel {\n  text-anchor: end;\n  font: 14px sans-serif;\n}\n.bqplot > svg .axis .tick text {\n  cursor: default;\n}\n.bqplot > svg .axis.axisbold path {\n  stroke-width: 3px;\n}\n.bqplot > svg .axis.axisbold text,\n.bqplot > svg .axis.axisbold text.axislabel {\n  font-weight: bolder;\n}\n.bqplot > svg text.mainheading {\n  text-anchor: middle;\n  font: 16px sans-serif;\n}\n.bqplot > svg .zeroLine {\n  shape-rendering: crispEdges;\n}\n.bqplot > svg .brushintsel,\n.bqplot > svg .intsel {\n  pointer-events: none;\n}\n.bqplot > svg .indsel {\n  stroke: red;\n}\n.bqplot > svg .brushintsel,\n.bqplot > svg .intsel {\n  fill-opacity: 0.2;\n}\n.bqplot > svg .intselmouse {\n  visibility: hidden;\n  pointer-events: all;\n  /*none?*/\n}\n.bqplot > svg text.legendtext {\n  text-anchor: start;\n  font: 14px sans-serif;\n}\n.bqplot > svg .multiselector .active {\n  pointer-events: all  !important;\n  stroke: green;\n}\n.bqplot > svg .multiselector .inactive {\n  pointer-events: none !important;\n  stroke: red;\n}\n.bqplot > svg .multiselector .visible {\n  pointer-events: visible !important;\n  stroke: red;\n}\n.bqplot > svg .lassoselector .selected {\n  opacity: 0.3;\n}\n.bqplot > svg .lassoselector path {\n  fill: none;\n  stroke: orange;\n  stroke-width: 4;\n}\n.tooltip_div {\n  z-index: 1001;\n}\n.mark_tooltip {\n  pointer-events: none;\n  z-index: 1001;\n}\n.mark_tooltip table {\n  border-radius: 5px;\n}\n.mark_tooltip .tooltiptext {\n  text-align: center;\n  padding: 0.5em;\n}\n.world_map .hovered {\n  fill: Orange;\n  stroke: Orange;\n  stroke-width: 2.5px;\n}\n.world_map #container {\n  margin: 10px 10%;\n  border: 2px solid #000;\n  border-radius: 5px;\n  height: 100%;\n  overflow: hidden;\n  background: #F0F8FF;\n}\n.world_map .graticule {\n  fill: none;\n  stroke: #bbb;\n  stroke-width: .5px;\n  stroke-opacity: .5;\n}\n.g_legend {\n  fill: none;\n}\n.bqplot > svg .axis rect {\n  stroke: white;\n  opacity: 1.0;\n}\n.bqplot > svg .axis .tick line {\n  stroke: white;\n  stroke-width: 1;\n  opacity: 1.0;\n}\n.bqplot > svg .axis .tick.short line {\n  stroke: #8B8B8B;\n}\n.bqplot > svg .axis .tick text {\n  fill: #8B8B8B;\n  font: 12px sans-serif;\n}\n.bqplot > svg .stick,\n.bqplot > svg .zeroLine {\n  stroke: black;\n  fill: black;\n}\n.bqplot > svg .bargroup rect,\n.bqplot > svg .boxplot rect,\n.bqplot > svg .slice rect,\n.bqplot > svg .bargroup path,\n.bqplot > svg .boxplot path,\n.bqplot > svg .slice path,\n.bqplot > svg .bargroup line,\n.bqplot > svg .boxplot line,\n.bqplot > svg .slice line {\n  stroke: black;\n}\n.bqplot > svg .sticktext {\n  fill: black;\n}\n.bqplot > svg .brushintsel,\n.bqplot > svg .intsel {\n  fill: #000000;\n}\n.bqplot > svg text.axislabel,\n.bqplot > svg tspan.axislabel {\n  fill: black;\n  font: serif;\n}\n.bqplot > svg text.mainheading {\n  fill: black;\n  font: serif;\n  font-size: large;\n}\n.bqplot > svg .plotarea_background {\n  fill: #F7F7F7;\n}\n.mark_tooltip {\n  border: 2px solid black;\n  border-radius: 5px;\n  box-shadow: 1px 1px 2px rgba(10, 10, 10, 0.8);\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  background-color: #FCFCFC;\n}\n.mark_tooltip td {\n  border: thin solid black;\n}\n.mark_tooltip table {\n  background: #ececec;\n}\n.world_map path {\n  stroke: #FFF;\n  stroke-width: 0.25px;\n  fill: dodgerblue;\n}\n.pie polyline {\n  opacity: .3;\n  stroke: black;\n  stroke-width: 1px;\n  fill: none;\n}\n.network .node .element {\n  fill: #ccc;\n  stroke: #000;\n  stroke-width: 1.5px;\n}\n.network .link {\n  fill: none;\n  stroke: #666;\n  stroke-width: 1.5px;\n}\n.network .node .label {\n  font: 12px sans-serif;\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;\n}\n.linkarrow {\n  fill: #000;\n}\n.theme-dark .bqplot {\n  box-sizing: border-box;\n  display: flex;\n  width: 640px;\n  height: 480px;\n}\n.theme-dark .bqplot > svg {\n  font: 11px sans-serif;\n  user-select: none;\n  -ms-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  flex-grow: 1;\n}\n.theme-dark .bqplot > svg .axis line {\n  shape-rendering: crispEdges;\n  font: 10px sans-serif;\n  stroke-width: 1px;\n}\n.theme-dark .bqplot > svg .axis path,\n.theme-dark .bqplot > svg .axis line {\n  fill: none;\n}\n.theme-dark .bqplot > svg .axis text.axislabel,\n.theme-dark .bqplot > svg .axis tspan.axislabel {\n  text-anchor: end;\n  font: 14px sans-serif;\n}\n.theme-dark .bqplot > svg .axis .tick text {\n  cursor: default;\n}\n.theme-dark .bqplot > svg .axis.axisbold path {\n  stroke-width: 3px;\n}\n.theme-dark .bqplot > svg .axis.axisbold text,\n.theme-dark .bqplot > svg .axis.axisbold text.axislabel {\n  font-weight: bolder;\n}\n.theme-dark .bqplot > svg text.mainheading {\n  text-anchor: middle;\n  font: 16px sans-serif;\n}\n.theme-dark .bqplot > svg .zeroLine {\n  shape-rendering: crispEdges;\n}\n.theme-dark .bqplot > svg .brushintsel,\n.theme-dark .bqplot > svg .intsel {\n  pointer-events: none;\n}\n.theme-dark .bqplot > svg .indsel {\n  stroke: red;\n}\n.theme-dark .bqplot > svg .brushintsel,\n.theme-dark .bqplot > svg .intsel {\n  fill-opacity: 0.2;\n}\n.theme-dark .bqplot > svg .intselmouse {\n  visibility: hidden;\n  pointer-events: all;\n  /*none?*/\n}\n.theme-dark .bqplot > svg text.legendtext {\n  text-anchor: start;\n  font: 14px sans-serif;\n}\n.theme-dark .bqplot > svg .multiselector .active {\n  pointer-events: all  !important;\n  stroke: green;\n}\n.theme-dark .bqplot > svg .multiselector .inactive {\n  pointer-events: none !important;\n  stroke: red;\n}\n.theme-dark .bqplot > svg .multiselector .visible {\n  pointer-events: visible !important;\n  stroke: red;\n}\n.theme-dark .bqplot > svg .lassoselector .selected {\n  opacity: 0.3;\n}\n.theme-dark .bqplot > svg .lassoselector path {\n  fill: none;\n  stroke: orange;\n  stroke-width: 4;\n}\n.theme-dark .tooltip_div {\n  z-index: 1001;\n}\n.theme-dark .mark_tooltip {\n  pointer-events: none;\n  z-index: 1001;\n}\n.theme-dark .mark_tooltip table {\n  border-radius: 5px;\n}\n.theme-dark .mark_tooltip .tooltiptext {\n  text-align: center;\n  padding: 0.5em;\n}\n.theme-dark .world_map .hovered {\n  fill: Orange;\n  stroke: Orange;\n  stroke-width: 2.5px;\n}\n.theme-dark .world_map #container {\n  margin: 10px 10%;\n  border: 2px solid #000;\n  border-radius: 5px;\n  height: 100%;\n  overflow: hidden;\n  background: #F0F8FF;\n}\n.theme-dark .world_map .graticule {\n  fill: none;\n  stroke: #bbb;\n  stroke-width: .5px;\n  stroke-opacity: .5;\n}\n.theme-dark .g_legend {\n  fill: none;\n}\n.theme-dark .bqplot > svg {\n  background: #1a1a1a;\n}\n.theme-dark .bqplot > svg .axis rect {\n  stroke: #1A1A1A;\n}\n.theme-dark .bqplot > svg .axis path {\n  stroke: #b3b3b3;\n}\n.theme-dark .bqplot > svg .axis .tick line {\n  stroke: #3b3b3b;\n}\n.theme-dark .bqplot > svg .axis .tick.short line {\n  stroke: #B3B3B3;\n}\n.theme-dark .bqplot > svg .axis .tick text {\n  fill: #B3B3B3;\n}\n.theme-dark .bqplot > svg .stick,\n.theme-dark .bqplot > svg .zeroLine {\n  stroke: white;\n  fill: white;\n}\n.theme-dark .bqplot > svg .bargroup rect,\n.theme-dark .bqplot > svg .slice rect,\n.theme-dark .bqplot > svg .bargroup path,\n.theme-dark .bqplot > svg .slice path,\n.theme-dark .bqplot > svg .bargroup line,\n.theme-dark .bqplot > svg .slice line {\n  stroke: white;\n}\n.theme-dark .bqplot > svg .sticktext {\n  fill: white;\n}\n.theme-dark .bqplot > svg .brushintsel,\n.theme-dark .bqplot > svg .intsel {\n  fill: #ffffff;\n}\n.theme-dark .bqplot > svg text.axislabel,\n.theme-dark .bqplot > svg tspan.axislabel,\n.theme-dark .bqplot > svg text.mainheading {\n  fill: orange;\n}\n.theme-dark .bqplot > svg .plotarea_background {\n  fill: #1a1a1a;\n}\n.theme-dark .mark_tooltip {\n  border: 2px solid whitesmoke;\n  border-radius: 5px;\n  box-shadow: 1px 1px 2px rgba(245, 245, 245, 0.8);\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  background-color: black;\n}\n.theme-dark .mark_tooltip td {\n  border: thin solid whitesmoke;\n}\n.theme-dark .mark_tooltip table {\n  background: black;\n}\n.theme-dark .world_map path {\n  stroke: black;\n  stroke-width: 0.25px;\n  fill: seagreen;\n}\n.theme-dark .pie polyline {\n  opacity: .5;\n  stroke: white;\n  stroke-width: 1px;\n  fill: none;\n}\n.theme-dark .network .node .element {\n  fill: #666;\n  stroke: #000;\n  stroke-width: 1.5px;\n}\n.theme-dark .network .node .element {\n  fill: #666;\n  stroke: #000;\n  stroke-width: 1.5px;\n}\n.theme-dark .network .link {\n  fill: none;\n  stroke: #666;\n  stroke-width: 1.5px;\n}\n.theme-dark .network .node .label {\n  font: 12px sans-serif;\n  pointer-events: none;\n  text-shadow: 0 1px 0 #000, 1px 0 0 #000, 0 -1px 0 #000, -1px 0 0 #000;\n}\n.theme-dark .linkarrow {\n  fill: #ccc;\n}\n", ""]);
	
	// exports


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	module.exports = {};
	
	var loadedModules = [
	    __webpack_require__(6),
	    __webpack_require__(11),
	    __webpack_require__(15),
	    __webpack_require__(16),
	    __webpack_require__(17),
	    __webpack_require__(12),
	    __webpack_require__(19),
	    __webpack_require__(20),
	    __webpack_require__(21),
	    __webpack_require__(22),
	    __webpack_require__(23),
	    __webpack_require__(24),
	    __webpack_require__(13),
	    __webpack_require__(25),
	    __webpack_require__(26),
	    __webpack_require__(27),
	    __webpack_require__(28),
	    __webpack_require__(30),
	    __webpack_require__(35),
	    __webpack_require__(18),
	    __webpack_require__(31),
	    __webpack_require__(36),
	    __webpack_require__(38),
	    __webpack_require__(40),
	    __webpack_require__(42),
	    __webpack_require__(45),
	    __webpack_require__(46),
	    __webpack_require__(47),
	    __webpack_require__(44),
	    __webpack_require__(48),
	    __webpack_require__(34),
	    __webpack_require__(49),
	    __webpack_require__(50),
	    __webpack_require__(33),
	    __webpack_require__(51),
	    __webpack_require__(53),
	    __webpack_require__(54),
	    __webpack_require__(55),
	    __webpack_require__(32),
	    __webpack_require__(56),
	    __webpack_require__(52),
	    __webpack_require__(41),
	    __webpack_require__(57),
	    __webpack_require__(58),
	    __webpack_require__(60),
	    __webpack_require__(61),
	    __webpack_require__(62),
	    __webpack_require__(63),
	    __webpack_require__(64),
	    __webpack_require__(65),
	    __webpack_require__(29),
	    __webpack_require__(66),
	    __webpack_require__(69),
	    __webpack_require__(70),
	    __webpack_require__(71),
	    __webpack_require__(72),
	    __webpack_require__(73),
	    __webpack_require__(74),
	    __webpack_require__(75),
	    __webpack_require__(76),
	    __webpack_require__(78),
	    __webpack_require__(59),
	    __webpack_require__(10),
	    __webpack_require__(79),
	    __webpack_require__(80),
	    __webpack_require__(81),
	    __webpack_require__(82),
	    __webpack_require__(83),
	    __webpack_require__(84),
	    __webpack_require__(85),
	    __webpack_require__(86),
	    __webpack_require__(87),
	    __webpack_require__(88),
	    __webpack_require__(89)
	];
	
	for (var i in loadedModules) {
	    if (loadedModules.hasOwnProperty(i)) {
	        var loadedModule = loadedModules[i];
	        for (var target_name in loadedModule) {
	            if (loadedModule.hasOwnProperty(target_name)) {
	                module.exports[target_name] = loadedModule[target_name];
	            }
	        }
	    }
	}
	
	module.exports["version"] = __webpack_require__(14).version;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var utils = __webpack_require__(10);
	
	// Polyfill for Math.log10 in IE11
	Math.log10 = Math.log10 || function (x) {
	    return Math.log(x) / Math.LN10;
	};
	
	var UNITS_ARRAY = ["em", "ex", "px"];
	
	var Axis = widgets.WidgetView.extend({
	
	    initialize : function() {
	        this.setElement(document.createElementNS(d3.ns.prefix.svg, "g"));
	        this.d3el = d3.select(this.el);
	        Axis.__super__.initialize.apply(this, arguments);
	    },
	
	    render: function() {
	        this.d3el.style("display", this.model.get("visible") ? "inline" : "none");
	        this.parent = this.options.parent;
	        this.margin = this.parent.margin;
	        this.height = this.parent.height - (this.margin.top + this.margin.bottom);
	        this.width = this.parent.width - (this.margin.left + this.margin.right);
	
	        var scale_promise = this.set_scale_promise(this.model.get("scale"));
	        var offset_promise = this.get_offset_promise();
	
	        var that = this;
	        Promise.all([scale_promise, offset_promise]).then(function() {
	            that.create_listeners();
	            that.tick_format = that.generate_tick_formatter();
	            that.set_scales_range();
	            that.append_axis();
	        });
	    },
	
	    create_listeners: function() {
	        // Creates all event listeners
	
	        this.listenTo(this.model, "change:scale", function(model, value) {
	            this.update_scale(model.previous("scale"), value);
	            // TODO: rescale_axis does too many things. Decompose
	            this.axis.scale(this.axis_scale.scale); // TODO: this is in redraw_axisline
	            this.rescale_axis();
	        }, this);
	
	        // Tick attributes
	        this.listenTo(this.model, "change:tick_values", this.set_tick_values, this);
	        this.listenTo(this.model, "change:tick_format", this.tickformat_changed, this);
	        this.listenTo(this.model, "change:num_ticks", this.set_tick_values, this);
	        this.listenTo(this.model, "change:tick_rotate", this.apply_tick_styling, this);
	        this.listenTo(this.model, "change:tick_style", this.apply_tick_styling, this);
	
	        // Label attributes
	        this.model.on_some_change(["label", "label_color"], this.update_label, this);
	
	        // Axis attributes
	        this.listenTo(this.model, "change:color", this.update_color, this);
	        this.model.on_some_change(["grid_color", "grid_lines"], this.update_grid_lines, this);
	        this.listenTo(this.model, "change:label_location", this.update_label_location, this);
	        this.listenTo(this.model, "change:label_offset", this.update_label_offset, this);
	        this.listenTo(this.model, "change:visible", this.update_visibility, this);
	        this.model.on_some_change(["side", "orientation"], this.update_display, this);
	        this.listenTo(this.model, "change:offset", this.update_offset, this);
	        this.parent.on("margin_updated", this.parent_margin_updated, this);
	    },
	
	    update_offset: function() {
	        var offset_creation_promise = this.get_offset_promise();
	        var that = this;
	        offset_creation_promise.then(function() {
	            that.set_scales_range();
	            that.update_offset_scale_domain();
	            that.g_axisline.attr("transform", that.get_axis_transform());
	            that.update_grid_lines();
	        });
	    },
	
	    update_display: function() {
	        var side = this.model.get("side");
	        var is_vertical = this.model.get("orientation") === "vertical";
	
	        if(is_vertical) {
	            this.axis.orient(side === "right" ? "right" : "left");
	        } else {
	            this.axis.orient(side === "top" ? "top" : "bottom");
	        }
	        this.rescale_axis();
	    },
	
	    set_tick_values: function(animate) {
	        // Sets specific tick values from "tick_values" parameter
	
	        var tick_values = this.model.get_typed_field("tick_values");
	        var useticks = [];
	        var num_ticks = this.model.get("num_ticks");
	
	        if (tick_values !== undefined && tick_values !== null && tick_values.length > 0) {
	            this.axis.tickValues(this.get_ticks_from_array_or_length(tick_values));
	        } else if (num_ticks !== undefined && num_ticks !== null) {
	            this.axis.tickValues(this.get_ticks_from_array_or_length());
	        } else {
	            if (this.axis_scale.model.type === "ordinal") {
	                this.axis.tickValues(this.axis_scale.scale.domain());
	            } else if (this.axis_scale.model.type === "log") {
	                var i, r;
	                var allticks = this.axis_scale.scale.ticks();
	                var oom = Math.abs(Math.log10(this.axis_scale.scale.domain()[1] / this.axis_scale.scale.domain()[0]));
	                if (oom < 2) {
	                    this.axis.tickValues(allticks);
	                } else if (oom < 7) {
	                    useticks = [];
	                    for (i = 0; i < allticks.length; i++) {
	                        r = Math.abs(Math.log10(allticks[i]) % 1);
	                        if ((Math.abs(r) < 0.001) ||
	                            (Math.abs(r-1) < 0.001) ||
	                            (Math.abs(r-0.30103) < 0.001) ||
	                            (Math.abs(r-0.69897) < 0.001)) {
	                            useticks.push(allticks[i]);
	                        }
	                    }
	                    this.axis.tickValues(useticks);
	                } else {
	                    useticks = [];
	                    var s = Math.round(oom / 10);
	                    for (i = 0; i < allticks.length; i++) {
	                        r = Math.abs(Math.log10(allticks[i]) % s);
	                        if ((Math.abs(r) < 0.001) || (Math.abs(r-s) < 0.001)) {
	                            useticks.push(allticks[i]);
	                        }
	                    }
	                    this.axis.tickValues(useticks);
	                }
	            } else {
	                this.axis.tickValues(this.axis_scale.scale.ticks());
	            }
	        }
	        if(this.model.get("tick_format") === null ||
	            this.model.get("tick_format") === undefined) {
	                if(this.axis_scale.type !== "ordinal") {
	                    this.tick_format = this.guess_tick_format(this.axis.tickValues());
	                }
	        }
	        this.axis.tickFormat(this.tick_format);
	
	
	        if(this.g_axisline) {
	             this.g_axisline
	                .transition("set_tick_values")
	                .duration(animate === true ? this.parent.model.get("animation_duration") : 0)
	                .call(this.axis);
	
	            this.apply_tick_styling();
	        }
	    },
	
	    tickformat_changed: function() {
	        this.tick_format = this.generate_tick_formatter();
	        this.axis.tickFormat(this.tick_format);
	        if(this.g_axisline) {
	            this.g_axisline.call(this.axis);
	        }
	        this.apply_tick_styling();
	    },
	
	    apply_tick_styling: function () {
	        // Applies current tick styling to all displayed ticks
	
	        this.g_axisline.selectAll(".tick text")
	                .style(this.model.get("tick_style"))
	                .attr("transform", this.get_tick_transforms());
	    },
	
	    get_tick_transforms: function() {
	        // parses object and returns a string that can be passed to a D3 as a 
	        // set of options
	        // Note: Currently, only the `tick_rotate` attribute uses .transform()
	
	        var rotation = this.model.get("tick_rotate");
	        return `rotate(${rotation})`;
	    },
	
	    update_scales: function() {
	        // Updates the domains of both scales
	
	        this.update_scale_domain();
	        this.update_offset_scale_domain();
	    },
	
	    update_scale_domain: function() {
	        // Sets the scale domain (Range of input values)
	
	        var is_vertical = this.model.get("orientation") === "vertical";
	
	        var initial_range = (is_vertical) ?
	            this.parent.padded_range("y", this.axis_scale.model) : 
	            this.parent.padded_range("x", this.axis_scale.model);
	
	        var target_range = (is_vertical) ?
	            this.parent.range("y") : this.parent.range("x");
	
	        this.axis_scale.expand_domain(initial_range, target_range);
	        this.axis.scale(this.axis_scale.scale);
	    },
	
	    update_offset_scale_domain: function() {
	        // Sets the domain (range of input values) of the offset scale 
	
	        var is_vertical = this.model.get("orientation") === "vertical";
	
	        if (this.offset_scale) {
	            var initial_range = (!is_vertical) ?
	                this.parent.padded_range("y", this.offset_scale.model) :
	                this.parent.padded_range("x", this.offset_scale.model);
	
	            var target_range = (!is_vertical) ?
	                this.parent.range("y") :
	                this.parent.range("x");
	
	            this.offset_scale.expand_domain(initial_range, target_range);
	        }
	    },
	
	    generate_tick_formatter: function() {
	        if(this.axis_scale.model.type === "date" ||
	           this.axis_scale.model.type === "date_color_linear") {
	            if(this.model.get("tick_format")) {
	                return d3.time.format(this.model.get("tick_format"));
	            } else {
	                return this.guess_tick_format();
	            }
	        } else if (this.axis_scale.model.type === "ordinal") {
	            var tick_format = this.model.get("tick_format");
	            if(tick_format) {
	                //TODO: This may not be the best way to do this. We can
	                //check the instance of the elements in the domain and
	                //apply the format depending on that.
	                if(utils.is_valid_time_format(tick_format)) {
	                    return d3.time.format(tick_format);
	                } else {
	                    return d3.format(tick_format);
	                }
	            }
	            return function(d) { return d; };
	        } else {
	            // linear or log scale
	            if(this.model.get("tick_format")) {
	                return d3.format(this.model.get("tick_format"));
	            }
	            return this.guess_tick_format();
	        }
	    },
	
	    set_scales_range: function() {
	        var is_vertical = this.model.get("orientation") === "vertical";
	
	        this.axis_scale.set_range((is_vertical) ?
	            [this.height, 0] : [0, this.width]);
	        if(this.offset_scale) {
	            this.offset_scale.set_range((is_vertical) ?
	                [0, this.width] : [this.height, 0]);
	        }
	    },
	
	    create_axis: function() {
	        // Creates the initial D3 axis and sets it on this.axis
	
	        var is_vertical = this.model.get("orientation") === "vertical";
	        var side = this.model.get("side");
	
	        if (is_vertical) {
	            this.axis = d3.svg.axis().scale(this.axis_scale.scale)
	                .orient(side === "right" ? "right" : "left");
	        } else {
	            this.axis = d3.svg.axis().scale(this.axis_scale.scale)
	                .orient(side === "top" ? "top" : "bottom");
	        }
	    },
	
	    append_axis: function() {
	        this.create_axis();
	        this.update_scales();
	
	        // Create initial SVG element
	        this.g_axisline = this.d3el.append("g")
	            .attr("class", "axis")
	            .attr("transform", this.get_axis_transform())
	            .call(this.axis);
	
	        // Create element for axis label
	        this.g_axisline.append("text")
	            .attr("class", "axislabel")
	            .attr(this.get_label_attributes())
	            .style(this.get_text_styling())
	            .text(this.model.get("label"));
	
	        // Apply custom settings
	        this.set_tick_values();
	        this.update_grid_lines();
	        this.update_color();
	        this.apply_tick_styling();
	        this.update_label();
	    },
	
	    get_offset_promise: function() {
	        /*
	         * The offset may require the creation of a Scale, which is async
	         * Hence, get_offset_promise returns a promise.
	         */
	        var that = this;
	        var return_promise = Promise.resolve();
	        var offset = this.model.get("offset");
	        var is_vertical = this.model.get("orientation") === "vertical";
	
	        if (offset.value !== undefined && offset.value !== null) {
	            //If scale is undefined but, the value is defined, then we have
	            //to
	            if(offset.scale === undefined) {
	                this.offset_scale = (is_vertical) ?
	                    this.parent.scale_x : this.parent.scale_y;
	            } else {
	                return_promise = this.create_child_view(offset.scale)
	                    .then(function(view) {
	                        that.offset_scale = view;
	                        if(that.offset_scale.model.type !== "ordinal") {
	                            that.offset_scale.scale.clamp(true);
	                        }
	                        that.offset_scale.on("domain_changed", function() {
	                            this.update_offset_scale_domain();
	                            this.g_axisline.attr("transform", this.get_axis_transform());
	                            this.update_grid_lines();
	                        }, that);
	                    });
	            }
	            this.offset_value = offset.value;
	        } else {
	            //required if the offset has been changed from a valid value
	            //to null
	            this.offset_scale = this.offset_value = undefined;
	        }
	        return return_promise;
	    },
	
	    highlight: function() {
	        this.g_axisline.classed("axisbold", true);
	    },
	
	    unhighlight: function() {
	        this.g_axisline.classed("axisbold", false);
	    },
	
	    get_basic_transform: function() {
	        var is_vertical = this.model.get("orientation") === "vertical";
	        var side = this.model.get("side");
	
	        if (is_vertical){
	            return (side === "right") ? this.width : 0;
	        } else {
	            return (side === "top") ? 0 : this.height;
	        }
	    },
	
	    get_axis_transform: function() {
	        var is_vertical = this.model.get("orientation") === "vertical";
	        if(is_vertical){
	            return "translate(" + this.process_offset() + ", 0)";
	        } else {
	            return "translate(0, " + this.process_offset() + ")";
	        }
	    },
	
	    process_offset: function() {
	        if(this.offset_scale === undefined || this.offset_scale === null) {
	            return this.get_basic_transform();
	        } else {
	            var value = this.offset_scale.scale(this.offset_value);
	            //The null check is required for two reasons. Value may be null
	            //or the scale is ordinal which does not include the value in
	            //its domain.
	            value = (value === undefined) ? this.get_basic_transform()
	                                          : value;
	            return this.offset_scale.offset + value;
	        }
	    },
	
	    get_label_attributes: function() {
	        // Returns an object based on values of "label_location" and "label_offset"
	
	        var label_x = 0;
	        var label_location = this.model.get("label_location");
	        var label_offset = this.calculate_label_offset();
	        var is_vertical = this.model.get("orientation") === "vertical";
	        var side = this.model.get("side");
	
	         if (is_vertical){
	            if (label_location === "start") {
	                label_x = -(this.height);
	            } else if (label_location === "middle") {
	                label_x = -(this.height) / 2;
	            }
	            if(side === "right") {
	                return {
	                    transform: "rotate(-90)",
	                    x: label_x,
	                    y: label_offset,
	                    dy: "1ex",
	                    dx: "0em"
	                };
	            } else {
	                return {
	                     transform: "rotate(-90)",
	                     x: label_x,
	                     y: label_offset,
	                     dy: "0em", dx: "0em"
	                };
	            }
	        } else {
	            if(label_location === "middle") {
	                label_x = this.width / 2;
	            } else if (label_location === "end") {
	                label_x = this.width;
	            }
	            if(side === "top") {
	                return {
	                    x: label_x,
	                    y: label_offset ,
	                    dy: "0.75ex",
	                    dx: "0em", transform: ""
	                };
	            } else {
	                return {
	                    x: label_x,
	                    y: label_offset,
	                    dy: "0.25ex",
	                    dx: "0em", transform: ""
	                };
	            }
	        }
	    },
	
	    get_text_styling: function() {
	        // This function returns the text styling based on the attributes
	        // of the axis. As of now, only the text-anchor attribute is set.
	        // More can be added :)
	        var label_location = this.model.get("label_location");
	        if(label_location === "start")
	            return {"text-anchor" : "start"};
	        else if(label_location === "end")
	            return {"text-anchor" : "end"};
	        else
	            return {"text-anchor" : "middle"};
	    },
	
	    update_label: function() {
	        this.g_axisline.select("text.axislabel")
	            .text(this.model.get("label"));
	        this.d3el.selectAll(".axislabel").selectAll("text");
	        if(this.model.get("label_color") !== "" &&
	           this.model.get("label_color") !== null) {
	            this.g_axisline.select("text.axislabel")
	              .style("fill", this.model.get("label_color"));
	            this.d3el.selectAll(".axislabel").selectAll("text")
	              .style("fill", this.model.get("label_color"));
	        }
	    },
	
	    update_label_location: function() {
	        this.g_axisline.select("text.axislabel")
	            .attr(this.get_label_attributes())
	            .style(this.get_text_styling());
	    },
	
	    update_label_offset: function(model, offset) {
	        this.label_offset = this.calculate_label_offset();
	        this.g_axisline.select("text.axislabel")
	          .attr("y", this.label_offset);
	    },
	
	    calculate_label_offset: function() {
	        // If the label offset is not defined, depending on the orientation
	        // of the axis, an offset is set.
	
	        var label_offset = this.model.get("label_offset");
	        var is_vertical = this.model.get("orientation") === "vertical";
	        var side = this.model.get("side");
	
	        if (!label_offset) {
	            if (!is_vertical) {
	                label_offset = "2em";
	            } else {
	                label_offset = "4ex";
	            }
	        }
	        // Label_offset is a signed distance from the axis line. Positive
	        // is away from the figure and negative is towards the figure. The
	        // notion of away and towards is different for left/right and
	        // top/bottom axis.
	        var index = -1;
	        for (var i = 0; (i < UNITS_ARRAY.length && index === -1); i++) {
	            index = label_offset.indexOf(UNITS_ARRAY[i]);
	        }
	
	        if (index === -1) {
	            return label_offset;
	        }
	
	        if (side === "top" || side === "left") {
	            var num = -1 * parseInt(label_offset.substring(0, index));
	            label_offset = num + label_offset.substring(index);
	        }
	        return label_offset;
	    },
	
	    update_grid_lines: function(animate) {
	        var grid_type = this.model.get("grid_lines");
	        var side = this.model.get("side");
	        var orientation = this.model.get("orientation");
	        var is_x = orientation !== "vertical";
	        var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	
	        var tickSize = orientation === "vertical" ? -this.width : -this.height;
	        var tickOffset = 0;
	
	        //apply offsets if applicable
	        if (this.offset_scale) {
	            var offset = this.offset_scale.scale(this.offset_value);
	
	            if (side === "bottom" || side == "right") {
	                tickSize = -offset;
	                tickOffset = is_x ? this.height - offset : this.width - offset;
	            } else {
	                tickSize += offset;
	                tickOffset = -offset;
	            }
	        }
	
	        if (grid_type !== "none") {
	            this.axis.innerTickSize(tickSize).outerTickSize(6);
	        } else {
	            this.axis.tickSize(6);
	        }
	
	        this.g_axisline
	            .selectAll(".tick")
	            .classed("short", grid_type === "none");
	
	        this.g_axisline
	            .transition("update_grid_lines").duration(animation_duration)
	            .call(this.axis)
	            .selectAll(".tick line")
	            .attr(is_x ? "y1" : "x1",
	                  (this.offset_scale && grid_type !== "none") ? tickOffset : null)
	            .style("stroke-dasharray", grid_type === "dashed" ? ("5, 5") : null);
	
	        this.apply_tick_styling();
	
	        if (this.model.get("grid_color")) {
	            this.g_axisline
	                .selectAll(".tick line")
	                .style("stroke", this.model.get("grid_color"));
	        }
	    },
	
	    update_color: function() {
	        if (this.model.get("color")) {
	            this.d3el.selectAll(".tick")
	                .selectAll("text")
	                .style("fill", this.model.get("color"));
	            this.d3el.selectAll(".domain")
	                .style("stroke", this.model.get("color"));
	        }
	    },
	
	    redraw_axisline: function() {
	        // TODO: This call might not be necessary
	        // TODO: Doesn't do what it states.
	        // Has to redraw from a clean slate
	        this.update_scales();
	
	        //animate axis and grid lines on domain changes
	        var animate = true;
	        this.set_tick_values(animate);
	        this.update_grid_lines(animate);
	    },
	
	    rescale_axis: function() {
	        //function to be called when the range of the axis has been updated
	        //or the axis has to be repositioned.
	        this.set_scales_range();
	        //The following calls to update domains are made as the domain
	        //of the axis scale needs to be recalculated as the expansion due
	        //to the padding depends on the size of the canvas because of the
	        //presence of fixed pixel padding for the bounding box.
	        this.update_axis_domain();
	        this.update_scales();
	        this.g_axisline.attr("transform", this.get_axis_transform());
	        this.g_axisline.call(this.axis);
	        this.g_axisline.select("text.axislabel")
	            .attr(this.get_label_attributes())
	            .style(this.get_text_styling());
	        // TODO: what follows is currently part of redraw_axisline
	        this.set_tick_values();
	        this.update_grid_lines();
	        this.apply_tick_styling();
	    },
	
	    update_axis_domain: function() {
	        var initial_range = (this.vertical) ?
	            this.parent.padded_range("y", this.axis_scale.model) : this.parent.padded_range("x", this.axis_scale.model);
	        var target_range = (this.vertical) ?
	            this.parent.range("y") : this.parent.range("x");
	        this.axis_scale.expand_domain(initial_range, target_range);
	        this.axis.scale(this.axis_scale.scale);
	    },
	
	    parent_margin_updated: function() {
	        // sets the new dimensions of the g element for the axis.
	        this.margin = this.parent.margin;
	        this.width = this.parent.width - this.margin.left - this.margin.right;
	        this.height = this.parent.height - this.margin.top - this.margin.bottom;
	        this.rescale_axis();
	    },
	
	    update_visibility: function(model, visible) {
	        this.d3el.style("display", visible ? "inline" : "none");
	    },
	
	    get_ticks_from_array_or_length: function(data_array) {
	        // This function is to be called when the ticks are passed explicitly
	        // or the number of ticks to be drawn.
	        // Have to do different things based on the type of the scale.
	        // If an array is passed, then just scale and return equally spaced
	        // points in the array. This is the way it is done for ordinal
	        // scales.
	        var step, max;
	        var num_ticks = this.model.get("num_ticks");
	
	        if(this.axis_scale.model.type === "ordinal") {
	            data_array = this.axis_scale.scale.domain();
	        }
	        if(num_ticks !== undefined && num_ticks !== null && num_ticks < 2) {
	            return [];
	        }
	        if(data_array) {
	            if(num_ticks == undefined || num_ticks == null || data_array.length <= num_ticks) {
	                return data_array;
	            } else {
	               step = Math.floor(data_array.length / (num_ticks - 1));
	               var indices = _.range(0, data_array.length, step);
	               return indices.map(function(index) {
	                   return data_array[index];
	               });
	            }
	        }
	        var scale_range = this.axis_scale.scale.domain();
	        var max_index = (this.axis_scale.scale.domain().length - 1);
	        step = (scale_range[max_index] - scale_range[0]) / (num_ticks - 1);
	        if(this.axis_scale.model.type === "date" ||
	           this.axis_scale.model.type === "date_color_linear") {
	        //For date scale, the dates have to be converted into milliseconds
	        //since epoch time and then back.
	            scale_range[0] = scale_range[0].getTime();
	            scale_range[max_index] = scale_range[max_index].getTime();
	            max = (scale_range[max_index] + (step * 0.5));
	            var range_in_times = _.range(scale_range[0], max, step);
	            return range_in_times.map(function(elem) {
	                return new Date(elem);
	            });
	        } else {
	            max = (scale_range[max_index] + (step * 0.5));
	            return _.range(scale_range[0], max, step);
	        }
	    },
	
	    set_scale_promise: function(model) {
	        // Sets the child scale
	        var that = this;
	        if (this.axis_scale) { this.axis_scale.remove(); }
	        return this.create_child_view(model).then(function(view) {
	            // Trigger the displayed event of the child view.
	            that.displayed.then(function() {
	                view.trigger("displayed");
	            });
	            that.axis_scale = view;
	            that.axis_scale.on("domain_changed", that.redraw_axisline, that);
	            that.axis_scale.on("highlight_axis", that.highlight, that);
	            that.axis_scale.on("unhighlight_axis", that.unhighlight, that);
	        });
	    },
	
	    update_scale: function(old, scale) {
	        // Called when the child scale changes
	        this.axis_scale.off();
	        this.set_scale_promise(scale);
	    },
	
	    _get_digits: function(number) {
	        return (number === 0) ? 1 : (Math.floor(Math.log10(Math.abs(number))) + 1);
	    },
	
	    _replace_trailing_zeros: function(str) {
	        //regex to replace the trailing
	        //zeros after the decimal point.
	        //Handles the case of exponentially formatted string
	        //TODO: Should be done in a single regex
	        var e_index = str.search("e");
	        if(e_index != -1) {
	            return str.substring(0, e_index).replace(/(\.[0-9]*?)0+$/gi, "$1").replace(/\.$/, "") +
	                   str.substring(e_index);
	        } else {
	            return str.replace(/(\.[0-9]*?)0+$/gi, "$1").replace(/\.$/, "");
	        }
	    },
	
	    get_format_func: function(prec) {
	        if(prec === 0) {
	        // format this as an integer
	            return function(number) { return d3.format("d")(Math.round(number)); };
	        }
	        //if it is -1, then it is a generic format
	        var fmt_string = (prec == -1) ? "" : ("." + (prec));
	        var that = this;
	        return function(number) {
	            var str = d3.format(fmt_string + "g")(number);
	            var reg_str = str.replace(/-|\.|e/gi, "");
	            if(reg_str.length < 6) {
	                return that._replace_trailing_zeros(str);
	            } else {
	                //if length is more than 6, format it exponentially
	                if(fmt_string === "") {
	                    //if fmt_string is "", then the number o/p can be
	                    //arbitrarily large
	                    var new_str = d3.format(fmt_string + "e")(number);
	                    if(new_str.length >= 7) {
	                        //in the case of a round off error, setting the max
	                        //limit to be 6
	                         new_str = d3.format(".6e")(number);
	                    }
	                    return that._replace_trailing_zeros(new_str);
	                } else {
	                    //Format with the precision required
	                    return that._replace_trailing_zeros(d3.format(fmt_string + "e")(number));
	                }
	            }
	        };
	    },
	
	    _linear_scale_precision: function(ticks) {
	        ticks = (ticks === undefined || ticks === null) ? this.axis_scale.scale.ticks() : ticks;
	        var diff = Math.abs(ticks[1] - ticks[0]);
	        var max = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
	
	        var max_digits = this._get_digits(max);
	        // number of digits in the max
	        var diff_digits = this._get_digits(diff);
	        // number of digits in the min
	
	        var precision = Math.abs(max_digits - diff_digits);
	        // difference in the number of digits. The number of digits we have
	        // to display is the diff above + 1.
	        var limit = 6;
	        // limit is a choice of the max number of digits that are
	        // represented
	        if(max_digits >= 0 && diff_digits > 0) {
	            if(max_digits <= 6) {
	            // format the number as an integer
	                return 0;
	            } else  {
	            // precision plus 1 is returned here as they are the number of
	            // digits to be displayed. Capped at 6
	                return Math.min(precision, 6) + 1;
	            }
	        }
	        else if(diff_digits <= 0) {
	            // return math.abs(diff_digits) + max_digits + 1. Capped at 6.
	            return Math.min((Math.abs(diff_digits) + max_digits), 6) + 1;
	        }
	    },
	
	    linear_sc_format: function(ticks) {
	        return this.get_format_func(this._linear_scale_precision(ticks));
	    },
	
	    date_sc_format: function(ticks) {
	        // assumes that scale is a linear date scale
	        ticks = (ticks === undefined || ticks === null) ? this.axis_scale.scale.ticks() : ticks;
	        // diff is the difference between ticks in milliseconds
	        var diff = Math.abs(ticks[1] - ticks[0]);
	        var div = 1000;
	
	        if(Math.floor(diff / div) === 0) {
	            //diff is less than a second
	            return [[".%L", function(d) { return d.getMilliseconds(); }],
	            [":%S", function(d) { return d.getSeconds(); }],
	            ["%I:%M", function(d) { return true; }]];
	        } else if (Math.floor(diff / (div *= 60)) === 0) {
	            //diff is less than a minute
	             return [[":%S", function(d) { return d.getSeconds(); }],
	             ["%I:%M", function(d) { return true; }]];
	        } else if (Math.floor(diff / (div *= 60)) === 0) {
	            // diff is less than an hour
	            return [["%I:%M", function(d) { return d.getMinutes(); }],
	            ["%I %p", function(d) { return true; }]];
	        } else if (Math.floor(diff / (div *= 24)) === 0) {
	            //diff is less than a day
	             return [["%I %p", function(d) { return d.getHours(); }],
	             ["%b %d", function(d) { return true; }]];
	        } else if (Math.floor(diff / (div *= 27)) === 0) {
	            //diff is less than a month
	            return [["%b %d", function(d) { return d.getDate() !== 1; }],
	                    ["%b %Y", function(d) { return true; }]];
	        } else if (Math.floor(diff / (div *= 12)) === 0) {
	            //diff is less than a year
	            return [["%b %d", function(d) { return d.getDate() !== 1; }],
	                    ["%b %Y", function() { return true;}]];
	        } else {
	            //diff is more than a year
	            return  [["%b %d", function(d) { return d.getDate() !== 1; }],
	                     ["%b %Y", function(d) { return d.getMonth();}],
	                     ["%Y", function() { return true; }]];
	        }
	    },
	
	    log_sc_format: function(ticks) {
	        return this.get_format_func(this._log_sc_precision(ticks));
	    },
	
	    _log_sc_precision: function(ticks) {
	        ticks = (ticks === undefined || ticks === null) ? this.axis_scale.scale.ticks() : ticks;
	        var ratio = Math.abs(Math.log10(ticks[1] / ticks[0]));
	
	        if(ratio >= 0.3010) {
	            //format them as they are with the max_length of 6
	            return -1;
	        } else {
	            //return a default of 3 digits of precision
	            return 3;
	        }
	    },
	
	    guess_tick_format: function(ticks) {
	        if(this.axis_scale.model.type == "linear" ||
	           this.axis_scale.model.type == "color_linear") {
	            return this.linear_sc_format(ticks);
	        } else if (this.axis_scale.model.type == "date" ||
	                   this.axis_scale.model.type == "date_color_linear") {
	            return d3.time.format.multi(this.date_sc_format(ticks));
	        } else if (this.axis_scale.model.type == "log") {
	            return this.log_sc_format(ticks);
	        }
	    }
	});
	
	
	module.exports = {
	    Axis: Axis
	};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
	  var d3 = {
	    version: "3.5.17"
	  };
	  var d3_arraySlice = [].slice, d3_array = function(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = this.document;
	  function d3_documentElement(node) {
	    return node && (node.ownerDocument || node.document || node).documentElement;
	  }
	  function d3_window(node) {
	    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
	  }
	  if (d3_document) {
	    try {
	      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
	    } catch (e) {
	      d3_array = function(list) {
	        var i = list.length, array = new Array(i);
	        while (i--) array[i] = list[i];
	        return array;
	      };
	    }
	  }
	  if (!Date.now) Date.now = function() {
	    return +new Date();
	  };
	  if (d3_document) {
	    try {
	      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
	    } catch (error) {
	      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
	      d3_element_prototype.setAttribute = function(name, value) {
	        d3_element_setAttribute.call(this, name, value + "");
	      };
	      d3_element_prototype.setAttributeNS = function(space, local, value) {
	        d3_element_setAttributeNS.call(this, space, local, value + "");
	      };
	      d3_style_prototype.setProperty = function(name, value, priority) {
	        d3_style_setProperty.call(this, name, value + "", priority);
	      };
	    }
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function(a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function(array, f) {
	    var i = -1, n = array.length, a, b, c;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [ a, c ];
	  };
	  function d3_number(x) {
	    return x === null ? NaN : +x;
	  }
	  function d3_numeric(x) {
	    return !isNaN(x);
	  }
	  d3.sum = function(array, f) {
	    var s = 0, n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  d3.mean = function(array, f) {
	    var s = 0, n = array.length, a, i = -1, j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
	    }
	    if (j) return s / j;
	  };
	  d3.quantile = function(values, p) {
	    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function(array, f) {
	    var numbers = [], n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
	    }
	    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
	  };
	  d3.variance = function(array, f) {
	    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
	    if (arguments.length === 1) {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(array[i]))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    } else {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    }
	    if (j > 1) return s / (j - 1);
	  };
	  d3.deviation = function() {
	    var v = d3.variance.apply(this, arguments);
	    return v ? Math.sqrt(v) : v;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
	        }
	        return lo;
	      },
	      right: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function(f) {
	    return d3_bisector(f.length === 1 ? function(d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function(array, i0, i1) {
	    if ((m = arguments.length) < 3) {
	      i1 = array.length;
	      if (m < 2) i0 = 0;
	    }
	    var m = i1 - i0, t, i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
	    }
	    return array;
	  };
	  d3.permute = function(array, indexes) {
	    var i = indexes.length, permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function(array) {
	    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
	    return pairs;
	  };
	  d3.transpose = function(matrix) {
	    if (!(n = matrix.length)) return [];
	    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
	      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
	        row[j] = matrix[j][i];
	      }
	    }
	    return transpose;
	  };
	  function d3_transposeLength(d) {
	    return d.length;
	  }
	  d3.zip = function() {
	    return d3.transpose(arguments);
	  };
	  d3.keys = function(map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function(map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function(map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function(arrays) {
	    var n = arrays.length, m, i = -1, j = 0, merged, array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function(start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    for (var key in properties) {
	      Object.defineProperty(ctor.prototype, key, {
	        value: properties[key],
	        enumerable: false
	      });
	    }
	  }
	  d3.map = function(object, f) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) {
	      object.forEach(function(key, value) {
	        map.set(key, value);
	      });
	    } else if (Array.isArray(object)) {
	      var i = -1, n = object.length, o;
	      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
	    } else {
	      for (var key in object) map.set(key, object[key]);
	    }
	    return map;
	  };
	  function d3_Map() {
	    this._ = Object.create(null);
	  }
	  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function(key) {
	      return this._[d3_map_escape(key)];
	    },
	    set: function(key, value) {
	      return this._[d3_map_escape(key)] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function() {
	      var values = [];
	      for (var key in this._) values.push(this._[key]);
	      return values;
	    },
	    entries: function() {
	      var entries = [];
	      for (var key in this._) entries.push({
	        key: d3_map_unescape(key),
	        value: this._[key]
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
	    }
	  });
	  function d3_map_escape(key) {
	    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
	  }
	  function d3_map_unescape(key) {
	    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
	  }
	  function d3_map_has(key) {
	    return d3_map_escape(key) in this._;
	  }
	  function d3_map_remove(key) {
	    return (key = d3_map_escape(key)) in this._ && delete this._[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    for (var key in this._) keys.push(d3_map_unescape(key));
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this._) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this._) return false;
	    return true;
	  }
	  d3.nest = function() {
	    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [ object ]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function(keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function(keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [], sortKey = sortKeys[depth++];
	      map.forEach(function(key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function(a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function(array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function(array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function(d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function(order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function(order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function(f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function(array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {
	    this._ = Object.create(null);
	  }
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function(key) {
	      this._[d3_map_escape(key += "")] = true;
	      return key;
	    },
	    remove: d3_map_remove,
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key));
	    }
	  });
	  d3.behavior = {};
	  function d3_identity(d) {
	    return d;
	  }
	  d3.rebind = function(target, source) {
	    var i = 1, n = arguments.length, method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function() {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
	  function d3_noop() {}
	  d3.dispatch = function() {
	    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function(type, listener) {
	    var i = type.indexOf("."), name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [], listenerByName = new d3_Map();
	    function event() {
	      var z = listeners, i = -1, n = z.length, l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function(name, listener) {
	      var l = listenerByName.get(name), i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event, s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function(thiz, argumentz) {
	      return function(e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function(s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = {}.__proto__ ? function(object, prototype) {
	    object.__proto__ = prototype;
	  } : function(object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function(s, n) {
	    return n.querySelector(s);
	  }, d3_selectAll = function(s, n) {
	    return n.querySelectorAll(s);
	  }, d3_selectMatches = function(n, s) {
	    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
	    d3_selectMatches = function(n, s) {
	      return d3_selectMatcher.call(n, s);
	    };
	    return d3_selectMatches(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function(s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function() {
	    return d3.select(d3_document.documentElement);
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, group, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function(selector) {
	    var subgroups = [], subgroup, node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: d3_nsXhtml,
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function(name) {
	      var i = name.indexOf(":"), prefix = name;
	      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1, x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function(node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) {
	        var node = this.node();
	        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
	      }
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name]; else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function() {
	      this.textContent = "";
	    } : function() {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function() {
	      this.innerHTML = "";
	    } : function() {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function(name) {
	    name = d3_selection_creator(name);
	    return this.select(function() {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    function create() {
	      var document = this.ownerDocument, namespace = this.namespaceURI;
	      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
	    }
	    function createNS() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    }
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
	  }
	  d3_selectionPrototype.insert = function(name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function() {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function() {
	    return this.each(d3_selectionRemove);
	  };
	  function d3_selectionRemove() {
	    var parent = this.parentNode;
	    if (parent) parent.removeChild(this);
	  }
	  d3_selectionPrototype.data = function(value, key) {
	    var i = -1, n = this.length, group, node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
	        for (i = -1; ++i < n; ) {
	          if (node = group[i]) {
	            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
	              exitNodes[i] = node;
	            } else {
	              nodeByKeyValue.set(keyValue, node);
	            }
	            keyValues[i] = keyValue;
	          }
	        }
	        for (i = -1; ++i < m; ) {
	          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          } else if (node !== true) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          }
	          nodeByKeyValue.set(keyValue, true);
	        }
	        for (i = -1; ++i < n; ) {
	          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0; ) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (;i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (;i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function() {
	      return enter;
	    };
	    update.exit = function() {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function(value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function() {
	      return d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function() {
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function(comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function(a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function(callback) {
	    return d3_selection_each(this, function(node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function(callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function() {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function() {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function() {
	    var n = 0;
	    d3_selection_each(this, function() {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, upgroup, group, node;
	    for (var j = -1, m = this.length; ++j < m; ) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function(name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function(d, i, j) {
	      var group = enter[j].update, n = group.length, node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n) ;
	      return node;
	    };
	  }
	  d3.select = function(node) {
	    var group;
	    if (typeof node === "string") {
	      group = [ d3_select(node, d3_document) ];
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = [ node ];
	      group.parentNode = d3_documentElement(node);
	    }
	    return d3_selection([ group ]);
	  };
	  d3.selectAll = function(nodes) {
	    var group;
	    if (typeof nodes === "string") {
	      group = d3_array(d3_selectAll(nodes, d3_document));
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = d3_array(nodes);
	      group.parentNode = null;
	    }
	    return d3_selection([ group ]);
	  };
	  d3_selectionPrototype.on = function(type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  if (d3_document) {
	    d3_selection_onFilters.forEach(function(k) {
	      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	    });
	  }
	  function d3_selection_onListener(listener, argumentz) {
	    return function(e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function(e) {
	      var target = this, related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect, d3_event_dragId = 0;
	  function d3_event_dragSuppress(node) {
	    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect == null) {
	      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
	    }
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function(suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        var off = function() {
	          w.on(click, null);
	        };
	        w.on(click, function() {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function(container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0) {
	        var window = d3_window(container);
	        if (window.scrollX || window.scrollY) {
	          svg = d3.select("body").append("svg").style({
	            position: "absolute",
	            top: 0,
	            left: 0,
	            margin: 0,
	            padding: 0,
	            border: "none"
	          }, "important");
	          var ctm = svg[0][0].getScreenCTM();
	          d3_mouse_bug44083 = !(ctm.f || ctm.e);
	          svg.remove();
	        }
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
	      point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [ point.x, point.y ];
	    }
	    var rect = container.getBoundingClientRect();
	    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
	  }
	  d3.touch = function(container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function() {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function() {
	        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
	        } else {
	          dragOffset = [ 0, 0 ];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId), dx, dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  d3.touches = function(container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function(touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
	  d3.interpolateZoom = function(p0, p1) {
	    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
	    if (d2 < ε2) {
	      S = Math.log(w1 / w0) / ρ;
	      i = function(t) {
	        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
	      };
	    } else {
	      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	      S = (r1 - r0) / ρ;
	      i = function(t) {
	        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
	      };
	    }
	    i.duration = S * 1e3;
	    return i;
	  };
	  d3.behavior.zoom = function() {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
	    if (!d3_behavior_zoomWheel) {
	      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return d3.event.wheelDelta;
	      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
	        return -d3.event.detail;
	      }, "MozMousePixelScroll");
	    }
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function(g) {
	      g.each(function() {
	        var dispatch = event.of(this, arguments), view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function() {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function() {
	            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
	            return function(t) {
	              var l = i(t), k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("interrupt.zoom", function() {
	            zoomended(dispatch);
	          }).each("end.zoom", function() {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function(_) {
	      if (!arguments.length) return [ view.x, view.y ];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function(_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: null
	      };
	      scaleTo(+_);
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function(_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.center = function(_) {
	      if (!arguments.length) return center;
	      center = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.size = function(_) {
	      if (!arguments.length) return size;
	      size = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.duration = function(_) {
	      if (!arguments.length) return duration;
	      duration = +_;
	      return zoom;
	    };
	    zoom.x = function(z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function(z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
	    }
	    function point(l) {
	      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function zoomTo(that, p, l, k) {
	      that.__chart__ = {
	        x: view.x,
	        y: view.y,
	        k: view.k
	      };
	      scaleTo(Math.pow(2, k));
	      translateTo(center0 = p, l);
	      that = d3.select(that);
	      if (duration > 0) that = that.transition().duration(duration);
	      that.call(zoom.event);
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function(x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function(y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      if (!zooming++) dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [ view.x, view.y ]
	      });
	    }
	    function zoomended(dispatch) {
	      if (!--zooming) dispatch({
	        type: "zoomend"
	      }), center0 = null;
	    }
	    function mousedowned() {
	      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function(t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(), now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0];
	            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
	            d3_eventPreventDefault();
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that), p0, l0, p1, l1;
	        d3_selection_interrupt.call(that);
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
	          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
	      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function() {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
	      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function() {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function() {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360; else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function(k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function(k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function() {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function(k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function(k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function() {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r, g = this.g, b = this.b, i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function() {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function() {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    var r = 0, g = 0, b = 0, m1, m2, color;
	    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	       case "hsl":
	        {
	          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	        }
	
	       case "rgb":
	        {
	          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	        }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) {
	      return rgb(color.r, color.g, color.b);
	    }
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    rebeccapurple: 6697881,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function(key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function() {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function(url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
	      mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
	    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status, result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function(event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name]; else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function(value) {
	      response = value;
	      return xhr;
	    };
	    [ "get", "post" ].forEach(function(method) {
	      xhr[method] = function() {
	        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function(method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function(request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function() {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function(error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function(delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function(_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function(request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function(text, f) {
	      var o;
	      return dsv.parseRows(text, function(row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function(name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function(row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function(text, f) {
	      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && (a = f(a, n++)) == null) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function(rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(), fields = [];
	      rows.forEach(function(row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
	        return fields.map(function(field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function(rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function() {
	    d3_timer.apply(this, arguments);
	  };
	  function d3_timer(callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay, timer = {
	      c: callback,
	      t: time,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	    return timer;
	  }
	  function d3_timer_step() {
	    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function() {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now(), timer = d3_timer_queueHead;
	    while (timer) {
	      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
	      timer = timer.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0, t1 = d3_timer_queueHead, time = Infinity;
	    while (t1) {
	      if (t1.c) {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      } else {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function(x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
	  d3.formatPrefix = function(value, precision) {
	    var i = 0;
	    if (value = +value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function(d) {
	        return d / k;
	      } : function(d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
	      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
	      while (i > 0 && g > 0) {
	        if (length + g + 1 > width) g = Math.max(1, width - length);
	        t.push(value.substring(i -= g, i + g));
	        if ((length += g + 1) > width) break;
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function(specifier) {
	      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	      }
	      switch (type) {
	       case "n":
	        comma = true;
	        type = "g";
	        break;
	
	       case "%":
	        scale = 100;
	        suffix = "%";
	        type = "f";
	        break;
	
	       case "p":
	        scale = 100;
	        suffix = "%";
	        type = "r";
	        break;
	
	       case "b":
	       case "o":
	       case "x":
	       case "X":
	        if (symbol === "#") prefix = "0" + type.toLowerCase();
	
	       case "c":
	        exponent = false;
	
	       case "d":
	        integer = true;
	        precision = 0;
	        break;
	
	       case "s":
	        scale = -1;
	        type = "r";
	        break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function(value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."), before, after;
	        if (i < 0) {
	          var j = exponent ? value.lastIndexOf("e") : -1;
	          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
	        } else {
	          before = value.substring(0, i);
	          after = locale_decimal + value.substring(i + 1);
	        }
	        if (!zfill && comma) before = formatGroup(before, Infinity);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function(x) {
	      return x.toString(2);
	    },
	    c: function(x) {
	      return String.fromCharCode(x);
	    },
	    o: function(x) {
	      return x.toString(8);
	    },
	    x: function(x) {
	      return x.toString(16);
	    },
	    X: function(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function(x, p) {
	      return x.toExponential(p);
	    },
	    f: function(x, p) {
	      return x.toFixed(p);
	    },
	    r: function(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {}, d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function() {
	      return this._.getUTCDate();
	    },
	    getDay: function() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function() {
	      return 0;
	    },
	    valueOf: function() {
	      return this._.valueOf();
	    },
	    setDate: function() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date), d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0), times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function(date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function(date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function(date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function(date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function(date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function(date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function(date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function(date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function(date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [], i = -1, j = 0, c, p, f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function(string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        }, i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
	          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function() {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c, p, t, i = 0, n = template.length, m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function(template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function(string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function(p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      e: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function(d) {
	        return d.getDay();
	      },
	      W: function(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(), i = -1, n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
	    i + 5) : -1;
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length, i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function(date) {
	      var i = 0, f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function(locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [ 3 ],
	    currency: [ "$", "" ],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: [ "AM", "PM" ],
	    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
	    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
	    },
	    reset: function() {
	      this.s = this.t = 0;
	    },
	    valueOf: function() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b, bv = x - a, av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function(object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function(object, listener) {
	      var features = object.features, i = -1, n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function(object, listener) {
	      listener.sphere();
	    },
	    Point: function(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function(object, listener) {
	      var geometries = object.geometries, i = -1, n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1, n = coordinates.length - closed, coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1, n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function(object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function(λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
	      sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function() {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
	    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = function() {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function(feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity, dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
	    };
	  }();
	  d3.geo.centroid = function(object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [ NaN, NaN ];
	    }
	    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function() {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return x = a(x, y), b(x[0], x[1]);
	    }
	    if (a.invert && b.invert) compose.invert = function(x, y) {
	      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	    };
	    return compose;
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [], clip = [];
	    segments.forEach(function(segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n, p0 = segment[0], p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0], points, point;
	    while (1) {
	      var current = start, isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n, i = 0, a = array[0], b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function(rotate, listener) {
	      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
	      function pointRing(λ, φ) {
	        ring.push([ λ, φ ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1, i = -1, point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [], line;
	    return {
	      lineStart: function() {
	        lines.push(line = []);
	      },
	      point: function(λ, φ) {
	        line.push([ λ, φ ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
	    return {
	      lineStart: function() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: function() {
	        return 2 - clean;
	      }
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i], m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (!j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function(λ, φ) {
	          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: function() {
	          return clean | (v00 && v0) << 1;
	        }
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
	      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [ q, d3_geo_spherical(q1) ];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius, code = 0;
	      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function(line) {
	      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function() {
	    var x0, y0, x1, y1, stream, clip, clipExtent = {
	      stream: function(output) {
	        if (stream) stream.valid = false;
	        stream = clip(output);
	        stream.valid = true;
	        return stream;
	      },
	      extent: function(_) {
	        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (stream) stream.valid = false, stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function(listener) {
	      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0, n = polygon.length, y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0, a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([ x, y ]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y); else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1), cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
	    p.parallels = function(_) {
	      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = ρ0 - y;
	      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function() {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function() {
	    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
	  };
	  d3.geo.albersUsa = function() {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
	    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
	    var point, pointStream = {
	      point: function(x, y) {
	        point = [ x, y ];
	      }
	    }, lower48Point, alaskaPoint, hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function(stream) {
	      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function(x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x + pointRadius, y);
	      context.arc(x, y, pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function(_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function() {
	    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function(object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function(object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
	    };
	    path.bounds = function(object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
	    };
	    path.projection = function(_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function(_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function(_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function(x, y) {
	      return project([ x * d3_degrees, y * d3_degrees ]);
	    });
	    return function(stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function(methods) {
	    return {
	      stream: function(stream) {
	        var transform = new d3_geo_transform(stream);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function() {
	      this.stream.sphere();
	    },
	    lineStart: function() {
	      this.stream.lineStart();
	    },
	    lineEnd: function() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function() {
	        stream.sphere();
	      },
	      lineStart: function() {
	        stream.lineStart();
	      },
	      lineEnd: function() {
	        stream.lineEnd();
	      },
	      polygonStart: function() {
	        stream.polygonStart();
	      },
	      polygonEnd: function() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function() {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
	      x = project(x, y);
	      return [ x[0] * k + δx, δy - x[1] * k ];
	    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [ point[0] * k + δx, δy - point[1] * k ];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
	    }
	    projection.stream = function(output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function(_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function(_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function(_) {
	      if (!arguments.length) return [ x, y ];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function(_) {
	      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function(_) {
	      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function() {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function(x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [ λ, φ ];
	  }
	  (d3.geo.equirectangular = function() {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function(rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    }
	    forward.invert = function(coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function(λ, φ) {
	      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
	      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
	    }
	    rotation.invert = function(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
	      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function() {
	    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
	      interpolate(null, null, 1, {
	        point: function(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ ring ]
	      };
	    }
	    circle.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function(x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function(_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius), sr = Math.sin(radius);
	    return function(from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function(a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function() {
	    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function() {
	      return lines().map(function(coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function() {
	      return {
	        type: "Polygon",
	        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
	      };
	    };
	    graticule.extent = function(_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function(_) {
	      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function(_) {
	      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function(_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function(_) {
	      if (!arguments.length) return [ DX, DY ];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function(_) {
	      if (!arguments.length) return [ dx, dy ];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function(_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function(x) {
	      return y.map(function(y) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function(y) {
	      return x.map(function(x) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function() {
	    var source = d3_source, source_, target = d3_target, target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
	      };
	    }
	    greatArc.distance = function() {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function(_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function(_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function() {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function(source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
	    var interpolate = d ? function(t) {
	      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
	      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
	    } : function() {
	      return [ x0 * d3_degrees, y0 * d3_degrees ];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function(object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function(λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function() {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
	      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
	    }
	    azimuthal.invert = function(x, y) {
	      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
	      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function(ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function() {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function() {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), t = function(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function() {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = G - y;
	      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function() {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function() {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
	  }
	  d3_geo_mercator.invert = function(x, y) {
	    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
	    m.scale = function() {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function() {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function(_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(), t = translate();
	          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function() {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function() {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function() {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function(ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function() {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
	  }
	  d3_geo_transverseMercator.invert = function(x, y) {
	    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
	  };
	  (d3.geo.transverseMercator = function() {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
	    projection.center = function(_) {
	      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
	    };
	    projection.rotate = function(_) {
	      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
	      [ _[0], _[1], _[2] - 90 ]);
	    };
	    return rotate([ 0, 0, 90 ]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function(vertices) {
	    var x = d3_geom_pointX, y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
	      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function(_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function(_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length, hull = [ 0, 1 ], hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function(coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function() {
	    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function(k) {
	    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [ x * k, y * k ];
	  };
	  d3_geom_polygonPrototype.clip = function(subject) {
	    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [ x1 + ua * x21, y1 + ua * y21 ];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0], b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
	      x: x,
	      y: y
	    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length, iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L; else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function() {
	    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P, rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null, node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L; else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R; else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        }; else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        }; else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          }; else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          }; else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          }; else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          }; else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a, vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
	      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next; else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node, q = node.R, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node, q = node.L, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function(points) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
	        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
	          var s = e.start();
	          return [ s.x, s.y ];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function(d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function(data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
	        return edge.l && edge.r;
	      }).map(function(edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function(data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
	        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function(_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function(_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function(vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_, dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x, ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = xm; else x2 = xm;
	        if (below) y1 = ym; else y2 = ym;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function(d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function(f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      root.find = function(point) {
	        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function(_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function(_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
	      y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
	    var minDistance2 = Infinity, closestPoint;
	    (function find(node, x1, y1, x2, y2) {
	      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
	      if (point = node.point) {
	        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
	        if (distance2 < minDistance2) {
	          var distance = Math.sqrt(minDistance2 = distance2);
	          x0 = x - distance, y0 = y - distance;
	          x3 = x + distance, y3 = y + distance;
	          closestPoint = point;
	        }
	      }
	      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
	      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
	        if (node = children[i & 3]) switch (i & 3) {
	         case 0:
	          find(node, x1, y1, xm, ym);
	          break;
	
	         case 1:
	          find(node, xm, y1, x2, ym);
	          break;
	
	         case 2:
	          find(node, x1, ym, xm, y2);
	          break;
	
	         case 3:
	          find(node, xm, ym, x2, y2);
	          break;
	        }
	      }
	    })(root, x0, y0, x3, y3);
	    return closestPoint;
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
	    return function(t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {}, c = {}, k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function(t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    a = +a, b = +b;
	    return function(t) {
	      return a * (1 - t) + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs; else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm; else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs; else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
	      return b(t) + "";
	    }) : function() {
	      return b;
	    } : (b = q.length, function(t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length, f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
	    return f;
	  }
	  d3.interpolators = [ function(a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  } ];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (;i < na; ++i) c[i] = a[i];
	    for (;i < nb; ++i) c[i] = b[i];
	    return function(t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function() {
	      return d3_ease_quad;
	    },
	    cubic: function() {
	      return d3_ease_cubic;
	    },
	    sin: function() {
	      return d3_ease_sin;
	    },
	    exp: function() {
	      return d3_ease_exp;
	    },
	    circle: function() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function(name) {
	    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function(t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function(t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function(t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t, t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function(t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
	    return function(t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function(t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
	    return function(t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function(t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function(string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function(string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [ m.e, m.f ];
	    this.scale = [ kx, ky ];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function() {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransformPop(s) {
	    return s.length ? s.pop() + "," : "";
	  }
	  function d3_interpolateTranslate(ta, tb, s, q) {
	    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
	      var i = s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    }
	  }
	  function d3_interpolateRotate(ra, rb, s, q) {
	    if (ra !== rb) {
	      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
	    }
	  }
	  function d3_interpolateSkew(wa, wb, s, q) {
	    if (wa !== wb) {
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
	    }
	  }
	  function d3_interpolateScale(ka, kb, s, q) {
	    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
	      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] !== 1 || kb[1] !== 1) {
	      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
	    }
	  }
	  function d3_interpolateTransform(a, b) {
	    var s = [], q = [];
	    a = d3.transform(a), b = d3.transform(b);
	    d3_interpolateTranslate(a.translate, b.translate, s, q);
	    d3_interpolateRotate(a.rotate, b.rotate, s, q);
	    d3_interpolateSkew(a.skew, b.skew, s, q);
	    d3_interpolateScale(a.scale, b.scale, s, q);
	    a = b = null;
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return (x - a) / b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return Math.max(0, Math.min(1, (x - a) / b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function() {
	    return function(links) {
	      var paths = [], i = -1, n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [], parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function() {
	    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
	    function relayout() {
	      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function(a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function(d, i) {
	          d.sort(function(a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: groupSums[di]
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function(a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function(x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function(x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function(x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function(x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function(x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function() {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function() {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function() {
	    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
	    function repulse(node) {
	      return function(quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function() {
	      if ((alpha *= .99) < .005) {
	        timer = null;
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function(x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function(x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function(x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function(x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function(x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function(x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function(x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function(x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function(x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function(x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) {
	          alpha = x;
	        } else {
	          timer.c = null, timer.t = NaN, timer = null;
	          event.end({
	            type: "end",
	            alpha: alpha = 0
	          });
	        }
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        timer = d3_timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function() {
	      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i], j = -1, l = candidates.length, x;
	        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function() {
	      return force.alpha(.1);
	    };
	    force.stop = function() {
	      return force.alpha(0);
	    };
	    force.drag = function() {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0, cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes, n = nodes.length, i = -1, c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function() {
	    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [ root ], nodes = [], node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function(x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function(root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function(node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function(node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [ node ];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [ node ], nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1, n, children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function(parent) {
	      return (parent.children || []).map(function(child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function() {
	    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1, n, c, d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children, d = 0;
	      if (children && (n = children.length)) {
	        var i = -1, n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function() {
	    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
	    function pie(data) {
	      var n = data.length, values = data.map(function(d, i) {
	        return +value.call(pie, d, i);
	      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
	        return values[j] - values[i];
	      } : function(i, j) {
	        return sort(data[i], data[j]);
	      });
	      index.forEach(function(i) {
	        arcs[i] = {
	          data: data[i],
	          value: v = values[i],
	          startAngle: a,
	          endAngle: a += v * k + pa,
	          padAngle: p
	        };
	      });
	      return arcs;
	    }
	    pie.value = function(_) {
	      if (!arguments.length) return value;
	      value = _;
	      return pie;
	    };
	    pie.sort = function(_) {
	      if (!arguments.length) return sort;
	      sort = _;
	      return pie;
	    };
	    pie.startAngle = function(_) {
	      if (!arguments.length) return startAngle;
	      startAngle = _;
	      return pie;
	    };
	    pie.endAngle = function(_) {
	      if (!arguments.length) return endAngle;
	      endAngle = _;
	      return pie;
	    };
	    pie.padAngle = function(_) {
	      if (!arguments.length) return padAngle;
	      padAngle = _;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function() {
	    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
	    function stack(data, index) {
	      if (!(n = data.length)) return data;
	      var series = data.map(function(d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function(d) {
	        return d.map(function(v, i) {
	          return [ x.call(stack, v, i), y.call(stack, v, i) ];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var m = series[0].length, n, i, j, o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function(x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function(x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function(x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function(z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function(data) {
	      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
	        return max[a] - max[b];
	      }), top = 0, bottom = 0, tops = [], bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function(data) {
	      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function(data) {
	      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function(data) {
	      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1, m = data[0].length, y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1, j = 0, v = array[0][1], k, n = array.length;
	    for (;i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function() {
	    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function(x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function(x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function(x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function(range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function(x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [ d3.min(values), d3.max(values) ];
	  }
	  d3.layout.pack = function() {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function(d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function(_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function(_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0, s1 = 1, s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1, n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r, dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
	        var left = root0, right = root0, bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [ root0 ]
	      }, queue = [ root1 ], node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
	        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children, n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0, change = 0, children = v.children, i = children.length, w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function(node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function(child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function(x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(node) {
	    var children = node.children;
	    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
	  }
	  function d3_layout_clusterRight(node) {
	    var children = node.children, n;
	    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
	  }
	  d3.layout.treemap = function() {
	    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1, n = children.length, child, area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), remaining = children.slice(), child, row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d), root = nodes[0];
	      root.x = root.y = 0;
	      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
	      if (stickies) hierarchy.revalue(root);
	      scale([ root ], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function(x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
	      padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function(x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function(x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function(x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function(x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function() {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function() {
	        return Math.exp(random());
	      };
	    },
	    bates: function(m) {
	      var random = d3.random.irwinHall(m);
	      return function() {
	        return random() / m;
	      };
	    },
	    irwinHall: function(m) {
	      return function() {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0], stop = domain[domain.length - 1];
	    return start < stop ? [ start, stop ] : [ stop, start ];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
	    return function(x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function(x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function() {
	    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function(y) {
	      return input(y);
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function(x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function(x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function(x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function() {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    return domain;
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
	    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function(d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function() {
	    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function(x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function(_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function() {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function() {
	      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function(n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(1, base * n / scale.ticks().length);
	      return function(d) {
	        var i = d / pow(Math.round(log(d)));
	        if (i * base < base - .5) i *= base;
	        return i <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function() {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
	    floor: function(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function() {
	    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function(x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function(x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function() {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function(x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function() {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function() {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [ [] ]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function(i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1, n = x.length, xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
	      0) : (stop - start) / (domain.length - 1 + padding);
	      range = steps(start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundPoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
	      0) : (stop - start) / (domain.length - 1 + padding) | 0;
	      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangeRoundPoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
	      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function() {
	      return rangeBand;
	    };
	    scale.rangeExtent = function() {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function() {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function() {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function() {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function() {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function() {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
	  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
	  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
	  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
	  d3.scale.quantile = function() {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0, q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function() {
	      return thresholds;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function() {
	    return d3_scale_quantize(0, 1, [ 0, 1 ]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return [ x0, x1 ];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [ y, y + 1 / kx ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function() {
	    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function(_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function(_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return [ domain[y - 1], domain[y] ];
	    };
	    scale.copy = function() {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function() {
	    return d3_scale_identity([ 0, 1 ]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function() {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  function d3_zero() {
	    return 0;
	  }
	  d3.svg.arc = function() {
	    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
	    function arc() {
	      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
	      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
	      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
	      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
	      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
	        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
	        if (!cw) p1 *= -1;
	        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
	        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
	      }
	      if (r1) {
	        x0 = r1 * Math.cos(a0 + p1);
	        y0 = r1 * Math.sin(a0 + p1);
	        x1 = r1 * Math.cos(a1 - p1);
	        y1 = r1 * Math.sin(a1 - p1);
	        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
	        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
	          var h1 = (a0 + a1) / 2;
	          x0 = r1 * Math.cos(h1);
	          y0 = r1 * Math.sin(h1);
	          x1 = y1 = null;
	        }
	      } else {
	        x0 = y0 = 0;
	      }
	      if (r0) {
	        x2 = r0 * Math.cos(a1 - p0);
	        y2 = r0 * Math.sin(a1 - p0);
	        x3 = r0 * Math.cos(a0 + p0);
	        y3 = r0 * Math.sin(a0 + p0);
	        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
	        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
	          var h0 = (a0 + a1) / 2;
	          x2 = r0 * Math.cos(h0);
	          y2 = r0 * Math.sin(h0);
	          x3 = y3 = null;
	        }
	      } else {
	        x2 = y2 = 0;
	      }
	      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
	        cr = r0 < r1 ^ cw ? 0 : 1;
	        var rc1 = rc, rc0 = rc;
	        if (da < π) {
	          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
	          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
	        }
	        if (x1 != null) {
	          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
	          if (rc === rc1) {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
	          } else {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
	          }
	        } else {
	          path.push("M", x0, ",", y0);
	        }
	        if (x3 != null) {
	          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
	          if (rc === rc0) {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          } else {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          }
	        } else {
	          path.push("L", x2, ",", y2);
	        }
	      } else {
	        path.push("M", x0, ",", y0);
	        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
	        path.push("L", x2, ",", y2);
	        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
	      }
	      path.push("Z");
	      return path.join("");
	    }
	    function circleSegment(r1, cw) {
	      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
	    }
	    arc.innerRadius = function(v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function(v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.cornerRadius = function(v) {
	      if (!arguments.length) return cornerRadius;
	      cornerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.padRadius = function(v) {
	      if (!arguments.length) return padRadius;
	      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.padAngle = function(v) {
	      if (!arguments.length) return padAngle;
	      padAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function() {
	      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
	      return [ Math.cos(a) * r, Math.sin(a) * r ];
	    };
	    return arc;
	  };
	  var d3_svg_arcAuto = "auto";
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_arcPadAngle(d) {
	    return d && d.padAngle;
	  }
	  function d3_svg_arcSweep(x0, y0, x1, y1) {
	    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
	  }
	  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
	    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
	    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
	    function line(data) {
	      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function(_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function(_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function() {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function(key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.length > 1 ? points.join("L") : points + "Z";
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return points.join("L") + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
	    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([ s || 0, m[i] * s || 0 ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function() {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point, i = -1, n = points.length, r, a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] - halfπ;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
	    function area(data) {
	      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
	        return x;
	      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
	        return y;
	      } : d3_functor(y1), x, y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
	          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function(_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function(_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function(_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function(_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function(_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function(_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function() {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function() {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function() {
	    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
	        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function(v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function(v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function(v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function() {
	    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3 ];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function(x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function(x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function(x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [ d.x, d.y ];
	  }
	  d3.svg.diagonal.radial = function() {
	    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
	    diagonal.projection = function(x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function() {
	      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
	      return [ r * Math.cos(a), r * Math.sin(a) ];
	    };
	  }
	  d3.svg.symbol = function() {
	    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function(x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function(x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  d3_selectionPrototype.transition = function(name) {
	    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_selectionPrototype.interrupt = function(name) {
	    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
	  };
	  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
	  function d3_selection_interruptNS(ns) {
	    return function() {
	      var lock, activeId, active;
	      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        if (--lock.count) delete lock[activeId]; else delete this[ns];
	        lock.active += .5;
	        active.event && active.event.interrupt.call(this, this.__data__, active.index);
	      }
	    };
	  }
	  function d3_transition(groups, ns, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.namespace = ns;
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function(selection, name) {
	    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.selectAll = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          transition = node[ns][id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o; ) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.namespace, this.id);
	  };
	  d3_transitionPrototype.tween = function(name, tween) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function(node) {
	      node[ns][id].tween.remove(name);
	    } : function(node) {
	      node[ns][id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id, ns = groups.namespace;
	    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function(node) {
	      node[ns][id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function(nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function() {
	        var a = this.getAttribute(name), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function() {
	        var a = this.getAttributeNS(name.space, name.local), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function(nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function(t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function(t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function() {
	        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
	        return a !== b && (i = d3_interpolate(a, b), function(t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function(name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
	      return f && function(t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function(value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function() {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function() {
	    var ns = this.namespace;
	    return this.each("end.transition", function() {
	      var p;
	      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function(node) {
	      node[ns][id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function(node) {
	      node[ns][id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function(node) {
	      node[ns][id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function(type, listener) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
	      try {
	        d3_transitionInheritId = id;
	        d3_selection_each(this, function(node, i, j) {
	          d3_transitionInherit = node[ns][id];
	          type.call(node, node.__data__, i, j);
	        });
	      } finally {
	        d3_transitionInherit = inherit;
	        d3_transitionInheritId = inheritId;
	      }
	    } else {
	      d3_selection_each(this, function(node) {
	        var transition = node[ns][id];
	        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function() {
	    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = node[ns][id0];
	          d3_transitionNode(node, i, ns, id1, {
	            time: transition.time,
	            ease: transition.ease,
	            delay: transition.delay + transition.duration,
	            duration: transition.duration
	          });
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id1);
	  };
	  function d3_transitionNamespace(name) {
	    return name == null ? "__transition__" : "__transition_" + name + "__";
	  }
	  function d3_transitionNode(node, i, ns, id, inherit) {
	    var lock = node[ns] || (node[ns] = {
	      active: 0,
	      count: 0
	    }), transition = lock[id], time, timer, duration, ease, tweens;
	    function schedule(elapsed) {
	      var delay = transition.delay;
	      timer.t = delay + time;
	      if (delay <= elapsed) return start(elapsed - delay);
	      timer.c = start;
	    }
	    function start(elapsed) {
	      var activeId = lock.active, active = lock[activeId];
	      if (active) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        --lock.count;
	        delete lock[activeId];
	        active.event && active.event.interrupt.call(node, node.__data__, active.index);
	      }
	      for (var cancelId in lock) {
	        if (+cancelId < id) {
	          var cancel = lock[cancelId];
	          cancel.timer.c = null;
	          cancel.timer.t = NaN;
	          --lock.count;
	          delete lock[cancelId];
	        }
	      }
	      timer.c = tick;
	      d3_timer(function() {
	        if (timer.c && tick(elapsed || 1)) {
	          timer.c = null;
	          timer.t = NaN;
	        }
	        return 1;
	      }, 0, time);
	      lock.active = id;
	      transition.event && transition.event.start.call(node, node.__data__, i);
	      tweens = [];
	      transition.tween.forEach(function(key, value) {
	        if (value = value.call(node, node.__data__, i)) {
	          tweens.push(value);
	        }
	      });
	      ease = transition.ease;
	      duration = transition.duration;
	    }
	    function tick(elapsed) {
	      var t = elapsed / duration, e = ease(t), n = tweens.length;
	      while (n > 0) {
	        tweens[--n].call(node, e);
	      }
	      if (t >= 1) {
	        transition.event && transition.event.end.call(node, node.__data__, i);
	        if (--lock.count) delete lock[id]; else delete node[ns];
	        return 1;
	      }
	    }
	    if (!transition) {
	      time = inherit.time;
	      timer = d3_timer(schedule, 0, time);
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        timer: timer,
	        delay: inherit.delay,
	        duration: inherit.duration,
	        ease: inherit.ease,
	        index: i
	      };
	      inherit = null;
	      ++lock.count;
	    }
	  }
	  d3.svg.axis = function() {
	    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
	    function axis(g) {
	      g.each(function() {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
	        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
	        d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
	        if (orient === "bottom" || orient === "top") {
	          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
	          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
	          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
	        } else {
	          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
	          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
	          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
	        }
	        lineEnter.attr(y2, sign * innerTickSize);
	        textEnter.attr(y1, sign * tickSpacing);
	        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
	        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
	        if (scale1.rangeBand) {
	          var x = scale1, dx = x.rangeBand() / 2;
	          scale0 = scale1 = function(d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1, scale0);
	        }
	        tickEnter.call(tickTransform, scale0, scale1);
	        tickUpdate.call(tickTransform, scale1, scale1);
	      });
	    }
	    axis.scale = function(x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function(x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function() {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = d3_array(arguments);
	      return axis;
	    };
	    axis.tickValues = function(x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function(x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function(x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function(x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function(x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function(x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function() {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x0, x1) {
	    selection.attr("transform", function(d) {
	      var v0 = x0(d);
	      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y0, y1) {
	    selection.attr("transform", function(d) {
	      var v0 = y0(d);
	      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
	    });
	  }
	  d3.svg.brush = function() {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function() {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([ 0 ]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function(d) {
	          return "resize " + d;
	        }).style("cursor", function(d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function(d) {
	          return /[ew]$/.test(d) ? -3 : null;
	        }).attr("y", function(d) {
	          return /^[ns]/.test(d) ? -3 : null;
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function(g) {
	      g.each(function() {
	        var event_ = event.of(this, arguments), extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        }, extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function() {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function() {
	            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function(t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function() {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function(d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
	      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
	        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target), moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null; else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function(z) {
	      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function(z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [ x0, x1 ];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [ y0, y1 ];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
	      }
	      return brush;
	    };
	    brush.clear = function() {
	      if (!brush.empty()) {
	        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function() {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function(string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function(date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function(date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function(date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function(date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function(date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function(date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function(x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
	        return d / 31536e6;
	      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function(interval, skip) {
	      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function(interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
	        range: interval
	      }, skip ];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function() {
	      return format;
	    };
	    scale.copy = function() {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
	  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
	    return d.getMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getHours();
	  } ], [ "%a %d", function(d) {
	    return d.getDay() && d.getDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getMonth();
	  } ], [ "%Y", d3_true ] ]);
	  var d3_time_scaleMilliseconds = {
	    range: function(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
	    return [ m[0].utc, m[1] ];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
	    return d.getUTCMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getUTCSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getUTCMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getUTCHours();
	  } ], [ "%a %d", function(d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getUTCDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getUTCMonth();
	  } ], [ "%Y", d3_true ] ]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function(request) {
	    return request.responseText;
	  });
	  d3.json = function(url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function(url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function(request) {
	    return request.responseXML;
	  });
	  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
	}();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.
	
	(function() {
	
	  // Baseline setup
	  // --------------
	
	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;
	
	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;
	
	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;
	
	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};
	
	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };
	
	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }
	
	  // Current version.
	  _.VERSION = '1.8.3';
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };
	
	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };
	
	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };
	
	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };
	
	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };
	
	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };
	
	  // Collection Functions
	  // --------------------
	
	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };
	
	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };
	
	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }
	
	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);
	
	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);
	
	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };
	
	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };
	
	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };
	
	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };
	
	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };
	
	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };
	
	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };
	
	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };
	
	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };
	
	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };
	
	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };
	
	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };
	
	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };
	
	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };
	
	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };
	
	  // Array Functions
	  // ---------------
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };
	
	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };
	
	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };
	
	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };
	
	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };
	
	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };
	
	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);
	
	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };
	
	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }
	
	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };
	
	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  };
	
	  // Function (ahem) Functions
	  // ------------------
	
	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };
	
	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };
	
	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;
	
	    var later = function() {
	      var last = _.now() - timestamp;
	
	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };
	
	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }
	
	      return result;
	    };
	  };
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };
	
	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };
	
	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };
	
	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);
	
	  // Object Functions
	  // ----------------
	
	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	
	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;
	
	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
	
	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }
	
	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };
	
	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };
	
	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };
	
	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };
	
	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };
	
	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);
	
	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);
	
	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };
	
	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };
	
	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };
	
	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);
	
	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };
	
	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };
	
	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };
	
	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };
	
	
	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }
	
	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;
	
	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };
	
	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };
	
	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };
	
	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };
	
	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });
	
	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }
	
	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };
	
	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };
	
	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };
	
	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };
	
	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };
	
	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };
	
	  // Utility Functions
	  // -----------------
	
	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };
	
	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };
	
	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };
	
	  _.noop = function(){};
	
	  _.property = property;
	
	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };
	
	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };
	
	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };
	
	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);
	
	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);
	
	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };
	
	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";
	
	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  };
	
	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };
	
	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.
	
	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };
	
	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };
	
	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);
	
	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });
	
	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });
	
	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
	
	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };
	
	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	
	// the following is a regex to match all valid time formats that can be
	// generated with d3 as of 2nd March 2015. If new formats are added to d3
	// those new formats need to be added to the regex
	var time_format_regex = new RegExp("^(((((\\*)|(/*)|(-*))(\\s*)%([aAbBdeHIjmMLpSUwWyYZ]{1}))+)|((\\s*)%([cxX]{1})))$");
	
	module.exports = {
	    getCustomRange: function(array) {
	        var first = array[0];
	        var end = array[array.length - 1];
	        var pivot;
	        if(array[0] > array[1]) {
	            pivot = d3.min(array);
	        } else {
	            pivot = d3.max(array);
	        }
	        return [d3.scale.linear().range([first, pivot]), d3.scale.linear().range([pivot, end])];
	    },
	
	    deepCopy: function (obj) {
	        // This makes a deep copy of JSON-parsable objects
	        // (no cycling or recombining)
	        // Backbone model attributes must be JSON parsable. Hence there is
	        // no need for a fancier logic, and it is surprisingly efficient.
	        return JSON.parse(JSON.stringify(obj));
	    },
	
	    is_valid_time_format: function(format) {
	        return time_format_regex.test(format);
	    }
	};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var GridHeatMapModel = markmodel.MarkModel.extend({
	
	    defaults: function() {
	        return _.extend(markmodel.MarkModel.prototype.defaults(), {
	            _model_name: "GridHeatMapModel",
	            _view_name: "GridHeatMap",
	            row: [],
	            column: [],
	            color: null,
	            scales_metadata: {
	                row: { orientation: "vertical", dimension: "y" },
	                column: { orientation: "horizontal", dimension: "x" },
	                color: { dimension: "color" }
	            },
	            null_color: "black",
	            row_align: "start",
	            column_align: "start",
	            stroke: "black",
	            opacity: 1.0,
	            anchor_style: {
	                fill: "white",
	                stroke: "blue"
	            }
	        });
	    },
	
	    initialize: function() {
	        GridHeatMapModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["row", "column", "color"], this.update_data, this);
	        // FIXME: replace this with on("change:preserve_domain"). It is not done here because
	        // on_some_change depends on the GLOBAL backbone on("change") handler which
	        // is called AFTER the specific handlers on("change:foobar") and we make that
	        // assumption.
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.update_data();
	        this.update_domains();
	    },
	
	    update_data: function() {
	        this.dirty = true;
	        // Handling data updates
	        var that = this;
	        this.colors = this.get_typed_field("color");
	        this.rows = this.get_typed_field("row");
	        this.columns = this.get_typed_field("column");
	
	        var num_rows = this.colors.length;
	        var num_cols = this.colors[0].length;
	        var flat_colors = [];
	        flat_colors = flat_colors.concat.apply(flat_colors, this.colors);
	
	        this.mark_data = flat_colors.map(function(data, index) {
	            var row_num = Math.floor(index / num_cols);
	            var col_num = index % num_cols;
	
	            return {
	                row_num : row_num,
	                row : that.rows[row_num],
	                column : that.columns[col_num],
	                column_num : col_num,
	                color : data,
	                _cell_num : index,
	            };
	        });
	        this.identify_modes();
	        this.update_domains();
	        this.dirty = false;
	        this.trigger("data_updated");
	    },
	
	    update_domains: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        var scales = this.get("scales");
	        var y_scale = scales.row, x_scale = scales.column;
	        var color_scale = scales.color;
	
	        if(!this.get("preserve_domain").row) {
	            y_scale.compute_and_set_domain(this.rows, this.model_id + "_row");
	        } else {
	            y_scale.del_domain([], this.model_id + "_row");
	        }
	
	        if(!this.get("preserve_domain").column) {
	            x_scale.compute_and_set_domain(this.columns, this.model_id + "_column");
	        } else {
	            x_scale.del_domain([], this.model_id + "_column");
	        }
	        if(color_scale !== null && color_scale !== undefined) {
	            if(!this.get("preserve_domain").color) {
	                color_scale.compute_and_set_domain(this.mark_data.map(function(elem) {
	                    return elem.color;
	                }), this.model_id + "_color");
	            } else {
	                color_scale.del_domain([], this.model_id + "_color");
	            }
	        }
	    },
	
	    get_data_dict: function(data, index) {
	        return data;
	    },
	
	    identify_modes: function() {
	        //based on the data, identify the mode in which the heatmap should
	        //be plotted.
	        var modes = {};
	        var scales = this.get("scales");
	        var row_scale = scales.row;
	        var column_scale = scales.column;
	        var data_nrow = this.colors.length;
	        var data_ncol = this.colors[0].length;
	
	        if(row_scale.type === "ordinal") {
	            modes.row = "middle";
	        } else {
	            if(data_nrow === this.rows.length - 1) {
	                modes.row = "boundaries";
	            } else if(data_nrow === this.rows.length) {
	                modes.row = "expand_one";
	            } else if(data_nrow === this.rows.length + 1) {
	                modes.row = "expand_two";
	            }
	        }
	        if(column_scale.type === "ordinal") {
	            modes.column = "middle";
	        } else {
	            if(data_ncol === this.columns.length - 1) {
	                modes.column = "boundaries";
	            } else if(data_ncol === this.columns.length) {
	                modes.column = "expand_one";
	            } else if(data_ncol === this.columns.length + 1) {
	                modes.column = "expand_two";
	            }
	        }
	        this.modes = modes;
	    }
	});
	
	module.exports = {
	    GridHeatMapModel: GridHeatMapModel
	};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var basemodel = __webpack_require__(13);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var MarkModel = basemodel.BaseModel.extend({
	
	    defaults: function() {
	        return _.extend(basemodel.BaseModel.prototype.defaults(), {
	            _model_name: "MarkModel",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	
	            scales: {},
	            scales_metadata: {},
	            preserve_domain: {},
	            display_legend: true,
	            labels: [],
	            apply_clip: true,
	            visible: true,
	            selected_style: {},
	            unselected_style: {},
	            selected: null,
	            enable_hover: true,
	            tooltip: null,
	            tooltip_style: { opacity: 0.9 },
	            interactions: { hover: "tooltip" },
	            tooltip_location: "mouse"
	        });
	    },
	
	    // These two attributes are the pixel values which should be appended
	    // to the area of the plot to make sure that the entire mark is visible
	    initialize: function() {
	        MarkModel.__super__.initialize.apply(this, arguments);
	        this.on("change:scales", this.update_scales, this);
	        this.once("destroy", this.handle_destroy, this);
	        // `this.dirty` is set to `true` before starting computations that
	        // might lead the state of the model to be temporarily inconsistent.
	        // certain functions of views on that model might check the value
	        // of `this.dirty` before rendering
	        this.dirty = false;
	        this.display_el_classes = ["mark"]; //classes on the element which
	        //trigger the tooltip to be displayed when they are hovered over
	        this.update_scales();
	    },
	
	    update_data : function() {
	        // Update_data is typically overloaded in each mark
	        // it triggers the "data_updated" event
	        this.update_domains();
	        this.trigger("data_updated");
	    },
	
	    update_domains: function() {
	        // update_domains is typically overloaded in each mark to update
	        // the domains related to its scales
	    },
	
	    update_scales: function() {
	        this.unregister_all_scales(this.previous("scales"));
	        this.trigger("scales_updated");
	        this.update_domains();
	    },
	
	    unregister_all_scales: function(scales) {
	        // disassociates the mark with the scale
	        this.dirty = true;
	        for (var key in scales) {
	            scales[key].del_domain([], this.model_id + "_" + key);
	        }
	        this.dirty = false;
	        //TODO: Check if the views are being removed
	    },
	
	    handle_destroy: function() {
	        this.unregister_all_scales(this.get("scales"));
	    },
	
	    get_key_for_dimension: function(dimension) {
	        var scales_metadata = this.get("scales_metadata");
	        for (var scale in scales_metadata) {
	            if(scales_metadata[scale].dimension === dimension) {
	                return scale;
	            }
	        }
	        return null;
	    },
	
	    get_key_for_orientation: function(orientation) {
	        var scales_metadata = this.get("scales_metadata");
	        for (var scale in scales_metadata) {
	            if(scales_metadata[scale].orientation === orientation) {
	                return scale;
	            }
	        }
	        return null;
	    }
	
	}, {
	    serializers: _.extend({
	        scales: { deserialize: widgets.unpack_models },
	        tooltip: { deserialize: widgets.unpack_models }
	    }, basemodel.BaseModel.serializers)
	});
	
	module.exports = {
	    MarkModel: MarkModel
	};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var BaseModel = widgets.WidgetModel.extend({
	
	    defaults: function() {
	        return _.extend(widgets.WidgetModel.prototype.defaults(), {
	            _model_name: "BaseModel",
	            _model_module: "bqplot",
	            _model_module_version: semver_range
	        });
	    },
	
	    get_typed_field: function(param) {
	        // Function that reads in an array of a field that is typed. It
	        // performs tpe conversions that you may require and returns you
	        // the appropriate array.
	        var value = this.get(param);
	        var return_value = [];
	        var that = this;
	        if(value.hasOwnProperty("type") &&
	           value.hasOwnProperty("values") &&
	           value.values !== null) {
	            if(value.type === "date") {
	                return_value = this.get(param).values;
	                if(return_value[0] instanceof Array) {
	                   return_value = return_value.map(function(val) {
	                       return val.map(function(elem) {
	                           return that.convert_to_date(elem);
	                       });
	                   });
	                } else {
	                    return_value = return_value.map(function(val) {
	                        return that.convert_to_date(val);
	                    });
	                }
	            } else {
	                return_value = this.get(param).values;
	            }
	        }
	        return return_value;
	    },
	
	    set_typed_field: function(param, value, options) {
	        // function takes a value which has to be set for a typed field and
	        // performs the conversion needed before sending it across to
	        // Python. This **only** sets the attribute. The caller is
	        // responsible for calling save_changes
	        var saved_value = value;
	        var return_object = {};
	        var that = this;
	        var current_type = this.get(param).type;
	
	        if (saved_value[0] instanceof Array && saved_value[0][0] instanceof Date ||
	            saved_value[0] instanceof Date) {
	            current_type = "date";
	        }
	
	        if(saved_value[0] instanceof Array) {
	            if(current_type === "date")
	                saved_value = saved_value.map(function(val) {
	                    return val.map(function(elem) {
	                        return that.convert_to_json(elem);
	                    });
	                });
	        } else {
	            if(current_type === "date")
	                saved_value = saved_value.map(function(elem) {
	                    return that.convert_to_json(elem);
	                });
	        }
	        // TODO: this is not good. Need to think of something better
	        return_object.type = current_type;
	        return_object.values = saved_value;
	        this.set(param, return_object, options);
	    },
	
	    get_date_elem: function(param) {
	        return this.convert_to_date(this.get(param));
	    },
	
	    set_date_elem: function(param, value) {
	        this.set(param, this.convert_to_json(value));
	    },
	
	    convert_to_date: function(elem) {
	        // Function to convert the string to a date element
	        if(elem === undefined || elem === null) {
	            return null;
	        }
	        return new Date(elem);
	    },
	
	    convert_to_json: function(elem) {
	        // converts the date to a json compliant format
	        if(elem === undefined || elem === null) {
	            return null;
	        } else {
	            if (elem.toJSON === undefined) {
	                return elem;
	            } else {
	                // the format of the string to be sent across is
	                // '%Y-%m-%dT%H:%M:%S.%f'
	                // by default, toJSON returns '%Y-%m-%dT%H:%M:%S.%uZ'
	                // %u is milliseconds. Hence adding 000 to convert it into
	                // microseconds.
	                return elem.toJSON().slice(0, -1) + '000';
	            }
	        }
	    }
	});
	
	module.exports = {
	    BaseModel: BaseModel
	};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	module.exports = {"name":"bqplot","version":"0.4.0","description":"bqplot","author":{"name":"BQPlot Development team","email":"bqplot@bloomberg.net"},"license":"Apache-2.0","main":"src/index.js","repository":{"type":"git","url":"https://github.com/bloomberg/bqplot.git"},"scripts":{"build":"webpack && lessc src/bqplot.less css/bqplot.css","prepublish":"npm run build","test":"echo \"Error: no test specified\" && exit 1"},"devDependencies":{"css-loader":"^0.23.1","file-loader":"^0.8.5","imports-loader":"^0.6.5","json-loader":"^0.5.4","less":"^2.6.1","less-loader":"^2.2.3","rimraf":"^2.4.1","style-loader":"^0.13.1","webpack":"^1.12.14"},"dependencies":{"@jupyter-widgets/base":"^1.0.0","d3":"^3.5.16","popper.js":"^1.0.0","topojson":"^1.6.24","underscore":"^1.8.3"},"files":["dist/","css/","src/"],"jupyterlab":{"extension":"src/jupyterlab-plugin"}}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	
	var Mark = widgets.WidgetView.extend({
	
	    initialize : function() {
	        this.setElement(document.createElementNS(d3.ns.prefix.svg, "g"));
	        this.d3el = d3.select(this.el);
	        Mark.__super__.initialize.apply(this, arguments);
	    },
	
	    render: function() {
	        this.x_padding = 0;
	        this.y_padding = 0;
	        this.parent = this.options.parent;
	        this.uuid = widgets.uuid();
	        var scale_creation_promise = this.set_scale_views();
	        var that = this;
	        this.listenTo(this.model, "scales_updated", function() {
	            this.set_scale_views().then(_.bind(this.draw, this));
	        }, this);
	
	        this.colors = this.model.get("colors");
	
	        if(this.options.clip_id && this.model.get("apply_clip")) {
	            this.d3el.attr("clip-path", "url(#" + this.options.clip_id + ")");
	        }
	        this.tooltip_div = d3.select(document.createElement("div"))
	            .attr("class", "mark_tooltip")
	            .attr("id", "tooltip_" + this.uuid)
	            .style("display", "none")
	            .style("opacity", 0);
	
	        this.bisect = d3.bisector(function(d) { return d; }).left;
	        this.d3el.style("display", (this.model.get("visible") ? "inline" : "none"));
	        this.display_el_classes = [];
	        this.event_metadata = {
	            "mouse_over": {
	                "msg_name": "hover",
	                "lookup_data": true,
	                "hit_test": true,
	            },
	            "legend_clicked":  {
	                "msg_name": "legend_click",
	                "hit_test": true,
	            },
	            "element_clicked": {
	                "msg_name": "element_click",
	                "lookup_data": true,
	                "hit_test": true,
	            },
	            "parent_clicked":  {
	                "msg_name": "background_click",
	                "hit_test": false,
	            },
	            "legend_mouse_over": {
	                "msg_name": "legend_hover",
	                "hit_test": true
	            },
	        };
	
	        return scale_creation_promise;
	    },
	
	    set_scale_views: function() {
	        // first, if this.scales was already defined, unregister from the
	        // old ones.
	        for (var key in this.scales) {
	            this.stopListening(this.scales[key]);
	        }
	
	        var scale_models = this.model.get("scales");
	        var that = this;
	        var scale_promises = {};
	        _.each(scale_models, function(model, key) {
	            scale_promises[key] = that.create_child_view(model);
	        });
	        return widgets.resolvePromisesDict(scale_promises).then(function(scales) {
	            that.scales = scales;
	            that.set_positional_scales();
	            that.initialize_additional_scales();
	            that.set_ranges();
	            that.trigger("mark_scales_updated");
	        });
	    },
	
	    set_positional_scales: function() {
	        // Positional scales are special in that they trigger a full redraw
	        // when their domain is changed.
	        // This should be overloaded in specific mark implementation.
	    },
	
	    initialize_additional_scales: function() {
	        // This function is for the extra scales that are required for
	        // rendering mark. The scale listeners are set up in this function.
	        // This should be overloaded in the specific mark implementation.
	    },
	
	    set_internal_scales: function() {
	        // Some marks such as Bars need to create additional scales
	        // to draw themselves. In this case, the set_internal_scales
	        // is overloaded.
	    },
	
	    create_listeners: function() {
	        this.listenTo(this.model, "change:visible", this.update_visibility, this);
	        this.listenTo(this.model, "change:selected_style", this.selected_style_updated, this);
	        this.listenTo(this.model, "change:unselected_style", this.unselected_style_updated, this);
	
	        this.parent.on("margin_updated", this.relayout, this);
	        this.model.on_some_change(["labels", "display_legend"], function() {
	            this.model.trigger("redraw_legend");
	        }, this);
	    },
	
	    remove: function() {
	        this.model.off(null, null, this);
	        this.d3el.transition("remove").duration(0).remove();
	        this.tooltip_div.remove();
	        Mark.__super__.remove.apply(this);
	    },
	
	    draw_legend: function(elem, x_disp, y_disp, inter_x_disp, inter_y_disp) {
	        elem.selectAll(".legend" + this.uuid).remove();
	        elem.append("g")
	          .attr("transform", "translate(" + x_disp + ", " + y_disp + ")")
	          .attr("class", "legend" + this.uuid)
	          .on("mouseover", _.bind(this.highlight_axes, this))
	          .on("mouseout", _.bind(this.unhighlight_axes, this))
	        .append("text")
	          .text(this.model.get("labels")[0]);
	        return [1, 1];
	    },
	
	    highlight_axes: function() {
	        _.each(this.model.get("scales"), function(model) {
	            model.trigger("highlight_axis");
	        });
	    },
	
	    unhighlight_axes: function() {
	        _.each(this.model.get("scales"), function(model) {
	            model.trigger("unhighlight_axis");
	        });
	    },
	
	    relayout: function() {
	        // Called when the figure margins are updated. To be overloaded in
	        // specific mark implementation.
	    },
	
	    invert_range: function(start_pxl, end_pxl) {
	        return [start_pxl, end_pxl];
	    },
	
	    invert_point: function(pxl) {
	        return [pxl];
	    },
	
	    // TODO: is the following function really required?
	    invert_multi_range: function(array_pixels) {
	        return array_pixels;
	    },
	
	    update_visibility: function(model, visible) {
	        this.d3el.style("display", visible ? "inline" : "none");
	    },
	
	    get_colors: function(index) {
	        // cycles over the list of colors when too many items
	        this.colors = this.model.get("colors");
	        var len = this.colors.length;
	        return this.colors[index % len];
	    },
	
	    // Style related functions
	    selected_style_updated: function(model, style) {
	        this.selected_style = style;
	        this.clear_style(model.previous("selected_style"), this.selected_indices);
	        this.style_updated(style, this.selected_indices);
	    },
	
	    unselected_style_updated: function(model, style) {
	        this.unselected_style = style;
	        var sel_indices = this.selected_indices;
	        var unselected_indices = (sel_indices) ?
	            _.range(this.model.mark_data.length).filter(function(index){
	                return sel_indices.indexOf(index) === -1;
	            }) : [];
	        this.clear_style(model.previous("unselected_style"), unselected_indices);
	        this.style_updated(style, unselected_indices);
	    },
	
	    style_updated: function(new_style, indices) {
	        // reset the style of the elements and apply the new style
	        this.set_default_style(indices);
	        this.set_style_on_elements(new_style, indices);
	    },
	
	    apply_styles: function(style_arr) {
	        if(style_arr === undefined || style_arr == null) {
	            style_arr = [this.selected_style, this.unselected_style];
	        }
	        var all_indices = _.range(this.model.mark_data.length);
	        for(var i = 0; i < style_arr.length; i++) {
	            this.clear_style(style_arr[i]);
	        }
	
	        this.set_default_style(all_indices);
	
	        this.set_style_on_elements(this.selected_style, this.selected_indices);
	        var unselected_indices = (!this.selected_indices) ?
	            [] : _.difference(all_indices, this.selected_indices);
	        this.set_style_on_elements(this.unselected_style, unselected_indices);
	    },
	
	    // Abstract functions which have to be overridden by the specific mark
	    clear_style: function(style_dict, indices) {
	    },
	
	    set_default_style:function(indices) {
	    },
	
	    set_style_on_elements: function(style, indices) {
	    },
	
	    compute_view_padding: function() {
	        //This function sets the x and y view paddings for the mark using
	        //the variables x_padding and y_padding
	    },
	
	    show_tooltip: function(mouse_events) {
	        //this function displays the tooltip at the location of the mouse
	        //event is the d3 event for the data.
	        //mouse_events is a boolean to enable mouse_events or not.
	        //If this property has never been set, it will default to false.
	        if(this.tooltip_view) {
	            var mouse_pos = d3.mouse(this.parent.el);
	            if(mouse_events === undefined || mouse_events === null || (!(mouse_events))) {
	                this.tooltip_div.style("pointer-events", "none");
	            } else {
	                this.tooltip_div.style("pointer-events", "all");
	            }
	            var transition = this.tooltip_div.style(this.model.get("tooltip_style"))
	                .style("display", null);
	            this.parent.popper.enableEventListeners();
	            this.move_tooltip();
	        }
	    },
	
	    move_tooltip: function(mouse_events) {
	        if(this.tooltip_view) {
	            this.parent.popper_reference.x = d3.event.clientX;
	            this.parent.popper_reference.y = d3.event.clientY;
	            this.parent.popper.scheduleUpdate();
	        }
	    },
	
	    hide_tooltip: function() {
	        //this function hides the tooltip. But the location of the tooltip
	        //is the last location set by a call to show_tooltip.
	        this.parent.popper.disableEventListeners();
	        this.tooltip_div.style("pointer-events", "none");
	        this.tooltip_div.style("opacity", 0)
	            .style("display", "none");
	    },
	
	    refresh_tooltip: function(tooltip_interactions) {
	        //the argument controls pointer interactions with the tooltip. a
	        //true value enables pointer interactions while a false value
	        //disables them
	        var el = d3.select(d3.event.target);
	        if(this.is_hover_element(el)) {
	            var data = el.data()[0];
	            var clicked_data = this.model.get_data_dict(data, data.index);
	            this.trigger("update_tooltip", clicked_data);
	            this.show_tooltip(tooltip_interactions);
	        }
	    },
	
	    create_tooltip: function() {
	        //create tooltip widget. To be called after mark has been displayed
	        //and whenever the tooltip object changes
	        var tooltip_model = this.model.get("tooltip");
	        var that = this;
	        if(tooltip_model) {
	            var tooltip_creation_promise = this.create_child_view(tooltip_model);
	            tooltip_creation_promise.then(function(view) {
	                if(that.tooltip_view) {
	                    that.tooltip_view.remove();
	                }
	                //remove previous tooltip
	                that.tooltip_view = view;
	                that.tooltip_div.node().appendChild(view.el);
	                view.trigger("displayed", {"add_to_dom_only": true});
	            });
	        } else {
	            if(that.tooltip_view) {
	                that.tooltip_view.remove();
	            }
	        }
	    },
	
	    event_dispatcher: function(event_name, data) {
	        //sends a custom mssg to the python side if required
	        this.custom_msg_sender(event_name);
	        if(this.event_listeners[event_name] !== undefined) {
	            _.bind(this.event_listeners[event_name], this, data)();
	        }
	    },
	
	    custom_msg_sender: function(event_name) {
	        var event_data = this.event_metadata[event_name];
	        if(event_data !== undefined) {
	            var data = null;
	            if(event_data.hit_test) {
	                //do a hit test to check valid element
	                var el = d3.select(d3.event.target);
	                if(this.is_hover_element(el)) {
	                    data = el.data()[0];
	                    if(event_data.lookup_data) {
	                        data = this.model.get_data_dict(data, data.index);
	                    }
	                } else {
	                    //do not send mssg if hit test fails
	                    return;
	                }
	            }
	            this.send({event: event_data.msg_name, data: data});
	        }
	    },
	
	    reset_interactions: function() {
	        this.reset_click();
	        this.reset_hover();
	        this.reset_legend_hover();
	        this.event_listeners.legend_clicked = function() {};
	    },
	
	    reset_click: function() {
	        this.event_listeners.element_clicked = function() {};
	        this.event_listeners.parent_clicked = function() {};
	    },
	
	    reset_hover: function() {
	        this.event_listeners.mouse_over = function() {};
	        this.event_listeners.mouse_move = function() {};
	        this.event_listeners.mouse_out = function() {};
	    },
	
	    reset_legend_hover: function() {
	        this.event_listeners.legend_mouse_over = function() {};
	        this.event_listeners.legend_mouse_out = function() {};
	    },
	
	    mouse_over: function() {
	        if(this.model.get("enable_hover")) {
	            var el = d3.select(d3.event.target);
	            if(this.is_hover_element(el)) {
	                var data = el.data()[0];
	                //make tooltip visible
	                var hovered_data = this.model.get_data_dict(data, data.index);
	                this.trigger("update_tooltip", hovered_data);
	                this.show_tooltip();
	                this.send({
	                    event: "hover",
	                    point: hovered_data,
	                });
	            }
	        }
	    },
	
	    mouse_out: function() {
	        if(this.model.get("enable_hover")) {
	            var el = d3.select(d3.event.target);
	            if(this.is_hover_element(el)) {
	                var data = el.data()[0];
	                var hovered_data = this.model.get_data_dict(data, data.index);
	                // make tooltip invisible
	                this.hide_tooltip();
	                this.send({
	                    event: "hover",
	                    point: hovered_data,
	                });
	            }
	        }
	    },
	
	    mouse_move: function() {
	        if(this.model.get("enable_hover") &&
	            this.is_hover_element(d3.select(d3.event.target))) {
	            this.move_tooltip();
	        }
	    },
	
	    //TODO: Rename function
	    is_hover_element: function(elem) {
	        var hit_check = this.display_el_classes.map(function(class_name) {
	            return elem.classed(class_name);
	        });
	        return (_.compact(hit_check).length > 0);
	    },
	});
	
	module.exports = {
	    Mark: Mark
	};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var basemodel = __webpack_require__(13);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var AxisModel = basemodel.BaseModel.extend({
	
	    defaults: function() {
	        return _.extend(widgets.WidgetModel.prototype.defaults(), {
	            _model_name: "AxisModel",
	            _view_name: "Axis",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	
	            orientation: "horizontal",
	            side: null,
	            label: "",
	            grid_lines: "solid",
	            tick_format: null,
	            scale: undefined,
	            num_ticks: null,
	            tick_values: [],
	            offset: {},
	            label_location: "middle",
	            label_color: null,
	            grid_color: null,
	            color: null,
	            label_offset: null,
	            visible: true,
	            tick_style: {},
	            tick_rotate: 0
	        });
	    },
	
	    initialize: function() {
	        AxisModel.__super__.initialize.apply(this, arguments);
	        this.on("change:side", this.validate_orientation, this);
	        this.on("change:orientation", this.validate_side, this);
	        this.validate_orientation();
	        this.validate_side();
	    },
	
	    validate_side: function() {
	        var orientation = this.get("orientation"),
	            side = this.get("side");
	        if(orientation === "vertical") {
	            if (side !== "left" && side !== "right") {
	                this.set("side", "left");
	            }
	        } else {
	            if (side !== "bottom" && side !== "top") {
	                this.set("side", "bottom");
	            }
	        }
	        this.save_changes();
	    },
	
	    validate_orientation: function() {
	        var orientation = this.get("orientation"),
	            side = this.get("side");
	        if (side) {
	            if(side === "left" || side === "right") {
	                this.set("orientation", "vertical");
	            } else {
	                this.set("orientation", "horizontal");
	            }
	            this.save_changes();
	        }
	    }
	}, {
	    serializers: _.extend({
	         scale: { deserialize: widgets.unpack_models },
	         offset: { deserialize: widgets.unpack_models }
	    }, widgets.WidgetModel.serializers)
	});
	
	var ColorAxisModel = AxisModel.extend({
	
	    defaults: function() {
	        return _.extend(AxisModel.prototype.defaults(), {
	            _model_name: "ColorAxisModel",
	            _view_name: "ColorAxis"
	        });
	    }
	});
	
	
	module.exports = {
	    AxisModel: AxisModel,
	    ColorAxisModel: ColorAxisModel
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var utils = __webpack_require__(10);
	var interaction = __webpack_require__(18);
	
	var HandDraw = interaction.Interaction.extend({
	
	    render: function() {
	        HandDraw.__super__.render.apply(this);
	        this.d3el.style({
	            cursor: "crosshair"
	        });
	        this.active = false;
	
	        // Register the mouse callback when the mark view promises are
	        // resolved.
	        var that = this;
	        this.set_lines_view().then(function() {
	            that.d3el.on("mousedown", function() {
	                return that.mousedown();
	            });
	            that.set_limits();
	        });
	
	        // Update line index
	        this.update_line_index();
	        this.listenTo(this.model, "change:line_index", this.update_line_index, this);
	        this.model.on_some_change(["min_x", "max_x"], this.set_limits, this);
	    },
	
	    set_lines_view: function() {
	        var fig = this.parent;
	        var lines_model = this.model.get("lines");
	        var that = this;
	        return Promise.all(fig.mark_views.views).then(function(views) {
	            var fig_mark_ids = fig.mark_views._models.map(function(mark_model) {
	                return mark_model.model_id; // Model ids of the marks in the figure
	            });
	            var mark_index = fig_mark_ids.indexOf(lines_model.model_id);
	            that.lines_view = views[mark_index];
	        });
	    },
	
	    mousedown: function () {
	        this.active = true;
	        this.mouse_entry(false);
	        var that = this;
	        this.d3el.on("mousemove", function() { that.mousemove(); });
	        this.d3el.on("mouseleave", function() { that.mouseup(); });
	        this.d3el.on("mouseup", function() { that.mouseup(); });
	    },
	
	    mouseup: function () {
	        if (this.active) {
	            this.mouse_entry(true);
	            var lines_model = this.model.get("lines");
	            lines_model.set_typed_field("y", utils.deepCopy(lines_model.y_data));
	            this.lines_view.touch();
	            this.active = false;
	            this.d3el.on("mousemove", null);
	            this.d3el.on("mouseleave", null);
	            this.d3el.on("mouseup", null);
	        }
	    },
	
	    mousemove: function() {
	        this.mouse_entry(true);
	    },
	
	    mouse_entry: function(memory) {
	        // If memory is set to true, itermediate positions between the last
	        // position of the mouse and the current one will be interpolated.
	        if (this.active) {
	            var lines_model = this.model.get("lines");
	            var xindex = Math.min(this.line_index,
	                                  lines_model.x_data.length - 1);
	            var mouse_pos = d3.mouse(this.el);
	            if (!memory || !("previous_pos" in this)) {
	                this.previous_pos = mouse_pos;
	            }
	            var scale_x = this.lines_view.scales.x.scale;
	            var scale_y = this.lines_view.scales.y.scale;
	
	            var newx = scale_x.invert(mouse_pos[0]);
	            var newy = scale_y.invert(mouse_pos[1]);
	            var oldx = scale_x.invert(this.previous_pos[0]);
	            var oldy = scale_y.invert(this.previous_pos[1]);
	            var old_index = this.nns(lines_model.x_data[xindex], oldx);
	            var new_index = this.nns(lines_model.x_data[xindex], newx);
	            var min = Math.min(old_index, new_index);
	            var max = Math.max(old_index, new_index);
	            for (var i=min; i<=max; ++i) {
	                if ((!(this.valid_min) ||
	                     lines_model.x_data[xindex][i] >= this.min_x) &&
	                    ((!this.valid_max) ||
	                     lines_model.x_data[xindex][i] <= this.max_x)) {
	                    lines_model.y_data[this.line_index][i] = newy;
	                }
	            }
	            var that  = this;
	            var xy_data = lines_model.x_data[xindex].map(function(d, i)
	            {
	                return {
	                    x: d,
	                    y: lines_model.y_data[that.line_index][i]
	                };
	            });
	            this.lines_view.d3el.select("#curve" + (that.line_index + 1))
	                .attr("d", function(d) {
	                    return that.lines_view.line(xy_data);
	                });
	            this.previous_pos = mouse_pos;
	        }
	    },
	
	    capnfloor: function(val) {
	        // Not taking into account the position of the mouse beyond min_x
	        // and max_x
	        return Math.max(Math.min(val,this.model.get("max_x")),
	                        this.model.get("min_x"));
	    },
	
	    set_limits: function() {
	        var is_date = (this.lines_view.scales.x.model.type == "date");
	        if(is_date) {
	            this.min_x = this.model.get_date_elem("min_x");
	            this.valid_min = !(this.min_x === null ||
	                               this.min_x === undefined ||
	                               isNaN(this.min_x.getTime()));
	            this.max_x = this.model.get_date_elem("max_x");
	            this.valid_max = !(this.max_x === null ||
	                               this.max_x === undefined ||
	                               isNaN(this.max_x.getTime()));
	        } else {
	            this.min_x = this.model.get("min_x");
	            this.max_x = this.model.get("max_x");
	            this.valid_min = !(this.min_x === null ||
	                               this.min_x === undefined);
	            this.valid_max = !(this.max_x === null ||
	                               this.max_x === undefined);
	        }
	    },
	
	    nns: function(x_data, x) {
	        // Nearest neighbor search
	        var idx = this.lines_view.bisect(x_data, x);
	        if (x - x_data[idx-1] > x_data[idx] - x) {
	            return idx;
	        } else {
	            return idx-1;
	        }
	    },
	
	    update_line_index: function() {
	        // Called when the line index is changed in the model
	        this.line_index = this.model.get("line_index");
	    },
	});
	
	module.exports = {
	    HandDraw: HandDraw,
	};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	
	var Interaction = widgets.WidgetView.extend({
	
	    initialize : function() {
	        this.setElement(document.createElementNS(d3.ns.prefix.svg, "rect"));
	        this.d3el = d3.select(this.el);
	        Interaction.__super__.initialize.apply(this, arguments);
	    },
	
	    render: function() {
	        this.parent = this.options.parent;
	
	        // Opaque interation layer
	        this.d3el
	            .attr("x", 0)
	            .attr("y", 0)
	            .attr("width", this.parent.width -
	                           this.parent.margin.left -
	                           this.parent.margin.right)
	            .attr("height", this.parent.height -
	                            this.parent.margin.top -
	                            this.parent.margin.bottom)
	            .attr("pointer-events", "all")
	            .attr("visibility", "hidden");
	        this.parent.on("margin_updated", this.relayout, this);
	    },
	
	    relayout: function() {
	        // Called when the figure margins are updated.
	        this.d3el
	            .attr("width", this.parent.width -
	                           this.parent.margin.left -
	                           this.parent.margin.right)
	            .attr("height", this.parent.height -
	                            this.parent.margin.top -
	                            this.parent.margin.bottom);
	    },
	
	    remove: function() {
	        _.each(this.mark_views, function(mark) { mark.invert_range(); });
	        this.d3el.remove();
	        Interaction.__super__.remove.apply(this);
	    }
	});
	
	module.exports = {
	    Interaction: Interaction
	};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var mark = __webpack_require__(15);
	var utils = __webpack_require__(10);
	
	var Bars = mark.Mark.extend({
	
	    render: function() {
	        this.padding = this.model.get("padding");
	        var base_creation_promise = Bars.__super__.render.apply(this);
	        this.set_internal_scales();
	        this.selected_indices = this.model.get("selected");
	        this.selected_style = this.model.get("selected_style");
	        this.unselected_style = this.model.get("unselected_style");
	
	        this.display_el_classes = ["bar", "legendtext"];
	
	        var that = this;
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	
	        return base_creation_promise.then(function() {
	            that.event_listeners = {};
	            that.process_interactions();
	            that.create_listeners();
	            that.compute_view_padding();
	            that.draw();
	        });
	    },
	
	    set_scale_orientation: function() {
	        var orient = this.model.get("orientation");
	        this.dom_scale = this.scales.x; //(orient === "vertical") ? this.scales.x : this.scales.y;
	        this.range_scale = this.scales.y; //(orient === "vertical") ? this.scales.y : this.scales.x;
	    },
	
	    set_ranges: function() {
	        var orient = this.model.get("orientation");
	        this.set_scale_orientation();
	        var dom_scale = this.dom_scale,
	            range_scale = this.range_scale;
	        var dom = (orient === "vertical") ? "x" : "y",
	            rang = (orient === "vertical") ? "y" : "x";
	        if(dom_scale.model.type !== "ordinal") {
	            dom_scale.set_range(this.parent.padded_range(dom, dom_scale.model));
	        } else {
	            dom_scale.set_range(this.parent.padded_range(dom, dom_scale.model), this.padding);
	        }
	        range_scale.set_range(this.parent.padded_range(rang, range_scale.model));
	        // x_offset is set later by the adjust_offset method
	        // This differs because it is not constant for a scale.
	        // Changes based on the data.
	        this.dom_offset = 0;
	        this.range_offset = (orient === "vertical") ? range_scale.offset: -range_scale.offset;
	    },
	
	    set_positional_scales: function() {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if (!this.model.dirty) {
	                this.draw();
	            }
	        });
	        this.listenTo(y_scale, "domain_changed", function() {
	            if (!this.model.dirty) {
	                this.draw();
	            }
	        });
	    },
	
	    set_internal_scales: function() {
	        // Two scales to draw the bars.
	        this.x = d3.scale.ordinal();
	        this.x1 = d3.scale.ordinal();
	    },
	
	    adjust_offset: function() {
	        // In the case of a linear scale, and when plotting ordinal data,
	        // the value have to be negatively offset by half of the width of
	        // the bars, because ordinal scales give the values corresponding
	        // to the start of the bin but linear scale gives the actual value.
	        var dom_scale = this.dom_scale;
	        if(dom_scale.model.type !== "ordinal") {
	            if (this.model.get("align")==="center") {
	                this.dom_offset = -(this.x.rangeBand() / 2).toFixed(2);
	            } else if (this.model.get("align") === "left") {
	                this.dom_offset = -(this.x.rangeBand()).toFixed(2);
	            } else {
	                this.dom_offset = 0;
	            }
	        } else {
	            if (this.model.get("align")==="center") {
	                this.dom_offset = 0;
	            } else if (this.model.get("align")==="left") {
	                this.dom_offset = -(this.x.rangeBand() / 2);
	            } else {
	                this.dom_offset = (this.x.rangeBand() / 2);
	            }
	        }
	    },
	
	    create_listeners: function() {
	        Bars.__super__.create_listeners.apply(this);
	        this.d3el
	          .on("mouseover", _.bind(function() {
	              this.event_dispatcher("mouse_over");
	          }, this))
	          .on("mousemove", _.bind(function() {
	              this.event_dispatcher("mouse_move");
	          }, this))
	          .on("mouseout", _.bind(function() {
	              this.event_dispatcher("mouse_out");
	          }, this));
	
	        this.listenTo(this.model, "data_updated", function() {
	            //animate bars on data update
	            var animate = true;
	            this.draw(animate);
	        }, this);
	        this.listenTo(this.model, "change:colors", this.update_colors, this);
	        this.listenTo(this.model, "colors_updated", this.update_colors, this);
	        this.listenTo(this.model, "change:type", this.update_type, this);
	        this.listenTo(this.model, "change:align", this.realign, this);
	        this.listenTo(this.model, "change:orientation", this.relayout, this)
	        // FIXME: These are expensive calls for changing padding and align
	        this.listenTo(this.model, "change:padding", this.relayout, this)
	        this.listenTo(this.model, "change:tooltip", this.create_tooltip, this);
	        this.model.on_some_change(["stroke", "opacities"], this.update_stroke_and_opacities, this);
	        this.listenTo(this.model, "change:selected", this.update_selected);
	        this.listenTo(this.model, "change:interactions", this.process_interactions);
	        this.listenTo(this.parent, "bg_clicked", function() {
	            this.event_dispatcher("parent_clicked");
	        });
	    },
	
	    process_interactions: function() {
	        var interactions = this.model.get("interactions");
	        if(_.isEmpty(interactions)) {
	            //set all the event listeners to blank functions
	            this.reset_interactions();
	        }
	        else {
	            if(interactions.click !== undefined &&
	              interactions.click !== null) {
	                if(interactions.click === "tooltip") {
	                    this.event_listeners.element_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                } else if (interactions.click === "select") {
	                    this.event_listeners.parent_clicked = this.reset_selection;
	                    this.event_listeners.element_clicked = this.bar_click_handler;
	                }
	            } else {
	                this.reset_click();
	            }
	            if(interactions.hover !== undefined &&
	              interactions.hover !== null) {
	                if(interactions.hover === "tooltip") {
	                    this.event_listeners.mouse_over = this.refresh_tooltip;
	                    this.event_listeners.mouse_move = this.move_tooltip;
	                    this.event_listeners.mouse_out = this.hide_tooltip;
	                }
	            } else {
	                this.reset_hover();
	            }
	            if(interactions.legend_click !== undefined &&
	              interactions.legend_click !== null) {
	                if(interactions.legend_click === "tooltip") {
	                    this.event_listeners.legend_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                }
	            } else {
	                this.event_listeners.legend_clicked = function() {};
	            }
	            if(interactions.legend_hover !== undefined &&
	              interactions.legend_hover !== null) {
	                if(interactions.legend_hover === "highlight_axes") {
	                    this.event_listeners.legend_mouse_over = _.bind(this.highlight_axes, this);
	                    this.event_listeners.legend_mouse_out = _.bind(this.unhighlight_axes, this);
	                }
	            } else {
	                this.reset_legend_hover();
	            }
	        }
	    },
	
	    realign: function() {
	        //TODO: Relayout is an expensive call on realigning. Need to change
	        //this.
	        this.relayout();
	    },
	
	    draw_zero_line: function() {
	        this.set_scale_orientation();
	        var range_scale = this.range_scale;
	        var orient = this.model.get("orientation");
	        if (orient === "vertical") {
	            this.d3el.select(".zeroLine")
	              .attr("x1",  0)
	              .attr("x2", this.parent.plotarea_width)
	              .attr("y1", range_scale.scale(this.model.base_value))
	              .attr("y2", range_scale.scale(this.model.base_value));
	        } else {
	            this.d3el.select(".zeroLine")
	              .attr("x1", range_scale.scale(this.model.base_value))
	              .attr("x2", range_scale.scale(this.model.base_value))
	              .attr("y1", 0)
	              .attr("y2", this.parent.plotarea_height);
	        }
	    },
	
	    relayout: function() {
	        this.set_ranges();
	        this.compute_view_padding();
	
	        var range_scale = this.range_scale;
	
	        this.draw_zero_line();
	
	        this.x.rangeRoundBands(this.set_x_range(), this.padding);
	        this.adjust_offset();
	        this.x1.rangeRoundBands([0, this.x.rangeBand().toFixed(2)]);
	        this.draw_bars();
	    },
	
	    invert_point: function(pixel) {
	        if(pixel === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            return;
	        }
	
	        var abs_diff = this.x_pixels.map(function(elem) { return Math.abs(elem - pixel); });
	        this.model.set("selected", [abs_diff.indexOf(d3.min(abs_diff))]);
	        this.touch();
	    },
	
	    selector_changed: function(point_selector, rect_selector) {
	        if(point_selector === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            return [];
	        }
	        var pixels = this.pixel_coords;
	        var indices = _.range(pixels.length);
	        // Here we only select bar groups. It shouldn't be too hard to select
	        // individual bars, the `selected` attribute would then be a list of pairs.
	        var selected_groups = _.filter(indices, function(index) {
	            var bars = pixels[index];
	            for (var i = 0; i < bars.length; i++) {
	                if (rect_selector(bars[i])) { return true; }
	            } return false;
	        });
	        this.model.set("selected", selected_groups);
	        this.touch();
	    },
	
	    update_selected: function(model, value) {
	        this.selected_indices = value;
	        this.apply_styles();
	    },
	
	    draw: function(animate) {
	        this.set_ranges();
	        var colors = this.model.get("colors");
	        var that = this;
	        var bar_groups = this.d3el.selectAll(".bargroup")
	          .data(this.model.mark_data, function(d) {
	              return d.key;
	          });
	
	        var dom_scale = this.dom_scale, range_scale = this.range_scale;
	        // this.x is the ordinal scale used to draw the bars. If a linear
	        // scale is given, then the ordinal scale is created from the
	        // linear scale.
	        if(dom_scale.model.type !== "ordinal") {
	            var model_domain = this.model.mark_data.map(function(elem) {
	                return elem.key;
	            });
	            this.x.domain(model_domain);
	        } else {
	            this.x.domain(dom_scale.scale.domain());
	        }
	        this.x.rangeRoundBands(this.set_x_range(), this.padding);
	        this.adjust_offset();
	        this.x1.rangeRoundBands([0, this.x.rangeBand().toFixed(2)]);
	
	        if(this.model.mark_data.length > 0) {
	            this.x1.domain(_.range(this.model.mark_data[0].values.length))
	                .rangeRoundBands([0, this.x.rangeBand().toFixed(2)]);
	        }
	        bar_groups.enter()
	          .append("g")
	          .attr("class", "bargroup");
	        // The below function sorts the DOM elements so that the order of
	        // the DOM elements matches the order of the data they are bound
	        // to. This is required to maintain integrity with selection.
	        bar_groups.order();
	
	        bar_groups.on("click", function(d, i) {
	            return that.event_dispatcher("element_clicked",
	                                         {"data": d, "index": i});
	        });
	        bar_groups.exit().remove();
	
	        var bars_sel = bar_groups.selectAll(".bar")
	          .data(function(d) {
	              return d.values;
	          });
	
	        // default values for width and height are to ensure smooth
	        // transitions
	        bars_sel.enter()
	          .append("rect")
	          .attr("class", "bar")
	          .attr("width", 0)
	          .attr("height", 0);
	
	        bars_sel.exit().remove();
	
	        this.draw_bars(animate);
	
	        this.apply_styles();
	
	        this.d3el.selectAll(".zeroLine").remove();
	        this.d3el.append("g")
	          .append("line")
	          .attr("class", "zeroLine");
	
	        this.draw_zero_line();
	    },
	
	    draw_bars: function(animate) {
	        var bar_groups = this.d3el.selectAll(".bargroup");
	        var bars_sel = bar_groups.selectAll(".bar");
	        var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	        var that = this;
	        var orient = this.model.get("orientation");
	
	        var dom_scale = this.dom_scale, range_scale = this.range_scale;
	
	        var dom = (orient === "vertical") ? "x" : "y",
	            rang = (orient === "vertical") ? "y" : "x";
	
	        var dom_control = (orient === "vertical") ? "width" : "height",
	            rang_control = (orient === "vertical") ? "height" : "width";
	        if (dom_scale.model.type === "ordinal") {
	            var dom_max = d3.max(this.parent.range(dom));
	            bar_groups.attr("transform", function(d) {
	                if (orient === "vertical") {
	                    return "translate(" + ((dom_scale.scale(d.key) !== undefined ?
	                                        dom_scale.scale(d.key) : dom_max) + that.dom_offset) + ", 0)"
	                } else {
	                    return "translate(0, " + ((dom_scale.scale(d.key) !== undefined ?
	                                        dom_scale.scale(d.key) : dom_max) + that.dom_offset) + ")"
	                }
	            });
	        } else {
	            bar_groups.attr("transform", function(d) {
	                if (orient === "vertical") {
	                    return "translate(" + (dom_scale.scale(d.key) + that.dom_offset) + ", 0)";
	                } else {
	                    return "translate(0, " + (dom_scale.scale(d.key) + that.dom_offset) + ")";
	                }
	            });
	        }
	        var is_stacked = (this.model.get("type") === "stacked");
	        if (is_stacked) {
	            bars_sel.transition("draw_bars").duration(animation_duration)
	                .attr(dom, 0)
	                .attr(dom_control, this.x.rangeBand().toFixed(2))
	                .attr(rang, function(d) {
	                    return (rang === "y") ? range_scale.scale(d.y1) : range_scale.scale(d.y0);
	                })
	                .attr(rang_control, function(d) {
	                    return Math.abs(range_scale.scale(d.y1 + d.y_ref) - range_scale.scale(d.y1));
	                });
	        } else {
	            bars_sel.transition("draw_bars").duration(animation_duration)
	              .attr(dom, function(datum, index) {
	                    return that.x1(index);
	              })
	              .attr(dom_control, this.x1.rangeBand().toFixed(2))
	              .attr(rang, function(d) {
	                  return d3.min([range_scale.scale(d.y), range_scale.scale(that.model.base_value)]);
	              })
	              .attr(rang_control, function(d) {
	                  return Math.abs(range_scale.scale(that.model.base_value) - (range_scale.scale(d.y_ref)));
	              });
	        }
	
	        this.pixel_coords = this.model.mark_data.map(function(d) {
	            var key = d.key;
	            var group_dom = dom_scale.scale(key) + that.dom_offset;
	            return d.values.map(function(d) {
	                var rect_coords = {};
	                rect_coords[dom] = is_stacked ? group_dom : group_dom + that.x1(d.sub_index);
	                rect_coords[rang] = is_stacked ?
	                    (rang === "y") ? range_scale.scale(d.y1) : range_scale.scale(d.y0) :
	                    d3.min([range_scale.scale(d.y), range_scale.scale(that.model.base_value)]);
	                rect_coords[dom_control] = is_stacked ?
	                    that.x.rangeBand() : that.x1.rangeBand();
	                rect_coords[rang_control] = is_stacked ?
	                    Math.abs(range_scale.scale(d.y1 + d.y_ref) - range_scale.scale(d.y1)) :
	                    Math.abs(range_scale.scale(that.model.base_value) - (range_scale.scale(d.y_ref)));
	                return [[rect_coords["x"], rect_coords["x"] + rect_coords["width"]],
	                        [rect_coords["y"], rect_coords["y"] + rect_coords["height"]]];
	            })
	        })
	        this.x_pixels = this.model.mark_data.map(function(el) {
	            return dom_scale.scale(el.key) + dom_scale.offset;
	        });
	    },
	
	    update_type: function(model, value) {
	        // We need to update domains here as the y_domain needs to be
	        // changed when we switch from stacked to grouped.
	        this.model.update_domains();
	        this.draw();
	    },
	
	    update_stroke_and_opacities: function() {
	        var stroke = this.model.get("stroke");
	        var opacities = this.model.get("opacities");
	        this.d3el.selectAll(".bar")
	            .style("stroke", stroke)
	            .style("opacity", function(d, i) {
	            return opacities[i];
	        });
	    },
	
	    update_colors: function() {
	        //the following if condition is to handle the case of single
	        //dimensional data.
	        //if y is 1-d, each bar should be of 1 color.
	        //if y is multi-dimensional, the corresponding values should be of
	        //the same color.
	        var that = this;
	        var color_scale = this.scales.color;
	        if(this.model.mark_data.length > 0) {
	            if(!(this.model.is_y_2d)) {
	                this.d3el.selectAll(".bar").style("fill", function(d, i) {
	                    return (d.color !== undefined && color_scale !== undefined) ?
	                        color_scale.scale(d.color) : that.get_colors(d.color_index);
	                });
	            } else {
	                this.d3el.selectAll(".bargroup")
	                   .selectAll(".bar")
	                   .style("fill", function(d, i) {
	                   return (d.color !== undefined && color_scale !== undefined) ?
	                       color_scale.scale(d.color) : that.get_colors(d.color_index);
	                });
	            }
	        }
	        //legend color update
	        if(this.legend_el) {
	            this.legend_el.selectAll(".legendrect")
	              .style("fill", function(d, i) {
	                  return (d.color && color_scale) ?
	                      color_scale.scale(d.color) : that.get_colors(d.color_index);
	              });
	            this.legend_el.selectAll(".legendtext")
	                .style("fill", function(d, i) {
	                return (d.color !== undefined && color_scale !== undefined) ?
	                    color_scale.scale(d.color) : that.get_colors(d.color_index);
	            });
	        }
	    },
	
	    draw_legend: function(elem, x_disp, y_disp, inter_x_disp, inter_y_disp) {
	        if(!(this.model.is_y_2d) &&
	           (this.model.get("colors").length !== 1 &&
	            this.model.get("color_mode") !== "element")) {
	            return [0, 0];
	        }
	
	        var legend_data = this.model.mark_data[0].values.map(function(data) {
	            return {
	                index: data.sub_index,
	                color: data.color,
	                color_index: data.color_index
	            };
	        });
	        var color_scale = this.scales.color;
	        this.legend_el = elem.selectAll(".legend" + this.uuid)
	            .data(legend_data);
	
	        var that = this;
	        var rect_dim = inter_y_disp * 0.8;
	        this.legend_el.enter()
	          .append("g")
	            .attr("class", "legend" + this.uuid)
	            .attr("transform", function(d, i) {
	                return "translate(0, " + (i * inter_y_disp + y_disp)  + ")";
	            })
	            .on("mouseover", _.bind(function() {
	                this.event_dispatcher("legend_mouse_over");
	            }, this))
	            .on("mouseout", _.bind(function() {
	                this.event_dispatcher("legend_mouse_out");
	            }, this))
	            .on("click", _.bind(function() {
	                this.event_dispatcher("legend_clicked");
	            }, this))
	          .append("rect")
	            .classed("legendrect", true)
	            .style("fill", function(d,i) {
	                return (d.color !== undefined && color_scale !== undefined) ?
	                    color_scale.scale(d.color) : that.get_colors(d.color_index);
	            }).attr({
	                x: 0,
	                y: 0,
	                width: rect_dim,
	                height: rect_dim,
	            });
	
	        this.legend_el.append("text")
	         .attr("class","legendtext")
	          .attr("x", rect_dim * 1.2)
	          .attr("y", rect_dim / 2)
	          .attr("dy", "0.35em")
	          .text(function(d, i) { return that.model.get("labels")[i]; })
	          .style("fill", function(d,i) {
	              return (d.color !== undefined && color_scale !== undefined) ?
	                  color_scale.scale(d.color) : that.get_colors(d.color_index);
	          });
	
	        var max_length = d3.max(this.model.get("labels"), function(d) {
	            return d.length;
	        });
	
	        this.legend_el.exit().remove();
	        return [this.model.mark_data[0].values.length, max_length];
	    },
	
	    clear_style: function(style_dict, indices) {
	        // Function to clear the style of a dict on some or all the elements of the
	        // chart. If indices is null, clears the style on all elements. If
	        // not, clears on only the elements whose indices are mathcing.
	        //
	        // This function is not used right now. But it can be used if we
	        // decide to accommodate more properties than those set by default.
	        // Because those have to cleared specifically.
	        var elements = this.d3el.selectAll(".bargroup");
	        if(indices !== undefined) {
	            elements = elements.filter(function(d, index) {
	                return indices.indexOf(index) !== -1;
	            });
	        }
	        var clearing_style = {};
	        for(var key in style_dict) {
	            clearing_style[key] = null;
	        }
	        elements.selectAll(".bar").style(clearing_style);
	    },
	
	    set_style_on_elements: function(style, indices) {
	        // If the index array is undefined or of length=0, exit the
	        // function without doing anything
	        if(indices === undefined || indices === null || indices.length === 0) {
	            return;
	        }
	        // Also, return if the style object itself is blank
	        if(Object.keys(style).length === 0) {
	            return;
	        }
	        var elements = this.d3el.selectAll(".bargroup");
	        elements = elements.filter(function(data, index) {
	            return indices.indexOf(index) !== -1;
	        });
	        elements.selectAll(".bar").style(style);
	    },
	
	    set_default_style: function(indices) {
	        // For all the elements with index in the list indices, the default
	        // style is applied.
	        this.update_colors();
	        this.update_stroke_and_opacities();
	    },
	
	    set_x_range: function() {
	        var dom_scale = this.dom_scale;
	        if(dom_scale.model.type === "ordinal") {
	            return dom_scale.scale.rangeExtent();
	        } else {
	            return [dom_scale.scale(d3.min(this.x.domain())),
	                    dom_scale.scale(d3.max(this.x.domain()))];
	        }
	    },
	
	    bar_click_handler: function (args) {
	        var data = args.data;
	        var index = args.index;
	        var that = this;
	        var idx = this.model.get("selected");
	        var selected = idx ? utils.deepCopy(idx) : [];
	        // index of bar i. Checking if it is already present in the list.
	        var elem_index = selected.indexOf(index);
	        // Replacement for "Accel" modifier.
	        var accelKey = d3.event.ctrlKey || d3.event.metaKey;
	        if(elem_index > -1 && accelKey) {
	            // if the index is already selected and if accel key is
	            // pressed, remove the element from the list
	            selected.splice(elem_index, 1);
	        } else {
	            if(d3.event.shiftKey) {
	                //If shift is pressed and the element is already
	                //selected, do not do anything
	                if(elem_index > -1) {
	                    return;
	                }
	                //Add elements before or after the index of the current
	                //bar which has been clicked
	                var min_index = (selected.length !== 0) ?
	                    d3.min(selected) : -1;
	                var max_index = (selected.length !== 0) ?
	                    d3.max(selected) : that.model.mark_data.length;
	                if(index > max_index){
	                    _.range(max_index+1, index+1).forEach(function(i) {
	                        selected.push(i);
	                    });
	                } else if(index < min_index){
	                    _.range(index, min_index).forEach(function(i) {
	                        selected.push(i);
	                    });
	                }
	            } else if(accelKey) {
	                //If accel is pressed and the bar is not already selcted
	                //add the bar to the list of selected bars.
	                selected.push(index);
	            }
	            // updating the array containing the bar indexes selected
	            // and updating the style
	            else {
	                //if accel is not pressed, then clear the selected ones
	                //and set the current element to the selected
	                selected = [];
	                selected.push(index);
	            }
	        }
	        this.model.set("selected",
	                       ((selected.length === 0) ? null : selected),
	                       {updated_view: this});
	        this.touch();
	        if(!d3.event) {
	            d3.event = window.event;
	        }
	        var e = d3.event;
	        if(e.cancelBubble !== undefined) { // IE
	            e.cancelBubble = true;
	        }
	        if(e.stopPropagation) {
	            e.stopPropagation();
	        }
	        e.preventDefault();
	    },
	
	    reset_selection: function() {
	        this.model.set("selected", null);
	        this.selected_indices = null;
	        this.touch();
	    },
	
	    compute_view_padding: function() {
	        // //This function returns a dictionary with keys as the scales and
	        // //value as the pixel padding required for the rendering of the
	        // //mark.
	        var dom_scale = this.dom_scale;
	        var orient = this.model.get("orientation");
	        var x_padding = 0;
	        var avail_space = (orient === "vertical" ) ? this.parent.plotarea_width: this.parent.plotarea_height;
	        if(dom_scale) {
	            if (this.x !== null && this.x !== undefined &&
	                this.x.domain().length !== 0) {
	                if(dom_scale.model.type !== "ordinal") {
	                    if (this.model.get("align") === "center") {
	                        x_padding = (avail_space / (2.0 * this.x.domain().length) + 1);
	                    } else if (this.model.get("align") === "left" ||
	                               this.model.get("align") === "right") {
	                        x_padding = (avail_space / (this.x.domain().length) + 1);
	                    }
	                } else {
	                    if (this.model.get("align") === "left" ||
	                        this.model.get("align") === "right") {
	                        x_padding = ( this.x.rangeBand() / 2 ).toFixed(2);
	                    }
	                }
	            }
	        }
	        if (orient === "vertical") {
	            if(x_padding !== this.x_padding) {
	                this.x_padding = x_padding;
	                this.trigger("mark_padding_updated");
	                //dispatch the event
	            }
	        } else {
	            if(x_padding !== this.y_padding) {
	                this.y_padding = x_padding;
	                this.trigger("mark_padding_updated");
	                //dispatch the event
	            }
	        }
	    }
	});
	
	
	module.exports = {
	    Bars: Bars
	};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var basemodel = __webpack_require__(13);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var HandDrawModel = basemodel.BaseModel.extend({
	
		defaults: function() {
	        return _.extend(widgets.WidgetModel.prototype.defaults(), {
	            _model_name: "HandDrawModel",
	            _view_name: "HandDraw",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	
		        lines: null,
		        line_index: 0,
	            min_x: null,
	            max_x: null
	        });
	    }
	}, {
	    serializers: _.extend({
	        lines:  { deserialize: widgets.unpack_models },
	    }, basemodel.BaseModel.serializers)
	});
	
	module.exports = {
	    HandDrawModel: HandDrawModel
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var mark = __webpack_require__(15);
	
	var OHLC = mark.Mark.extend({
	
	    render: function() {
	        var base_creation_promise = OHLC.__super__.render.apply(this);
	
	        var that = this;
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	
	        return base_creation_promise.then(function() {
	            that.create_listeners();
	            that.draw(); },
	        null);
	    },
	
	    set_ranges: function() {
	        var x_scale = this.scales.x;
	        if(x_scale) {
	            x_scale.set_range(this.parent.padded_range("x", x_scale.model));
	        }
	        var y_scale = this.scales.y;
	        if(y_scale) {
	            y_scale.set_range(this.parent.padded_range("y", y_scale.model));
	        }
	    },
	
	    set_positional_scales: function() {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if(!this.model.dirty) { this.draw(); }
	        });
	        this.listenTo(y_scale, "domain_changed", function() {
	            if(!this.model.dirty) { this.draw(); }
	        });
	    },
	
	    create_listeners: function() {
	        OHLC.__super__.create_listeners.apply(this);
	        this.d3el.on("mouseover", _.bind(this.mouse_over, this))
	            .on("mousemove", _.bind(this.mouse_move, this))
	            .on("mouseout", _.bind(this.mouse_out, this));
	
	        this.listenTo(this.model, "change:stroke", this.update_stroke, this);
	        this.listenTo(this.model, "change:stroke_width", this.update_stroke_width, this);
	        this.listenTo(this.model, "change:colors", this.update_colors, this);
	        this.listenTo(this.model, "change:opacities", this.update_opacities, this);
	        this.listenTo(this.model, "change:marker", this.update_marker, this);
	        this.listenTo(this.model, "format_updated", this.draw, this);
	        this.listenTo(this.model, "data_updated", this.draw);
	    },
	
	    update_stroke: function() {
	        var stroke = this.model.get("stroke");
	        this.d3el.selectAll(".stick").style("stroke", stroke);
	
	        if(this.legend_el) {
	            this.legend_el.selectAll("path").style("stroke", stroke);
	            this.legend_el.selectAll("text").style("fill", stroke);
	        }
	    },
	
	    update_stroke_width: function() {
	        var stroke_width = this.model.get("stroke_width");
	        this.d3el.selectAll(".stick").attr("stroke-width", stroke_width);
	    },
	
	    update_colors: function() {
	        var that = this;
	        var colors = this.model.get("colors");
	        var up_color = (colors[0] ? colors[0] : "none");
	        var down_color = (colors[1] ? colors[1] : "none");
	
	        // Fill candles based on the opening and closing values
	        this.d3el.selectAll(".stick").style("fill", function(d) {
	            return (d.y[that.model.px.o] > d.y[that.model.px.c] ?
	                down_color : up_color);
	        });
	
	        if(this.legend_el) {
	            this.legend_el.selectAll("path").style("fill", up_color);
	        }
	    },
	
	    update_opacities: function() {
	        var opacities = this.model.get("opacities");
	        this.d3el.selectAll(".stick").style("opacity", function(d, i) {
	            return opacities[i];
	        });
	
	        if(this.legend_el) {
	            this.legend_el.selectAll("path")
	                .attr("opacity", function(d, i) { return opacities[i]; });
	        }
	    },
	
	    update_marker: function() {
	        var marker = this.model.get("marker");
	
	        if(this.legend_el && this.rect_dim) {
	            this.draw_legend_icon(this.rect_dim, this.legend_el);
	        }
	
	        // Redraw existing marks
	        this.draw_mark_paths(marker, this.d3el,
	            this.model.mark_data.map(function(d, index) {
	                return d[1];
	            }));
	    },
	
	    update_selected_colors: function(idx_start, idx_end) {
	        var stick_sel = this.d3el.selectAll(".stick");
	        var current_range = _.range(idx_start, idx_end + 1);
	        if(current_range.length == this.model.mark_data.length) {
	            current_range = [];
	        }
	        var that = this;
	        var stroke = this.model.get("stroke");
	        var colors = this.model.get("colors");
	        var up_color = (colors[0] ? colors[0] : stroke);
	        var down_color = (colors[1] ? colors[1] : stroke);
	        var px = this.model.px;
	
	        _.range(0, this.model.mark_data.length)
	         .forEach(function(d) {
	             that.d3el.selectAll("#stick" + d)
	               .style("stroke", stroke);
	         });
	
	        current_range.forEach(function(d) {
	            that.d3el.selectAll("#stick" + d)
	                .style("stroke", function(d) {
	                    return d[px.o] > d[px.c] ? down_color : up_color;
	                });
	        });
	    },
	
	    invert_range: function(start_pxl, end_pxl) {
	        if(start_pxl === undefined || end_pxl === undefined ||
	           this.model.mark_data.length === 0)
	        {
	            this.update_selected_colors(-1, -1);
	            selected = [];
	            return selected;
	        }
	
	        var indices = _.range(this.model.mark_data.length);
	        var that = this;
	        var selected = _.filter(indices, function(index) {
	            var elem = that.x_pixels[index];
	            return (elem >= start_pxl && elem <= end_pxl);
	        });
	
	        var x_scale = this.scales.x;
	        var idx_start = -1;
	        var idx_end = -1;
	        if(selected.length > 0 &&
	            (start_pxl !== x_scale.scale.range()[0] ||
	               end_pxl !== x_scale.scale.range()[1]))
	        {
	            idx_start = selected[0];
	            idx_end = selected[selected.length - 1];
	        }
	        this.update_selected_colors(idx_start, idx_end);
	        this.model.set("selected", selected);
	        this.touch();
	        return selected;
	    },
	
	    invert_point: function(pixel) {
	        var x_scale = this.scales.x;
	        var point = 0;
	        var abs_diff = this.x_pixels.map(function(elem) { return Math.abs(elem - pixel); });
	        var sel_index = abs_diff.indexOf(d3.min(abs_diff));
	        this.update_selected_colors(sel_index, sel_index);
	        this.model.set("selected", [sel_index]);
	        this.touch();
	        return sel_index;
	    },
	
	    draw: function() {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        this.set_ranges();
	        var colors = this.model.get("colors");
	        var opacities = this.model.get("opacities");
	        var up_color = (colors[0] ? colors[0] : "none");
	        var down_color = (colors[1] ? colors[1] : "none");
	        var px = this.model.px;
	        var stick = this.d3el.selectAll(".stick")
	            .data(this.model.mark_data.map(function(data, index) {
	                return {
	                    x: data[0],
	                    y: data[1],
	                    index: index
	                };
	            }));
	
	        // Create new
	        var new_sticks = stick.enter()
	            .append("g")
	            .attr("class", "stick")
	            .attr("id", function(d, i) { return "stick" + i; })
	            .style("stroke", this.model.get("stroke"))
	            .style("opacity", function(d, i) {
	                return opacities[i];
	            });
	
	        new_sticks.append("path").attr("class", "stick_head");
	        new_sticks.append("path").attr("class", "stick_tail");
	        new_sticks.append("path").attr("class", "stick_body");
	
	        stick.exit().remove();
	
	        var that = this;
	
	        // Determine offset to use for translation
	        var y_index  = px.h;
	        if(px.h === -1) {
	            y_index = px.o;
	        }
	        // Update all of the marks
	        this.d3el.selectAll(".stick")
	            .style("fill", function(d, i) {
	                return (d.y[px.o] > d.y[px.c]) ? down_color : up_color;
	            })
	            .attr("stroke-width", this.model.get("stroke_width"));
	        if(x_scale.model.type === "ordinal") {
	            // If we are out of range, we just set the mark in the final
	            // bucket's range band. FIXME?
	            var x_max = d3.max(this.parent.range("x"));
	            this.d3el.selectAll(".stick").attr( "transform", function(d, i) {
	                return "translate(" + ((x_scale.scale(that.model.mark_data[i][0]) !== undefined ?
	                                        x_scale.scale(that.model.mark_data[i][0]) : x_max) +
	                                        x_scale.scale.rangeBand()/2) + "," +
	                                      (y_scale.scale(d.y[y_index]) + y_scale.offset) + ")";
	            });
	        } else {
	            this.d3el.selectAll(".stick").attr( "transform", function(d, i) {
	                 return "translate(" + (x_scale.scale(that.model.mark_data[i][0]) +
	                                     x_scale.offset) + "," +
	                                     (y_scale.scale(d.y[y_index]) +
	                                     y_scale.offset) + ")";
	             });
	        }
	
	        // Draw the mark paths
	        this.draw_mark_paths(this.model.get("marker"), this.d3el,
	            this.model.mark_data.map(function(d) {
	                return d[1];
	            }));
	
	        this.x_pixels = this.model.mark_data.map(function(el) {
	            return x_scale.scale(el[0]) + x_scale.offset;
	        });
	    },
	
	    draw_mark_paths: function(type, selector, dat) {
	        /* Calculate some values so that we can draw the marks
	         *      | <----- high (0,0)
	         *      |
	         *  --------- <- headline_top (open or close)
	         *  |       |
	         *  |       |
	         *  |       |
	         *  --------- <- headline_bottom (open or close)
	         *      |
	         *      | <----- low
	         *
	         *
	         *      | <----- high (0,0)
	         *  ____| <----- open
	         *      |
	         *      |
	         *      |
	         *      |____ <- close
	         *      | <----- low
	         */
	
	        var px = this.model.px;
	        var that = this;
	        var open = [];
	        var high = [];
	        var low = [];
	        var close = [];
	        var headline_top = [];
	        var headline_bottom = [];
	        var to_left_side = [];
	        var scaled_mark_widths = [];
	
	        var min_x_difference = this.calculate_mark_width();
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        var offset_in_x_units, data_point;
	
	        for(var i = 0; i < dat.length; i++) {
	            if(px.o === -1) {
	                open[i] = undefined;
	            } else {
	                open[i] = y_scale.scale(dat[i][px.o]);
	            }
	            if(px.c === -1) {
	                close[i] = undefined;
	            } else {
	                close[i] = y_scale.scale(dat[i][px.c]);
	            }
	            // We can only compute these (and only need to compute these)
	            // when we have both the open and the close values
	            if(px.o !== -1 && px.c !== -1) {
	                headline_top[i] = (dat[i][px.o] > dat[i][px.c]) ?
	                                        open[i] : close[i];
	                headline_bottom[i] = (dat[i][px.o] < dat[i][px.c]) ?
	                                        open[i] : close[i];
	            }
	
	            // We never have high without low and vice versa, so we can
	            // check everything at once
	            if(px.h === -1 || px.l === -1) {
	                high[i] = open[i];
	                low[i] = close[i];
	            } else {
	                high[i] = y_scale.scale(dat[i][px.h]);
	                low[i] = y_scale.scale(dat[i][px.l]);
	            }
	
	            data_point = that.model.mark_data[i][0];
	            // Check for dates so that we don't concatenate
	            if( min_x_difference instanceof Date) {
	                min_x_difference = min_x_difference.getTime();
	            }
	            if(data_point instanceof Date) {
	                data_point = data_point.getTime();
	            }
	            offset_in_x_units = data_point + min_x_difference;
	
	            if(x_scale.model.type === "ordinal") {
	                scaled_mark_widths[i] = x_scale.scale.rangeBand() * 0.75;
	            } else {
	                scaled_mark_widths[i] = (x_scale.scale(offset_in_x_units) -
	                                         x_scale.scale(data_point)) *
	                                         0.75;
	            }
	            to_left_side[i] = -1*scaled_mark_widths[i]/2;
	        }
	
	        // Determine OHLC marker type
	        // Note: if we do not have open or close data then we have to draw
	        // a bar.
	        if(type == "candle" && px.o !== -1 && px.c !== -1) {
	            /*
	             *      | <-------- head
	             *  ---------
	             *  |       |
	             *  |       | <---- body
	             *  |       |
	             *  ---------
	             *      | <-------- tail
	             */
	            if(px.h !== -1 || px.l !== -1) {
	                selector.selectAll(".stick_head")
	                    .attr("d", function(d, i) {
	                        return that.head_path_candle(headline_top[i] - high[i]);
	                    });
	                selector.selectAll(".stick_tail")
	                    .attr("d", function(d, i) {
	                        return that.tail_path_candle(headline_bottom[i] - high[i],
	                                                     low[i] - headline_bottom[i]);
	                    });
	            } else {
	                selector.selectAll(".stick_head").attr("d", "");
	                selector.selectAll(".stick_tail").attr("d", "");
	            }
	            selector.selectAll(".stick_body")
	                .attr("d", function(d, i) {
	                    return that.body_path_candle(to_left_side[i],
	                                                 open[i] - high[i],
	                                                 scaled_mark_widths[i],
	                                                 close[i] - open[i]);
	              });
	        } else {
	            // bar
	            /*
	             *      |
	             *  ____| <-------- head (horizontal piece)
	             *      |
	             *      | <-------- body (vertical piece)
	             *      |
	             *      |____ <---- tail (horizontal piece)
	             *      |
	             */
	            if(px.o !== -1) {
	                selector.selectAll(".stick_head")
	                    .attr("d", function(d, i) {
	                    return that.head_path_bar(to_left_side[i],
	                                              open[i] - high[i],
	                                              to_left_side[i]*-1);
	                });
	            } else {
	                selector.selectAll(".stick_head").attr("d", "");
	            }
	            if(px.c !== -1) {
	                selector.selectAll(".stick_tail")
	                    .attr("d", function(d, i) {
	                    return that.tail_path_bar(close[i] - high[i],
	                                              to_left_side[i]*-1);
	                });
	            } else {
	                selector.selectAll(".stick_tail").attr("d", "");
	            }
	            selector.selectAll(".stick_body")
	                .attr("d", function(d, i) {
	                return that.body_path_bar(low[i]-high[i]);
	             });
	        }
	    },
	
	    /* SVG path for head of candle */
	    head_path_candle: function(height) {
	        return "m0,0 l0," + height;
	    },
	
	    /* SVG path for tail of candle */
	    tail_path_candle: function(y_offset, height) {
	        return "m0," + y_offset + " l0," + height;
	    },
	
	    /* SVG path for body of candle */
	    body_path_candle: function(x_offset, y_offset, width, height) {
	        return "m" + x_offset + "," + y_offset + " l" + width + ",0" +
	            " l0," + height + " l" + (-1*width) + ",0" + " z";
	    },
	
	    /* SVG path for head of bar */
	    head_path_bar: function(x_offset, y_offset, width) {
	        return "m" + x_offset + "," + y_offset +
	              " l" + width + ",0";
	    },
	
	    /* SVG path for tail of bar */
	    tail_path_bar: function(y_offset, width) {
	        return "m0," + y_offset +
	                " l" + width + ",0";
	    },
	
	    /* SVG path for body of bar */
	    body_path_bar: function(height) {
	        return "m0,0 l0," + height;
	    },
	
	    calculate_mark_width: function() {
	        /*
	         * Calculate the mark width for this data set based on the minimum
	         * distance between consecutive points.
	         */
	        var that = this;
	        var min_distance = Number.POSITIVE_INFINITY;
	        var sum = 0;
	        var average_height = 0;
	        var scales = this.model.get("scales");
	        var x_scale = scales.x;
	
	        for(var i = 1; i < that.model.mark_data.length; i++) {
	            var dist = that.model.mark_data[i][0] -
	                       that.model.mark_data[i-1][0];
	            if(dist < min_distance) min_distance = dist;
	        }
	        // Check if there are less than two data points
	        if(min_distance === Number.POSITIVE_INFINITY) {
	            min_distance = (x_scale.domain[1] -
	                            x_scale.domain[0]) / 2;
	        }
	        if(min_distance < 0) {
	            min_distance = -1 * min_distance;
	        }
	        return min_distance;
	    },
	
	    relayout: function() {
	        OHLC.__super__.relayout.apply(this);
	        this.set_ranges();
	        this.d3el.select(".intselmouse")
	            .attr("width", this.width)
	            .attr("height", this.height);
	
	        // We have to redraw every time that we relayout
	        this.draw();
	    },
	
	    draw_legend: function(elem, x_disp, y_disp, inter_x_disp, inter_y_disp) {
	        var stroke = this.model.get("stroke");
	        var colors = this.model.get("colors");
	        var up_color = (colors[0] ? colors[0] : "none");
	        var down_color = (colors[1] ? colors[1] : "none");
	        this.rect_dim = inter_y_disp * 0.8;
	        var that = this;
	
	        this.legend_el = elem.selectAll("#legend" + this.uuid)
	                             .data([this.model.mark_data]);
	
	        var leg = this.legend_el.enter().append("g")
	            .attr("transform", function(d, i) {
	                return "translate(0, " + (i * inter_y_disp + y_disp) + ")";
	            })
	            .attr("class", "legend")
	            .attr("id", "legend" + this.uuid)
	            .style("fill", up_color)
	            .on("mouseover", _.bind(this.highlight_axes, this))
	            .on("mouseout", _.bind(this.unhighlight_axes, this));
	
	        leg.append("path").attr("class", "stick_head stick");
	        leg.append("path").attr("class", "stick_tail stick");
	        leg.append("path").attr("class", "stick_body stick")
	                          .style("fill", up_color);
	
	        // Add stroke color and set position
	        leg.selectAll("path")
	            .style("stroke", stroke)
	            .attr("transform", "translate(" + (that.rect_dim/2) + ",0)");
	
	        // Draw icon and text
	        this.draw_legend_icon(that.rect_dim, leg);
	        this.legend_el.append("text")
	            .attr("class", "legendtext sticktext")
	            .attr("x", that.rect_dim * 1.2)
	            .attr("y", that.rect_dim / 2)
	            .attr("dy", "0.35em")
	            .text(function(d, i) { return that.model.get("labels")[i]; })
	            .style("fill", stroke);
	
	        var max_length = d3.max(this.model.get("labels"), function(d) {
	            return d.length;
	        });
	
	        this.legend_el.exit().remove();
	        return [1, max_length];
	    },
	
	    draw_legend_icon: function(size, selector) {
	        /*
	         * Draw OHLC icon next to legend text
	         * Drawing the icon like this means we can avoid scaling when we
	         * already know what the size of the mark is in pixels
	         */
	        var height = size;
	        var width = size / 2;
	        var bottom_y_offset = size * 3 / 4;
	        var top_y_offset = size / 4;
	        if(this.model.get("marker") === "candle") {
	            selector.selectAll(".stick_head").attr("d",
	                this.head_path_candle(width/2));
	            selector.selectAll(".stick_tail").attr("d",
	                this.tail_path_candle(bottom_y_offset, width/2));
	            selector.selectAll(".stick_body").attr("d",
	                this.body_path_candle(width * -1/2, top_y_offset, width,
	                                      height / 2));
	        } else { // bar
	            selector.selectAll(".stick_head").attr("d",
	                this.head_path_bar(width * -1/2, bottom_y_offset, width/2));
	            selector.selectAll(".stick_tail").attr("d",
	                this.tail_path_bar(top_y_offset, width/2));
	            selector.selectAll(".stick_body").attr("d",
	                this.body_path_bar(height));
	        }
	    }
	});
	
	module.exports = {
	    OHLC: OHLC
	};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var BarsModel = markmodel.MarkModel.extend({
	
	    defaults: function() {
	        return _.extend(markmodel.MarkModel.prototype.defaults(), {
	            _model_name: "BarsModel",
	            _view_name: "Bars",
	            x: [],
	            y: [],
	            color: null,
	            scales_metadata: {
	                x: { orientation: "horizontal", dimension: "x" },
	                y: { orientation: "vertical", dimension: "y" },
	                color: { dimension: "color" }
	            },
	            color_mode: "auto",
	            type: "stacked",
	            colors: d3.scale.category10().range(),
	            padding: 0.05,
	            stroke: null,
	            base: 0.0,
	            opacities: [],
	            orientation: "vertical",
	            align: "center"
	        });
	    },
	
	    initialize: function() {
	        BarsModel.__super__.initialize.apply(this, arguments);
	        this.is_y_2d = false;
	        this.on_some_change(["x", "y", "base"], this.update_data, this);
	        this.on("change:color", function() {
	            this.update_color();
	            this.trigger("colors_updated");
	        }, this);
	        // FIXME: replace this with on("change:preserve_domain"). It is not done here because
	        // on_some_change depends on the GLOBAL backbone on("change") handler which
	        // is called AFTER the specific handlers on("change:foobar") and we make that
	        // assumption.
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.update_data();
	        this.update_color();
	        this.update_domains();
	    },
	
	    update_data: function() {
	        var x_data = this.get_typed_field("x");
	        var y_data = this.get_typed_field("y");
	        var scales = this.get("scales");
	        var x_scale = scales.x;
	        var y_scale = scales.y;
	        y_data = (y_data.length === 0 || y_data[0] instanceof Array) ?
	            y_data : [y_data];
	        var that = this;
	
	        this.base_value = this.get("base");
	        if(this.base_value === undefined || this.base_value === null) {
	            this.base_value = 0;
	        }
	
	        if (x_data.length === 0 || y_data.length === 0) {
	            this.mark_data = [];
	            this.is_y_2d = false;
	        }
	        else {
	            x_data = x_data.slice(0, d3.min(y_data.map(function(d) {
	                return d.length;
	            })));
	            this.mark_data = x_data.map(function (x_elem, index) {
	                var data = {};
	                var y0 = that.base_value;
	                var y0_neg = that.base_value;
	                var y0_left = that.base_value;
	                data.key = x_elem;
	                data.values = y_data.map(function(y_elem, y_index) {
	                    var value = y_elem[index] - that.base_value;
	                    var positive = (value >= 0);
	                    return {
	                        index: index,
	                        sub_index: y_index,
	                        x: x_elem,
	                        // In the following code, the values y0, y1 are
	                        // only relevant for a stacked bar chart. grouped
	                        // bars only deal with base_value and y.
	
	                        // y0 is the value on the y scale for the upper end
	                        // of the bar.
	                        y0: (positive) ? y0 : (function() {
	                            y0_left += value;
	                            return y0_left
	                        }()),
	                        // y1 is the value on the y scale for the lower end
	                        // of the bar.
	                        y1: (positive) ? (y0 += value) : (function() {
	                            y0_neg += value;
	                            return (y0_neg - value);
	                        }()),
	                        // y_ref is the value on the y scale which represents
	                        // the height of the bar
	                        y_ref: value,
	                        y: y_elem[index],
	                    };
	                });
	                // pos_max is the maximum positive value for a group of
	                // bars.
	                data.pos_max = y0;
	                // neg_max is the minimum negative value for a group of
	                // bars.
	                data.neg_max = y0_neg;
	                return data;
	            });
	            this.is_y_2d = (this.mark_data[0].values.length > 1);
	            this.update_color();
	        }
	        this.update_domains();
	        this.trigger("data_updated");
	    },
	
	    get_data_dict: function(data, index, sub_index) {
	        return data;
	    },
	
	    update_color: function() {
	        //Function to update the color attribute for the data. In scatter,
	        //this is taken care of by the update_data itself. This is separate
	        //in bars because update data does a lot more complex calculations
	        //which should be avoided when possible
	        if(!this.mark_data) {
	            return;
	        }
	        var color = this.get_typed_field("color");
	        var color_scale = this.get("scales").color;
	        var color_mode = this.get("color_mode");
	        var apply_color_to_groups = ((color_mode === "group") ||
	                                     (color_mode === "auto" && !(this.is_y_2d)));
	        this.mark_data.forEach(function(single_bar_d, bar_grp_index) {
	            single_bar_d.values.forEach(function(bar_d, bar_index) {
	                bar_d.color_index = (apply_color_to_groups) ? bar_grp_index : bar_index;
	                bar_d.color = color[bar_d.color_index];
	            });
	        });
	        if(color_scale && color.length > 0) {
	                if(!this.get("preserve_domain").color) {
	                    color_scale.compute_and_set_domain(color, this.model_id + "_color");
	                } else {
	                    color_scale.del_domain([], this.model_id + "_color");
	                }
	        }
	    },
	
	    update_domains: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        var scales = this.get("scales");
	        var orient = this.get("orientation");
	        var dom_scale = scales.x;
	        var range_scale = scales.y;
	
	        if(!this.get("preserve_domain").x) {
	            dom_scale.compute_and_set_domain(this.mark_data.map(function(elem) {
	                return elem.key;
	            }), this.model_id + "_x");
	        }
	        else {
	            dom_scale.del_domain([], this.model_id + "_x");
	        }
	
	        if(!this.get("preserve_domain").y) {
	            if(this.get("type") === "stacked") {
	                range_scale.compute_and_set_domain([d3.min(this.mark_data, function(c) { return c.neg_max; }),
	                                                d3.max(this.mark_data, function(c) { return c.pos_max; }), this.base_value],
	                                                this.model_id + "_y");
	            } else {
	                var min = d3.min(this.mark_data,
	                    function(c) {
	                        return d3.min(c.values, function(val) {
	                            return val.y_ref;
	                        });
	                    });
	                var max = d3.max(this.mark_data, function(c) {
	                    return d3.max(c.values, function(val) {
	                        return val.y_ref;
	                    });
	                });
	                range_scale.compute_and_set_domain([min, max, this.base_value], this.model_id + "_y");
	            }
	        } else {
	            range_scale.del_domain([], this.model_id + "_y");
	        }
	    }
	});
	
	
	module.exports = {
	    BarsModel: BarsModel
	};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var _ = __webpack_require__(9);
	var d3 = __webpack_require__(8);
	var utils = __webpack_require__(10);
	var mark = __webpack_require__(15);
	
	var Hist = mark.Mark.extend({
	
	    render: function() {
	        var base_creation_promise = Hist.__super__.render.apply(this);
	        this.bars_selected = [];
	
	        this.display_el_classes = ["rect", "legendtext"];
	
	        var that = this;
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	
	        return base_creation_promise.then(function() {
	            that.event_listeners = {};
	            that.process_interactions();
	            that.create_listeners();
	            that.draw();
	            that.update_selected(that.model, that.model.get("selected"));
	        });
	    },
	
	    set_ranges: function() {
	        var x_scale = this.scales.sample;
	        if(x_scale) {
	            x_scale.set_range(this.parent.padded_range("x", x_scale.model));
	        }
	        var y_scale = this.scales.count;
	        if(y_scale) {
	            y_scale.set_range(this.parent.padded_range("y", y_scale.model));
	        }
	    },
	
	    set_positional_scales: function() {
	        // In the case of Hist, a change in the "sample" scale triggers
	        // a full "update_data" instead of a simple redraw.
	        var x_scale = this.scales.sample,
	            y_scale = this.scales.count;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.model.update_data(); }
	        });
	        this.listenTo(y_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	    },
	
	    create_listeners: function() {
	        Hist.__super__.create_listeners.apply(this);
	        this.d3el.on("mouseover", _.bind(function() { this.event_dispatcher("mouse_over"); }, this))
	            .on("mousemove", _.bind(function() { this.event_dispatcher("mouse_move"); }, this))
	            .on("mouseout", _.bind(function() { this.event_dispatcher("mouse_out"); }, this));
	
	        this.listenTo(this.model, "change:tooltip", this.create_tooltip, this);
	        this.listenTo(this.model, "data_updated", this.draw, this);
	        this.listenTo(this.model, "change:colors",this.update_colors,this);
	        this.model.on_some_change(["stroke", "opacities"], this.update_stroke_and_opacities, this);
	        this.listenTo(this.model, "change:selected", this.update_selected, this);
	        this.listenTo(this.model, "change:interactions", this.process_interactions);
	        this.listenTo(this.parent, "bg_clicked", function() {
	            this.event_dispatcher("parent_clicked");
	        });
	    },
	
	    process_interactions: function() {
	        var interactions = this.model.get("interactions");
	        if(_.isEmpty(interactions)) {
	            //set all the event listeners to blank functions
	            this.reset_interactions();
	        } else {
	            if(interactions.click !== undefined &&
	              interactions.click !== null) {
	                if(interactions.click === "tooltip") {
	                    this.event_listeners.element_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                } else if (interactions.click === "select") {
	                    this.event_listeners.parent_clicked = this.reset_selection;
	                    this.event_listeners.element_clicked = this.bar_click_handler;
	                }
	            } else {
	                this.reset_click();
	            }
	            if(interactions.hover !== undefined &&
	              interactions.hover !== null) {
	                if(interactions.hover === "tooltip") {
	                    this.event_listeners.mouse_over = this.refresh_tooltip;
	                    this.event_listeners.mouse_move = this.move_tooltip;
	                    this.event_listeners.mouse_out = this.hide_tooltip;
	                }
	            } else {
	                this.reset_hover();
	            }
	            if(interactions.legend_click !== undefined &&
	              interactions.legend_click !== null) {
	                if(interactions.legend_click === "tooltip") {
	                    this.event_listeners.legend_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                }
	            } else {
	                this.event_listeners.legend_clicked = function() {};
	            }
	            if(interactions.legend_hover !== undefined &&
	              interactions.legend_hover !== null) {
	                if(interactions.legend_hover === "highlight_axes") {
	                    this.event_listeners.legend_mouse_over = _.bind(this.highlight_axes, this);
	                    this.event_listeners.legend_mouse_out = _.bind(this.unhighlight_axes, this);
	                }
	            } else {
	                this.reset_legend_hover();
	            }
	        }
	    },
	
	    update_colors: function(model, colors) {
	        this.d3el.selectAll(".bargroup").selectAll("rect")
	          .style("fill", this.get_colors(0));
	        if (model.get("labels") && colors.length > 1) {
	            this.d3el.selectAll(".bargroup").selectAll("text")
	              .style("fill", this.get_colors(1));
	        }
	        if (this.legend_el) {
	            this.legend_el.selectAll("rect")
	              .style("fill", this.get_colors(0));
	            this.legend_el.selectAll("text")
	              .style("fill", this.get_colors(0));
	        }
	    },
	
	    update_stroke_and_opacities: function() {
	        var stroke = this.model.get("stroke");
	        var opacities = this.model.get("opacities");
	        this.d3el.selectAll(".rect")
	          .style("stroke", stroke)
	          .style("opacity", function(d, i) {
	                return opacities[i];
	          });
	    },
	
	    calculate_bar_width: function() {
	        var x_scale = this.scales.sample;
	        var bar_width = (x_scale.scale(this.model.max_x) -
	                         x_scale.scale(this.model.min_x)) / this.model.num_bins;
	        if (bar_width >= 10) {
	            bar_width -= 2;
	        }
	        return bar_width;
	    },
	
	    relayout: function() {
	        this.set_ranges();
	
	        var x_scale = this.scales.sample,
	            y_scale = this.scales.count;
	        this.d3el.selectAll(".bargroup")
	            .attr("transform", function(d) {
	              return "translate(" + x_scale.scale(d.x) +
	                              "," + y_scale.scale(d.y) + ")";
	            });
	        var bar_width = this.calculate_bar_width();
	        this.d3el.selectAll(".bargroup").select("rect")
	          .transition("relayout")
	          .duration(this.parent.model.get("animation_duration"))
	          .attr("x", 2)
	          .attr("width", bar_width)
	          .attr("height", function(d) {
	              return y_scale.scale(0) - y_scale.scale(d.y);
	          });
	    },
	
	    draw: function() {
	        this.set_ranges();
	        var colors = this.model.get("colors");
	        var fill_color = colors[0];
	        var select_color = (colors.length > 1) ? colors[1] : "red";
	
	        var indices = [];
	        this.model.mark_data.forEach(function(d, i) {
	            indices.push(i);
	        });
	
	        var x_scale = this.scales.sample,
	            y_scale = this.scales.count;
	        var that = this;
	        var bar_width = this.calculate_bar_width();
	        var bar_groups = this.d3el.selectAll(".bargroup")
	            .data(this.model.mark_data);
	
	        var bars_added = bar_groups.enter()
	          .append("g")
	          .attr("class","bargroup");
	
	        // initial values for width and height are set for animation
	        bars_added.append("rect")
	          .attr("class", "rect")
	          .attr("x", 2)
	          .attr("width", 0)
	          .attr("height", 0);
	
	        bar_groups.attr("transform", function(d) {
	              return "translate(" + x_scale.scale(d.x) + "," +
	                                    y_scale.scale(d.y) + ")";
	          });
	
	        bar_groups.select(".rect")
	          .style("fill", fill_color)
	          .on("click", function(d, i) {
	              return that.event_dispatcher("element_clicked", {
	                  "data": d, "index": i
	              });
	          })
	          .attr("id", function(d, i) { return "rect" + i; })
	          .transition("draw")
	          .duration(this.parent.model.get("animation_duration"))
	          .attr("width", bar_width)
	          .attr("height", function(d) {
	              return y_scale.scale(0) - y_scale.scale(d.y);
	          });
	
	        bar_groups.exit().remove();
	
	        //bin_pixels contains the pixel values of the start points of each
	        //of the bins and the end point of the last bin.
	        this.bin_pixels = this.model.x_bins.map(function(el) {
	            return x_scale.scale(el) + x_scale.offset;
	        });
	        // pixel coords contains the [x0, x1] and [y0, y1] of each bin
	        this.pixel_coords = this.model.mark_data.map(function(d) {
	            var x = x_scale.scale(d.x);
	            return [[x, x+bar_width], [0, d.y].map(y_scale.scale)];
	        });
	        this.update_stroke_and_opacities();
	    },
	
	    bar_click_handler: function (args) {
	        var data = args.data;
	        var index = args.index;
	        //code repeated from bars. We should unify the two.
	        var that = this;
	        var idx = this.bars_selected;
	        var selected = idx ? utils.deepCopy(idx) : [];
	        // index of bar i. Checking if it is already present in the list.
	        var elem_index = selected.indexOf(index);
	        // Replacement for "Accel" modifier.
	        var accelKey = d3.event.ctrlKey || d3.event.metaKey;
	        if(elem_index > -1 && accelKey) {
	            // if the index is already selected and if accel key is
	            // pressed, remove the element from the list
	            selected.splice(elem_index, 1);
	        } else {
	            if(d3.event.shiftKey) {
	                //If shift is pressed and the element is already
	                //selected, do not do anything
	                if(elem_index > -1) {
	                    return;
	                }
	                //Add elements before or after the index of the current
	                //bar which has been clicked
	                var min_index = (selected.length !== 0) ?
	                    d3.min(selected) : -1;
	                var max_index = (selected.length !== 0) ?
	                    d3.max(selected) : that.model.mark_data.length;
	                if(index > max_index){
	                    _.range(max_index+1, index+1).forEach(function(i) {
	                        selected.push(i);
	                    });
	                } else if(index < min_index){
	                    _.range(index, min_index).forEach(function(i) {
	                        selected.push(i);
	                    });
	                }
	            } else if(accelKey) {
	                //If accel is pressed and the bar is not already selcted
	                //add the bar to the list of selected bars.
	                selected.push(index);
	            }
	            // updating the array containing the bar indexes selected
	            // and updating the style
	            else {
	                //if accel is not pressed, then clear the selected ones
	                //and set the current element to the selected
	                selected = [];
	                selected.push(index);
	            }
	        }
	        this.bars_selected = selected;
	        this.model.set("selected", ((selected.length === 0) ? null :
	                                     this.calc_data_indices(selected)),
	                                    {updated_view: this});
	        this.touch();
	        if(!d3.event) {
	            d3.event = window.event;
	        }
	        var e = d3.event;
	        if(e.cancelBubble !== undefined) { // IE
	            e.cancelBubble = true;
	        }
	        if(e.stopPropagation) {
	            e.stopPropagation();
	        }
	        e.preventDefault();
	    },
	
	    draw_legend: function(elem, x_disp, y_disp, inter_x_disp, inter_y_disp) {
	        this.legend_el = elem.selectAll(".legend" + this.uuid)
	            .data([this.model.mark_data[0]]);
	
	        var that = this;
	        var rect_dim = inter_y_disp * 0.8;
	        this.legend_el.enter()
	          .append("g")
	            .attr("class", "legend" + this.uuid)
	            .attr("transform", function(d, i) {
	                return "translate(0, " + (i * inter_y_disp + y_disp)  + ")";
	            })
	            .on("mouseover", _.bind(function() {
	               this.event_dispatcher("legend_mouse_over");
	            }, this))
	            .on("mouseout", _.bind(function() {
	               this.event_dispatcher("legend_mouse_out");
	            }, this))
	            .on("click", _.bind(function() {
	               this.event_dispatcher("legend_clicked");
	            }, this))
	          .append("rect")
	            .style("fill", function(d, i) {
	                return that.get_colors(i);
	            })
	            .attr({
	                x: 0,
	                y: 0,
	                width: rect_dim,
	                height: rect_dim
	            });
	
	        this.legend_el.append("text")
	          .attr("class","legendtext")
	          .attr("x", rect_dim * 1.2)
	          .attr("y", rect_dim / 2)
	          .attr("dy", "0.35em")
	          .text(function(d, i) {
	              return that.model.get("labels")[i];
	          })
	          .style("fill", function(d,i) {
	              return that.get_colors(i);
	          });
	
	        var max_length = d3.max(this.model.get("labels"), function(d) {
	            return d.length;
	        });
	
	        this.legend_el.exit().remove();
	        return [1, max_length];
	    },
	
	    reset_colors: function(index, color) {
	        var rects = this.d3el.selectAll("#rect"+index);
	        rects.style("fill", color);
	    },
	
	    update_selected: function(model, value) {
	        if(value === undefined || value === null || value.length === 0) {
	            //reset the color of everything if selected is blank
	            this.update_selected_colors([]);
	            return;
	        } else {
	            var indices = this.calc_bar_indices_from_data_idx(value);
	            this.update_selected_colors(indices);
	        }
	    },
	
	    update_selected_colors: function(indices) {
	        // listen to changes of selected and draw itself
	        var colors = this.model.get("colors");
	        var select_color = colors.length > 1 ? colors[1] : "red";
	        var fill_color = colors[0];
	        var bars_sel = this.d3el.selectAll(".bargroup");
	        var that = this;
	        _.difference(_.range(0, this.model.num_bins), indices)
	            .forEach(function(d) {
	                that.d3el.selectAll("#rect" + d).style("fill", fill_color);
	            });
	        indices.forEach(function(d) {
	            that.d3el.selectAll("#rect" + d).style("fill", select_color);
	        });
	    },
	
	    invert_point: function(pixel) {
	        // Sets the selected to the data contained in the bin closest
	        // to the value of the pixel.
	        // Used by Index Selector.
	        if(pixel === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            return;
	        }
	
	        var bar_width = this.calculate_bar_width();
	        var x_scale = this.scales.sample;
	
	        //adding "bar_width / 2.0" to bin_pixels as we need to select the
	        //bar whose center is closest to the current location of the mouse.
	        var abs_diff = this.bin_pixels.map(function(elem) {
	            return Math.abs(elem + bar_width / 2.0 - pixel);
	        });
	        var sel_index = abs_diff.indexOf(d3.min(abs_diff));
	        this.model.set("selected", this.calc_data_indices([sel_index]));
	        this.touch();
	    },
	
	    selector_changed: function(point_selector, rect_selector) {
	        if(point_selector === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            return [];
	        }
	        var pixels = this.pixel_coords;
	        var indices = _.range(pixels.length);
	        var selected_bins = _.filter(indices, function(index) {
	            return rect_selector(pixels[index]);
	        });
	        this.model.set("selected", this.calc_data_indices(selected_bins));
	        this.touch();
	    },
	
	    calc_data_indices: function(indices) {
	        //input is a list of indices corresponding to the bars. Output is
	        //the list of indices in the data
	        var intervals = this.reduce_intervals(indices);
	        if(intervals.length === 0) {
	            return [];
	        }
	
	        var x_data = this.model.get_typed_field("sample");
	        var num_intervals = intervals.length;
	        var selected = _.filter(_.range(x_data.length), function(index) {
	            var elem = x_data[index];
	            var iter = 0;
	            for(iter=0; iter < num_intervals; iter++) {
	                if(elem <= intervals[iter][1] && elem >= intervals[iter][0]) {
	                    return true;
	                }
	            }
	            return false;
	        });
	        return selected;
	    },
	
	    reduce_intervals: function(indices) {
	        //for a series of indices, reduces them to the minimum possible
	        //intervals on which the search can be performed.
	        //return value is an array of arrays containing the start and end
	        //points of the intervals represented by the indices.
	        var intervals = [];
	        if(indices.length !== 0) {
	            indices.sort();
	            var start_index = indices[0],
	                end_index = indices[0];
	            var iter = 1;
	            for(; iter < indices.length; iter++) {
	                if(indices[iter] === (end_index + 1)) {
	                    end_index++;
	                } else {
	                    intervals.push([this.model.x_bins[start_index],
	                                    this.model.x_bins[end_index + 1]]);
	                    start_index = end_index = indices[iter];
	                }
	            }
	            intervals.push([this.model.x_bins[start_index],
	                            this.model.x_bins[end_index + 1]]);
	        }
	        return intervals;
	    },
	
	    calc_data_indices_from_data_range: function(start_pixel, end_pixel) {
	        //Input is pixel values and output is the list of indices for which
	        //the `sample` value lies in the interval
	        var x_scale = this.scales.sample;
	
	        var idx_start = d3.max([0, d3.bisectLeft(this.bin_pixels, start_pixel) - 1]);
	        var idx_end = d3.min([this.model.num_bins, d3.bisectRight(this.bin_pixels, end_pixel)]);
	
	        var x_data = this.model.get_typed_field("sample");
	        var that = this;
	        return _.filter(_.range(x_data.length), function(iter) {
	            return (x_data[iter] >= that.model.x_bins[idx_start] &&
	                    x_data[iter] <= that.model.x_bins[idx_end]);
	        });
	    },
	
	    calc_bar_indices_from_data_idx: function(selected) {
	        //function to calculate bar indices for a given list of data
	        //indices
	        var x_data = this.model.get_typed_field("sample");
	        var data = selected.map(function(idx) {
	            return x_data[idx];
	        });
	        var bar_indices = [];
	        for(var iter = 0; iter < data.length; iter++) {
	            //x_bins is of length num_bars+1. So if the max element is
	            //selected, we get a bar index which is equal to num_bars.
	            var index = Math.min(_.indexOf(this.model.x_bins, data[iter], true),
	                                 this.model.x_bins.length - 2);
	            //if the data point is not one of the bins, then find the index
	            //where it is to be inserted.
	            if(index === -1) {
	                index = _.sortedIndex(this.model.x_bins, data[iter]) - 1;
	            }
	            bar_indices.push(index);
	        }
	        bar_indices.sort();
	        bar_indices = _.uniq(bar_indices, true);
	        return bar_indices;
	    },
	
	    reset_selection: function() {
	        this.bars_selected = [];
	        this.model.set("selected", null);
	        this.touch();
	    }
	});
	
	module.exports = {
	    Hist: Hist
	};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var OHLCModel = markmodel.MarkModel.extend({
	
	    defaults: function() {
	        return _.extend(markmodel.MarkModel.prototype.defaults(), {
	            _model_name: "OHLCModel",
	            _view_name: "OHLC",
	
	            x: [],
	            y: [],
	            scales_metadata: {
	                x: { orientation: "horizontal", dimension: "x" },
	                y: { orientation: "vertical", dimension: "y" }
	            },
	            stroke: null,
	            box_fill_color: "dodgerblue",
	            outlier_fill_color: "gray",
	            opacities: []
	        });
	    },
	
	    initialize: function() {
	        OHLCModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["x", "y"], this.update_data, this);
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.on("change:format", this.update_format, this);
	        this.px = { o: -1, h: -1, l: -1, c: -1 };
	        this.mark_data = [];
	        this.display_el_classes = ["stick_body"] ;
	        this.update_data();
	        this.update_domains();
	        this.update_format();
	    },
	
	    update_format: function() {
	        this.update_data();
	        this.trigger("format_updated");
	    },
	
	    update_data: function() {
	        var x_data = this.get_typed_field("x");
	        var y_data = this.get_typed_field("y");
	        var format = this.get("format");
	
	        // Local private function to report errors in format
	        function print_bad_format(format) {
	            if(console) {
	                console.error("Invalid OHLC format: '" + format + "'");
	            }
	        }
	
	        // Generate positional map and check for duplicate characters
	        this.px = format.toLowerCase().split("")
	            .reduce(function(dict, key, val) {
	                if(dict[key] !== -1) {
	                    print_bad_format(format);
	                    x_data = [];
	                    y_data = [];
	                }
	                dict[key] = val;
	                return dict;
	            }, { o: -1, h: -1, l: -1, c: -1 });
	
	        // We cannot have high without low and vice versa
	        if((this.px.h !== -1 && this.px.l === -1) ||
	           (this.px.h === -1 && this.px.l !== -1) ||
	            format.length < 2 || format.length > 4)
	        {
	            print_bad_format(format);
	            x_data = [];
	            y_data = [];
	        } else {
	            // Verify that OHLC data is valid
	            var that = this;
	            var px = this.px;
	            if((this.px.h !== -1 &&
	               !y_data.every(function(d) {
	                return (d[px.h] === d3.max(d) &&
	                        d[px.l] === d3.min(d)); })) || !y_data.every(function(d) {
	                return d.length === format.length; }))
	            {
	                x_data = [];
	                y_data = [];
	                if(console) console.error("Invalid OHLC data");
	            }
	        }
	
	        // Make x and y data the same length
	        if(x_data.length > y_data.length) {
	            x_data = x_data.slice(0, y_data.length);
	        } else if(x_data.length < y_data.length) {
	            y_data = y_data.slice(0, x_data.length);
	        }
	
	        this.mark_data = _.zip(x_data, y_data);
	        this.mark_data.forEach(function(elem, i) { elem.index = i;});
	        this.update_domains();
	        this.trigger("data_updated");
	    },
	
	    update_domains: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        var that = this;
	        var scales = this.get("scales");
	        var x_scale = scales.x, y_scale = scales.y;
	        var min_x_dist = Number.POSITIVE_INFINITY;
	        var max_y_height = 0, dist = 0, height = 0;
	
	        /*
	         * Compute the minimum x distance between the data points. We will
	         * use this to pad either side of the x domain.
	         * Also compute the maximum height of all of the marks (i.e. maximum
	         * distance from high to low) and use that to pad the y domain.
	         */
	        for(var i = 0; i < this.mark_data.length; i++) {
	            if(i > 0) {
	                dist = this.mark_data[i][0] - this.mark_data[i-1][0];
	                if(dist < min_x_dist) min_x_dist = dist;
	            }
	            height = this.mark_data[i][this.px.h] -
	                        this.mark_data[i][this.px.l];
	            if(height > max_y_height) max_y_height = height;
	        }
	        if(this.mark_data.length < 2) {
	            min_x_dist = 0;
	        }
	
	        var min, max;
	        // X Scale
	        if((!this.get("preserve_domain").x) && this.mark_data.length !== 0) {
	            if(x_scale.type === "ordinal") {
	                x_scale.compute_and_set_domain(
	                    this.mark_data.map(function(d) { return d[0]; })
	                );
	            } else {
	                min = d3.min(this.mark_data.map(function(d) {
	                    return d[0];
	                }));
	                max = d3.max(this.mark_data.map(function(d) {
	                    return d[0];
	                }));
	                if(max instanceof Date) max = max.getTime();
	                x_scale.set_domain([min - min_x_dist/2, max + min_x_dist/2], this.model_id + "_x");
	            }
	        } else {
	            x_scale.del_domain([], this.model_id + "_x");
	        }
	
	        // Y Scale
	        if((!this.get("preserve_domain").y) && this.mark_data.length !== 0) {
	            // Remember that elem contains OHLC data here so we cannot use
	            // compute_and_set_domain
	            var top = this.px.h;
	            var bottom = this.px.l;
	            if(top === -1 || bottom === -1) {
	                top = this.px.o;
	                bottom = this.px.c;
	            }
	            min = d3.min(this.mark_data.map(function(d) {
	                return (d[1][bottom] < d[1][top]) ? d[1][bottom] : d[1][top];
	            }));
	            max = d3.max(this.mark_data.map(function(d) {
	                return (d[1][top] > d[1][bottom]) ? d[1][top] : d[1][bottom];
	            }));
	            if(max instanceof  Date) max = max.getTime();
	            y_scale.set_domain([min - max_y_height, max + max_y_height], this.model_id + "_y");
	        } else {
	            y_scale.del_domain([], this.model_id + "_y");
	        }
	    },
	
	    get_data_dict: function(data, index) {
	        var that = this;
	        var return_val ={};
	        return_val.index = index;
	        return_val.x = data.x;
	        ["open", "low", "high", "close"].forEach(function(str) {
	            return_val[str] = data.y[that.px[str.substr(0, 1)]];
	        });
	        return return_val;
	    },
	});
	
	module.exports = {
	    OHLCModel: OHLCModel,
	};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var _ = __webpack_require__(9);
	var d3 = __webpack_require__(8);
	var markmodel = __webpack_require__(12);
	
	var HistModel = markmodel.MarkModel.extend({
	
	    defaults: function() {
	        return _.extend(markmodel.MarkModel.prototype.defaults(), {
	            _model_name: "HistModel",
	            _view_name: "Hist",
	            sample: [],
	            count: [],
	            scales_metadata: {
	                sample: { orientation: "horizontal", dimension: "x" },
	                count: { orientation: "vertical", dimension: "y" }
	            },
	            bins: 10,
	            midpoints: [],
	            colors: d3.scale.category10().range(),
	            stroke: null,
	            opacities: [],
	            normalized: false
	        });
	    },
	
	    initialize: function() {
	        // TODO: should not need to set this.data
	        HistModel.__super__.initialize.apply(this, arguments);
	        this.mark_data = [];
	        // For the histogram, changing the "sample" scale changes the "count" values being plotted.
	        // Hence, on change of the value of "preserve_domain", we must call the "update_data"
	        // function, and not merely "update_domains".
	        this.on_some_change(["bins", "sample", "preserve_domain"], this.update_data, this);
	        this.update_data();
	        this.on("change:normalized", function() { this.normalize_data(true); }, this);
	        this.normalize_data(true);
	    },
	
	    update_data: function() {
	        var x_data = this.get_typed_field("sample");
	        var scales = this.get("scales");
	        var x_scale = scales.sample;
	
	        // TODO: This potentially triggers domain_changed and therefore a
	        // Draw, while update_data is generally followed by a Draw.
	        this.num_bins = this.get("bins");
	        if (x_data.length == 0) {
	            this.mark_data = [];
	            this.x_mid = [];
	            this.count = [];
	            this.x_bins = [];
	        } else {
	            if(!this.get("preserve_domain").sample) {
	                x_scale.compute_and_set_domain(x_data, this.model_id + "_sample");
	            } else {
	                x_scale.del_domain([], this.model_id + "_sample");
	            }
	
	            this.min_x = x_scale.domain[0];
	            this.max_x = x_scale.domain[1];
	
	            var that = this;
	            x_data = x_data.filter(function(d) {
	                return (d <= that.max_x && d >= that.min_x);
	            });
	            var x_data_ind = x_data.map(function (d,i) {
	                return {index: i, value: d};
	            });
	
	            this.x_bins =  this.create_uniform_bins(this.min_x, this.max_x, this.num_bins);
	            this.x_mid = this.x_bins.map(function(d, i) {
	                return 0.5 * (d + that.x_bins[i - 1]);
	            }).slice(1);
	
	            this.mark_data = d3.layout.histogram().bins(this.x_bins).value(function(d) {
	                return d.value;
	            })(x_data_ind);
	            //adding index attribute to mark_data of the model
	            this.mark_data.forEach(function(data, index) { data.index = index; });
	        }
	        this.normalize_data(false);
	
	        this.set("midpoints", this.x_mid);
	        this.set_typed_field("count", this.count);
	
	        this.update_domains();
	        this.save_changes();
	        this.trigger("data_updated");
	    },
	
	    normalize_data: function(save_and_update) {
	
	
	        this.count = this.mark_data.map(function(d) { return d.length; });
	        if (this.get("normalized")) {
	            var x_width = 1;
	            if(this.mark_data.length > 0) {
	                x_width = this.mark_data[0].dx;
	            }
	
	            var sum = this.count.reduce(function(a, b) { return a + b; }, 0);
	            if (sum != 0) {
	                this.count = this.count.map(function(a) { return a / (sum * x_width); });
	            }
	        }
	
	        var that = this;
	        this.mark_data.forEach(function(el, it) { el['y'] = that.count[it]; });
	
	        if (save_and_update) {
	            this.set_typed_field("count", this.count);
	            this.update_domains();
	            this.save_changes();
	            this.trigger("data_updated");
	        }
	    },
	
	    get_data_dict: function(data, index) {
	        var return_dict = {};
	        return_dict.midpoint = this.x_mid[index];
	        return_dict.bin_start = this.x_bins[index];
	        return_dict.bin_end = this.x_bins[index + 1];
	        return_dict.index = index;
	        return_dict.count = this.count[index];
	        return return_dict;
	    },
	
	    update_domains: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        // For histogram, changing the x-scale domain changes a lot of
	        // things including the data which is to be plotted. So the x-domain
	        // change is handled by the update_data function and only the
	        // y-domain change is handled by this function.
	        var y_scale = this.get("scales").count;
	        if(!this.get("preserve_domain").count) {
	            y_scale.set_domain([0, d3.max(this.mark_data, function(d) {
	                return d.y;
	            }) * 1.05], this.model_id + "_count");
	        }
	    },
	
	    create_uniform_bins: function(min_val, max_val, num_bins) {
	        var diff = max_val - min_val;
	        var step_size = (diff) / num_bins;
	        var return_val = [];
	        for(var i=0; i<num_bins; i++) {
	            return_val[i] = min_val+ i * step_size;
	        }
	        return_val[num_bins] = max_val;
	        return return_val;
	    }
	});
	
	module.exports = {
	    HistModel: HistModel
	};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var basemodel = __webpack_require__(13);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var SelectorModel = basemodel.BaseModel.extend({
	
	    defaults: function() {
	        return _.extend(basemodel.BaseModel.prototype.defaults(), {
	            _model_name: "SelectorModel",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	            marks: []
	        });
	    }
	}, {
	    serializers: _.extend({
	        marks: { deserialize: widgets.unpack_models },
	    }, basemodel.BaseModel.serializers)
	});
	
	var OneDSelectorModel = SelectorModel.extend({
	
	    defaults: function() {
	        return _.extend(SelectorModel.prototype.defaults(), {
	            _model_name: "OneDSelectorModel",
	            scale: null
	        });
	    }
	}, {
	    serializers: _.extend({
	        scale: { deserialize: widgets.unpack_models },
	    }, SelectorModel.serializers),
	});
	
	var TwoDSelectorModel = SelectorModel.extend({
	
	    defaults: function() {
	        return _.extend(SelectorModel.prototype.defaults(), {
	            _model_name: "TwoDSelectorModel",
	            x_scale: null,
	            y_scale: null
	        });
	    }
	}, {
	    serializers: _.extend({
	        x_scale: { deserialize: widgets.unpack_models },
	        y_scale: { deserialize: widgets.unpack_models },
	    }, SelectorModel.serializers)
	});
	
	var FastIntervalSelectorModel = OneDSelectorModel.extend({
	
	    defaults: function() {
	        return _.extend(OneDSelectorModel.prototype.defaults(), {
	            _model_name: "FastIntervalSelectorModel",
	            _view_name: "FastIntervalSelector",
	            selected: {},
	            color: null,
	            size: null
	        });
	    },
	});
	
	var IndexSelectorModel = OneDSelectorModel.extend({
	
	    defaults: function() {
	        return _.extend(OneDSelectorModel.prototype.defaults(), {
	            _model_name: "IndexSelectorModel",
	            _view_name: "IndexSelector",
	            selected: {},
	            line_width: 2,
	            color: null
	        });
	    },
	});
	
	var BrushIntervalSelectorModel = OneDSelectorModel.extend({
	
	    defaults: function() {
	        return _.extend(OneDSelectorModel.prototype.defaults(), {
	            _model_name: "BrushIntervalSelectorModel",
	            _view_name: "BrushIntervalSelector",
	            brushing: false,
	            selected: {},
	            color: null,
	            orientation: "horizontal"
	        });
	    }
	});
	
	var BrushSelectorModel = TwoDSelectorModel.extend({
	
	    defaults: function() {
	        return _.extend(TwoDSelectorModel.prototype.defaults(), {
	            _model_name: "BrushSelectorModel",
	            _view_name: "BrushSelector",
	            clear: false,
	            brushing: false,
	            selected_x: {},
	            selected_y: {},
	            color: null
	        });
	    }
	});
	
	var MultiSelectorModel = OneDSelectorModel.extend({
	
	    defaults: function() {
	        return _.extend(OneDSelectorModel.prototype.defaults(), {
	            _model_name: "MultiSelectorModel",
	            _view_name: "MultiSelector",
	            names: [],
	            brushing: false,
	            selected: {},
	            _selected: {},
	            show_names: true
	        });
	    }
	});
	
	var LassoSelectorModel = TwoDSelectorModel.extend({
	
	    defaults: function() {
	        return _.extend(OneDSelectorModel.prototype.defaults(), {
	            _model_name: "LassoSelectorModel",
	            _view_name: "LassoSelector",
	           color: null
	       });
	    }
	});
	
	module.exports = {
	    SelectorModel: SelectorModel,
	    OneDSelectorModel: OneDSelectorModel,
	    TwoDSelectorModel: TwoDSelectorModel,
	    FastIntervalSelectorModel: FastIntervalSelectorModel,
	    IndexSelectorModel: IndexSelectorModel,
	    BrushIntervalSelectorModel: BrushIntervalSelectorModel,
	    BrushSelectorModel: BrushSelectorModel,
	    MultiSelectorModel: MultiSelectorModel,
	    LassoSelectorModel: LassoSelectorModel
	};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var mark = __webpack_require__(15);
	
	var Boxplot = mark.Mark.extend({
	
	    render: function() {
	        var base_creation_promise = Boxplot.__super__.render.apply(this);
	        var that = this;
	
	        return base_creation_promise.then(function() {
	            that.create_listeners();
	            that.draw();
	        }, null);
	    },
	
	    set_ranges: function() {
	        var x_scale = this.scales.x;
	        if(x_scale) {
	            x_scale.set_range(this.parent.padded_range("x", x_scale.model));
	        }
	        var y_scale = this.scales.y;
	        if(y_scale) {
	            y_scale.set_range(this.parent.padded_range("y", y_scale.model));
	        }
	    },
	
	    set_positional_scales: function() {
	
	        var x_scale = this.scales.x;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	
	        var y_scale = this.scales.y;
	        this.listenTo(y_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	    },
	
	    create_listeners: function() {
	        Boxplot.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:stroke", this.update_stroke, this);
	        this.listenTo(this.model, "change:opacities", this.update_opacities, this);
	        this.listenTo(this.model, "change:marker", this.update_marker, this);
	        this.listenTo(this.model, "change:outlier_fill_color", this.update_outlier_fill_color, this);
	        this.listenTo(this.model, "change:box_fill_color", this.update_box_fill_color, this);
	        this.listenTo(this.model, "data_updated", this.draw, this);
	        this.listenTo(this.model, "change:box_width", this.update_box_width, this);
	    },
	
	    update_stroke: function() {
	        var stroke = this.model.get("stroke");
	        this.d3el.selectAll(".boxplot").selectAll("path, rect")
	            .style("stroke", stroke);
	
	        this.d3el.selectAll(".outlier").style("stroke", stroke);
	
	        if (this.legend_el) {
	            this.legend_el.selectAll("path").attr("stroke", stroke);
	            this.legend_el.selectAll("text").style("fill", stroke);
	        }
	    },
	
	    update_outlier_fill_color: function() {
	        this.d3el.selectAll(".outlier")
	               .style("fill", this.model.get("outlier_fill_color"));
	    },
	
	    update_box_fill_color: function() {
	        this.d3el.selectAll(".box")
	                .style("fill", this.model.get("box_fill_color"));
	    },
	
	    update_opacities: function() {
	        var opacities = this.model.get("opacities");
	        this.d3el.selectAll(".boxplot").style("opacity", function(d, i) {
	                                                return opacities[i];
	                                           });
	
	        if (this.legend_el) {
	            this.legend_el.selectAll("path").attr("opacity", function(d, i) {
	                                                    return opacities[i];
	                                                 });
	        }
	    },
	
	    update_marker: function() {
	        var marker = this.model.get("marker");
	        var that = this;
	
	        if (this.legend_el && this.rect_dim) {
	            var legend_data = [
	                (1/4)*that.rect_dim,
	                0,
	                that.rect_dim,
	                (3/4)*that.rect_dim
	            ];
	            // Draw icon for legend
	            this.draw_mark_paths(marker, this.rect_dim/2,
	                this.legend_el, [legend_data]);
	        }
	
	        // Redraw existing marks
	        this.draw_mark_paths(marker, this.calculate_mark_max_width(),
	            this.d3el, this.model.mark_data);
	    },
	
	    get_box_width: function() {
	        var width = this.model.get("box_width");
	
	        // null box_width means auto calculated box width
	        if (!width) {
	            var plotWidth = this.parent.plotarea_width;
	            var maxWidth = plotWidth / 10.0;
	            width = plotWidth / (this.model.mark_data.length + 1) / 1.5;
	            width = Math.min(width, maxWidth);
	        }
	
	        return width;
	    },
	
	    compute_view_padding: function() {
	        //This function sets the padding for the view through the variables
	        //x_padding and y_padding which are view specific paddings in pixel
	        var x_padding = this.get_box_width() / 2.0 + 1;
	        if (x_padding !== this.x_padding) {
	            this.x_padding = x_padding;
	            this.trigger("mark_padding_updated");
	        }
	    },
	
	    update_box_width: function() {
	        this.compute_view_padding();
	        this.draw();
	    },
	
	    update_idx_selected: function(model, value) {
	        this.selected_indices = value;
	        this.apply_styles(value);
	    },
	
	    apply_styles: function(indices) {
	        var all_indices = _.range(this.model.mark_data.length);
	        this.set_default_style(all_indices);
	
	        this.set_style_on_elements(this.selected_style, this.selected_indices);
	        var unselected_indices = (indices === undefined) ?
	            [] : _.difference(all_indices, indices);
	        this.set_style_on_elements(this.unselected_style, unselected_indices);
	    },
	
	    set_style_on_elements: function(style, indices) {
	        if(indices === undefined || indices.length === 0) {
	            return;
	        }
	        var elements = this.d3el.selectAll(".boxplot");
	        elements = elements.filter(function(data, index) {
	            return indices.indexOf(index) != -1;
	        });
	        elements.style(style);
	    },
	
	    set_default_style: function(indices) {
	        if(indices === undefined || indices.length === 0) {
	            return;
	        }
	        var color = this.model.get("color");
	        var stroke = this.model.get("stroke");
	        var opacities = this.model.get("opacities");
	        var elements = this.d3el.selectAll(".boxplot")
	            .filter(function(data, index) {
	                return indices.indexOf(index) != -1;
	            });
	
	        elements.style("fill", function(d) {
	              return (d[0] > d[3] ? color : "none");
	          })
	          .style("opacity", function(d, i) {
	                    return opacities[i];
	                });
	
	        elements.selectAll("path, rect")
	          .style("stroke", stroke);
	
	          elements.selectAll(".outliers").style("stroke", stroke);
	    },
	
	    clear_style: function(style_dict, indices) {
	        var elements = this.d3el.selectAll(".boxplot");
	        if(indices !== undefined) {
	            elements = elements.filter(function(d, index) {
	                return indices.indexOf(index) != -1;
	            });
	        }
	        var clearing_style = {};
	        for(var key in style_dict) {
	            clearing_style[key] = null;
	        }
	        elements.style(clearing_style);
	    },
	
	    style_updated: function(new_style, indices) {
	        this.set_default_style(indices);
	        this.set_style_on_elements(new_style, indices);
	    },
	
	    selected_style_updated: function(model, style) {
	        this.selected_style = style;
	        this.style_updated(style, this.selected_indices);
	    },
	
	    unselected_style_updated: function(model, style) {
	        this.unselected_style = style;
	        var sel_indices = this.selected_indices;
	        var unselected_indices = (sel_indices ?
	            _.range(this.model.mark_data.length)
	                .filter(function(index) {
	                    return sel_indices.indexOf(index) == -1;
	                }): []);
	        this.style_updated(style, unselected_indices);
	    },
	
	    //FIXME: should use the selected_style logic
	    update_selected_colors: function(selected_indices) {
	        var that = this;
	        var stroke = this.model.get("stroke");
	        var selected_stroke = stroke;
	        var boxplot_sel = this.d3el.selectAll(".boxplot")
	            .style("stroke", function(d, i) {
	                return (selected_indices.indexOf(i) > -1) ? selected_stroke : stroke;
	            })
	    },
	
	    selector_changed: function(point_selector, rect_selector) {
	        if(point_selector === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            this.update_selected_colors([])
	            return [];
	        }
	        var pixels = this.pixel_coords;
	        var indices = _.range(pixels.length);
	        var selected = _.filter(indices, function(index) {
	            return rect_selector(pixels[index]);
	        });
	        this.update_selected_colors(selected)
	        this.model.set("selected", selected);
	        this.touch();
	    },
	
	    invert_point: function(pixel) {
	        if(pixel === undefined) {
	            this.update_selected_colors([]);
	            this.model.set("selected", null);
	            this.touch();
	            return;
	        }
	
	        var abs_diff = this.x_pixels.map(function(elem) { return Math.abs(elem - pixel); });
	        var sel_index = abs_diff.indexOf(d3.min(abs_diff));
	
	        this.model.set("selected", [sel_index]);
	        this.update_selected_colors([sel_index]);
	        this.touch();
	        return sel_index;
	    },
	
	    prepareBoxPlots: function () {
	
	        var x_scale = this.scales.x;
	        var y_scale = this.scales.y;
	
	       // convert the domain data to the boxes to be drawn on the screen
	       // find the quantiles, min/max and outliers for the box plot
	        this.plotData = [];
	        for(var i = 0; i<this.model.mark_data.length; ++i) {
	            var values = this.model.mark_data[i];
	
	            var displayValue = {};
	
	            displayValue.x         = x_scale.scale(values[0]);
	            displayValue.boxUpper  = y_scale.scale(d3.quantile(values[1], 0.75));
	            displayValue.boxLower  = y_scale.scale(d3.quantile(values[1], 0.25));
	            displayValue.boxMedian = y_scale.scale(d3.quantile(values[1], 0.5));
	
	            // The domain Y to screen Y is an inverse scale, so be aware of that
	            // The max from the domain Y becomes min on the screen (display) scale
	            var iqr = displayValue.boxLower - displayValue.boxUpper;
	            var lowerBound = displayValue.boxLower + 1.5 * iqr;
	            var upperBound = displayValue.boxUpper - 1.5 * iqr;
	
	            displayValue.outliers = [];
	            displayValue.whiskerMax = Number.MAX_VALUE;
	            displayValue.whiskerMin = Number.MIN_VALUE;
	
	            for (var j=0; j<values[1].length; ++j)  {
	
	               var plotY = y_scale.scale(values[1][j]);
	
	               // Find the outlier
	               if ( plotY > lowerBound || plotY  < upperBound) {
	                    displayValue.outliers.push(plotY);
	               }
	               else {
	                    // Find the whisker points max and min from normal data.
	                    // ( exclude the outliers )
	                    if ( plotY > displayValue.whiskerMin ) {
	                        displayValue.whiskerMin = plotY;
	                    }
	
	                    if ( plotY < displayValue.whiskerMax ) {
	                        displayValue.whiskerMax = plotY;
	                    }
	               }
	            }
	
	            this.plotData.push(displayValue);
	        }
	    },
	
	    draw: function() {
	        this.set_ranges();
	        var x_scale = this.scales.x;
	        // get the visual representation of boxplots
	        this.prepareBoxPlots();
	        var plotData = this.plotData;
	
	        // Draw the visual elements with data which was bound
	        this.draw_mark_paths(".boxplot", this.d3el, plotData);
	        // Keep the pixel coordinates of the boxes, for interactions.
	        this.x_pixels = this.model.mark_data.map(function(el) { return x_scale.scale(el[0]) + x_scale.offset; });
	        var width = this.get_box_width() / 2;
	        this.pixel_coords = plotData.map(function(d) { return [[d.x - width, d.x + width],
	                                                               [d.boxLower, d.boxUpper]] })
	    },
	
	    draw_mark_paths: function(parentClass, selector, plotData) {
	        var that = this;
	
	        var mark_max_width = this.calculate_mark_max_width();
	        var color = this.model.get("color");
	        var boxplot = this.d3el.selectAll(parentClass).data(plotData);
	
	        var fillcolor = this.model.get("box_fill_color");
	        var start_time = this.model.get("start_time");
	        // Create new
	        var new_boxplots = boxplot.enter()
	            .append("g")
	            .attr ("class", "boxplot")
	            .attr ("id", function(d, i) { return "boxplot" + i; });
	
	        ///////////////////////////////////////////////////////////////////
	        //
	        //  We translate the whole element of 'boxplot' to the x location
	        //  and then scale each of these elements with Y scale.
	        //
	        //       ( )    <--- outliers (as circles)
	        //       ( )
	        //
	        //     -------  <--- whisker_max_end (path as the max)
	        //        |
	        //        |     <--- whisker_max (path from top of the box to max)
	        //        |
	        //    ---------
	        //    |       |
	        //    |       |
	        //    |       | <--- box (as a rect)
	        //    |       |
	        //    |       |
	        //    ---------
	        //        |
	        //        |     <--- whisker_min (path from bottom of the box to min)
	        //        |
	        //     -------  <--- whisker_min_end (path at min value)
	        //
	        ///////////////////////////////////////////////////////////////////
	
	        new_boxplots.append("path").attr("class", "whisker_max");
	        new_boxplots.append("path").attr("class", "whisker_max_end");
	        new_boxplots.append("path").attr("class", "whisker_min");
	        new_boxplots.append("path").attr("class", "whisker_min_end");
	        new_boxplots.append("rect").attr("class", "box");
	        new_boxplots.append("path").attr("class", "median_line");
	        new_boxplots.append("g").attr("class", "outliers");
	
	        var xOffset = 0;
	        var scaleX = this.scales.x;
	        if (scaleX.model.type === "ordinal") {
	            xOffset = scaleX.scale.rangeBand() / 2;
	        }
	
	        selector.selectAll(".boxplot")
	            .style("stroke", this.model.get("stroke"))
	            .style("opacity", color)
	            .attr ("transform", function (d, i) {
	                return "translate(" + (d.x + xOffset) + ", 0)";
	            });
	
	       //Box
	        var width = this.get_box_width();
	
	        selector.selectAll(".box")
	            .style("fill", fillcolor)
	            .attr("x", -width /2)
	            .attr("width", width)
	            .attr("y", function(d, i) {
	                return d.boxUpper;
	            })
	            .attr("height", function (d, i) {
	                return (d.boxLower - d.boxUpper);
	            });
	
	        //Median line
	        selector.selectAll(".median_line")
	            .style("stroke-width", 2)
	            .attr("d", function(d, i) {
	
	            var x = 0;
	            var medianY = d.boxMedian;
	
	            return  "M"  + (x - width/2) + "," +
	                    medianY +  " L" + (x + width /2)  + "," +  medianY;
	          });
	
	          //Max and Min Whiskers
	          //Max to top of the Box
	          selector.selectAll(".whisker_max")
	              .attr("d", function(d, i) {
	
	              var x = 0;
	              // The price points are sorted so the last element is the max
	              var maxY = d.whiskerMax;
	              var boxY = d.boxUpper;
	
	              return "M"  + x + "," +  maxY +  " L" + x + "," +  boxY;
	           }).attr("stroke-dasharray", function(d, i) {
	              return  "5,5";
	           });
	
	          selector.selectAll(".whisker_max_end")
	              .attr("d", function(d, i) {
	
	              var x = 0;
	              // The price points are sorted, so 1st element is min
	              var maxY = (d.whiskerMax);
	
	              return "M"  + (x - width/2) + "," +  maxY +  " L" + (x + width/2) + "," +  maxY;
	           });
	
	          //Min to the bottom of the box
	          //Max to top of the Box
	          selector.selectAll(".whisker_min")
	              .attr("d", function(d, i) {
	
	              var x = 0;
	              // The price points are sorted, so 1st element is min
	              var minY = (d.whiskerMin);
	              var boxY = (d.boxLower);
	
	              return "M"  + x + "," +  minY +  " L" + x + "," +  boxY;
	          }).attr("stroke-dasharray", function(d, i) {
	              return  "5,5";
	          });
	
	          selector.selectAll(".whisker_min_end")
	              .attr("d", function(d, i) {
	
	              var x = 0;
	              // The price points are sorted, so 1st element is min
	              var minY = (d.whiskerMin);
	
	              return "M"  + (x - width/2) + "," +  minY +  " L" + (x + width/2) + "," +  minY;
	          });
	
	          // Add the outliers group
	          var outliers = selector.selectAll(".outliers").selectAll("circle")
	              .data(function(d) { return d.outliers;});
	
	          //Individual outlier drawing spec
	          outliers.enter().append("circle").attr("class", "outlier");
	
	          selector.selectAll(".outlier")
	              .style("fill", this.model.get("outlier_fill_color"))
	              .attr("class", "outlier")
	              .attr("cx", 0)
	              .attr("r", 3)
	              .attr("cy", function(d) {
	                return (d);
	              });
	
	          outliers.exit().remove();
	
	          boxplot.exit().remove();
	
	          this.apply_styles(this.selected_indices);
	    },
	
	    calculate_mark_max_width: function() {
	
	        var that = this;
	        var min_distance = Infinity;
	
	        var x_scale = this.scales.x;
	        for(var i = 1; i < that.model.mark_data.length; i++) {
	            var dist = x_scale.scale(that.model.mark_data[i][0]) -
	                       x_scale.scale(that.model.mark_data[i-1][0]);
	            dist = (dist < 0) ? (-1*dist) : dist;
	            if(dist < min_distance) min_distance = dist;
	        }
	
	        var mark_width = 0;
	        if(min_distance == Infinity) {
	            mark_width = (x_scale.scale(this.model.max_x) -
	                          x_scale.scale(this.model.min_x)) / 2;
	        } else {
	            mark_width = min_distance;
	        }
	
	        return mark_width;
	    },
	
	    relayout: function() {
	        Boxplot.__super__.relayout.apply(this);
	        this.set_ranges();
	        this.compute_view_padding();
	        this.d3el.select(".intselmouse")
	            .attr("width", this.width)
	            .attr("height", this.height);
	
	        // We have to redraw every time that we relayout
	        this.draw();
	    },
	
	    draw_legend: function(elem, x_disp, y_disp, inter_x_disp, inter_y_disp) {
	        var stroke = this.model.get("stroke");
	        var colors = this.model.get("colors");
	        this.rect_dim = inter_y_disp * 0.8;
	        var that = this;
	
	        this.legend_el = elem.selectAll(".legend" + this.uuid)
	                              .data([this.model.mark_data]);
	
	        var leg = this.legend_el.enter().append("g")
	            .attr("transform", function(d, i) {
	                return "translate(0, " + (i * inter_y_disp + y_disp) + ")";
	            })
	            .attr("class", "legend" + this.uuid)
	            .on("mouseover", _.bind(this.highlight_axes, this))
	            .on("mouseout", _.bind(this.unhighlight_axes, this));
	
	        // Add stroke color and set position
	        leg.selectAll("path")
	            .attr("stroke", stroke)
	            .attr("transform", "translate(" + (that.rect_dim/2) + ",0)");
	
	        // Draw icon and text
	        // this.draw_legend_icon(that.rect_dim, leg);
	        this.legend_el.append("text")
	            .attr("class", "legendtext")
	            .attr("x", that.rect_dim * 1.2)
	            .attr("y", that.rect_dim / 2)
	            .attr("dy", "0.35em")
	            .text(function(d, i) { return that.model.get("labels")[i]; })
	            .style("fill", stroke);
	
	        var max_length = d3.max(this.model.get("labels"), function(d) {
	            return d.length;
	        });
	
	        this.legend_el.exit().remove();
	        return [1, max_length];
	    }
	});
	
	
	module.exports = {
	    Boxplot: Boxplot
	};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var baseselector = __webpack_require__(29);
	
	var IndexSelector = baseselector.BaseXSelector.extend({
	
	    render : function() {
	        IndexSelector.__super__.render.apply(this);
	        this.active = false;
	        this.dirty = false;
	        var that = this;
	        var scale_creation_promise = this.create_scales();
	        Promise.all([this.mark_views_promise, scale_creation_promise]).then(function() {
	            that.line = that.d3el.append("line")
	              .attr("class", "selector indsel")
	              .attr("x1", 0)
	              .attr("y1", 0)
	              .attr("x2", 0)
	              .attr("y2", that.height)
	              .attr("stroke-width", that.model.get("line_width"))
	              .attr("pointer-events", "none")
	              .attr("visibility", "hidden");
	            that.color_change();
	
	            //container for mouse events
	            that.background = that.d3el.append("rect")
	              .attr("x", 0)
	              .attr("y", 0)
	              .attr("width", that.width)
	              .attr("height", that.height)
	              .attr("class", "selector selectormouse")
	              .attr("pointer-events", "all")
	              .attr("visibility", "hidden");
	
	            that.background.on("mousemove", _.bind(that.mousemove, that))
	                .on("click", _.bind(that.initial_click, that));
	
	            that.create_listeners();
	            that.selected_changed();
	        });
	    },
	
	    create_listeners: function() {
	        IndexSelector.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:color", this.color_change, this);
	    },
	
	    color_change: function() {
	        if(this.model.get("color") !== null){
	            this.line.style("stroke", this.model.get("color"));
	        }
	    },
	
	    initial_click: function() {
	        this.line.attr("visibility", "visible");
	        this.click();
	        this.background.on("click", _.bind(this.click, this));
	    },
	
	    click: function () {
	        this.active = !this.active;
	    },
	
	    mousemove: function() {
	        if (!this.active) {
	            return;
	        }
	        this.dirty = true;
	        var mouse_pos = d3.mouse(this.background.node());
	        var xpixel = mouse_pos[0];
	        //update the index vertical line
	        this.line.attr({x1: xpixel, x2: xpixel});
	
	        this.model.set_typed_field("selected", [this.invert_pixel(xpixel)]);
	        _.each(this.mark_views, function(mark_view) {
	             mark_view.invert_point(xpixel);
	        });
	        this.touch();
	        this.dirty = false;
	    },
	
	    invert_pixel: function(pixel) {
	        return this.scale.invert(pixel);
	    },
	
	    reset: function() {
	        this.active = false;
	        if(this.line !== undefined && this.line !== null) {
	            this.line.attr({x1: 0, x2: 0, visibility: "hidden"});
	        }
	
	        if(this.background !== undefined && this.background !== null) {
	            this.background.on("click", _.bind(this.initial_click, this));
	        }
	        this.model.set_typed_field("selected", {});
	
	        _.each(this.mark_views, function(mark_view) {
	            mark_view.invert_point();
	        });
	        this.touch();
	    },
	
	    update_scale_domain: function(ignore_gui_update) {
	        // Call the base class function to update the scale.
	        IndexSelector.__super__.update_scale_domain.apply(this);
	        if(ignore_gui_update !== true) {
	            this.selected_changed();
	        }
	    },
	
	    selected_changed: function(model, value) {
	        if(this.dirty) {
	            //this change was most probably triggered from the js side and
	            //should be ignored.
	            return;
	        }
	        //reposition the interval selector and set the selected attribute.
	        var selected = this.model.get_typed_field("selected");
	        if(selected.length === 0) {
	            this.reset();
	        } else if (selected.length != 1) {
	            // invalid value for selected. Ignoring the value
	            return;
	        } else {
	            var pixel = this.scale.scale(selected[0]);
	            if(this.line !== undefined && this.line !== null) {
	                this.line.attr({x1: pixel, x2: pixel, visibility: "visible"});
	            }
	            //the selected may be called before the index selector is
	            //active for the first time.
	            this.background.on("click", _.bind(this.click, this));
	            _.each(this.mark_views, function(mark_view) {
	                mark_view.invert_point(pixel);
	            });
	        }
	    },
	
	    relayout: function() {
	        IndexSelector.__super__.relayout.apply(this);
	        this.line.attr("y1", 0)
	            .attr("y2", this.height);
	        this.background.attr("width", this.width)
	            .attr("height", this.height);
	        this.set_range([this.scale]);
	    },
	
	    scale_changed: function() {
	        this.reset();
	        this.scale = this.parent.x_scale;
	    },
	
	    set_range: function(array) {
	        for(var iter = 0; iter < array.length; iter++) {
	            array[iter].set_range([0, this.width]);
	        }
	    },
	});
	
	module.exports = {
	    IndexSelector: IndexSelector,
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var interaction = __webpack_require__(18);
	
	var BaseSelector = interaction.Interaction.extend({
	
	    initialize: function() {
	        this.setElement(document.createElementNS(d3.ns.prefix.svg, "g"));
	        this.d3el = d3.select(this.el);
	        interaction.Interaction.__super__.initialize.apply(this, arguments);
	    },
	
	    render: function() {
	        this.parent = this.options.parent;
	        this.width = this.parent.width - this.parent.margin.left - this.parent.margin.right;
	        this.height = this.parent.height - this.parent.margin.top - this.parent.margin.bottom;
	        this.mark_views_promise = this.populate_mark_views();
	    },
	
	    create_listeners: function() {
	        this.parent.on("margin_updated", this.relayout, this);
	        this.listenTo(this.model, "change:selected", this.selected_changed);
	        this.listenTo(this.model, "change:marks", this.marks_changed);
	        this.listenTo(this.model, "msg:custom", this.handle_custom_messages);
	    },
	
	    relayout: function() {
	        this.height = this.parent.height - this.parent.margin.top - this.parent.margin.bottom;
	        this.width = this.parent.width - this.parent.margin.left - this.parent.margin.right;
	    },
	
	    populate_mark_views: function() {
	        var fig = this.parent;
	        var that = this;
	        var mark_ids = this.model.get("marks").map(function(mark_model) {
	            return mark_model.model_id; // Model ids of the marks of the selector
	        });
	        return Promise.all(fig.mark_views.views).then(function(views) {
	            var fig_mark_ids = fig.mark_views._models.map(function(mark_model) {
	                return mark_model.model_id;
	            });  // Model ids of the marks in the figure
	            var mark_indices = mark_ids.map(function(mark_model_id) {
	                return fig_mark_ids.indexOf(mark_model_id); // look up based on model ids
	            });
	            that.mark_views = mark_indices.map(function(elem) {
	                return views[elem]; // return the views, based on the assumption that fig.mark_views is an ordered list
	            });
	        });
	    },
	
	    marks_changed: function() {
	        var that = this;
	        this.populate_mark_views().then(function() {that.selected_changed();});
	    },
	
	    handle_custom_messages: function(msg) {
	        if (msg.type === "reset") {
	            this.reset();
	        }
	    },
	
	    reset: function() {
	        //inherited classes should implement this function
	    },
	
	    selected_changed: function() {
	        //inherited classes should implement this function
	    },
	});
	
	var BaseXSelector = BaseSelector.extend({
	
	    create_scales: function() {
	        if(this.scale) {
	            this.scale.remove();
	        }
	        if(this.model.get("scale")) {
	            var that = this;
	            return this.create_child_view(this.model.get("scale")).then(function(view) {
	                that.scale = view;
	                // The argument is to suppress the update to gui
	                that.update_scale_domain(true);
	                that.set_range([that.scale]);
	                that.scale.on("domain_changed", that.update_scale_domain, that);
	                return view;
	            });
	        }
	    },
	
	    update_scale_domain: function() {
	        // When the domain of the scale is updated, the domain of the scale
	        // for the selector must be expanded to account for the padding.
	        var xy = (this.model.get("orientation") == "vertical") ? "y" : "x"
	        var initial_range = this.parent.padded_range(xy, this.scale.model);
	        var target_range = this.parent.range(xy);
	        this.scale.expand_domain(initial_range, target_range);
	    },
	
	    set_range: function(array) {
	        var xy = (this.model.get("orientation") == "vertical") ? "y" : "x"
	        for(var iter = 0; iter < array.length; iter++) {
	            array[iter].set_range(this.parent.range(xy));
	        }
	    },
	});
	
	var BaseXYSelector = BaseSelector.extend({
	
	    create_scales: function() {
	        var that = this;
	        if(this.x_scale) {
	            this.x_scale.remove();
	        }
	        if(this.y_scale) {
	            this.y_scale.remove();
	        }
	        var scale_promises = [];
	        if(this.model.get("x_scale")) {
	            scale_promises.push(this.create_child_view(this.model.get("x_scale")).then(function(view) {
	                that.x_scale = view;
	                that.update_xscale_domain();
	                that.set_x_range([that.x_scale]);
	                that.x_scale.on("domain_changed", that.update_xscale_domain, that);
	                return view;
	            }));
	        }
	        if(this.model.get("y_scale")) {
	            scale_promises.push(this.create_child_view(this.model.get("y_scale")).then(function(view) {
	                that.y_scale = view;
	                that.update_yscale_domain();
	                that.set_y_range([that.y_scale]);
	                that.y_scale.on("domain_changed", that.update_yscale_domain, that);
	                return view;
	            }));
	        }
	
	        return Promise.all(scale_promises);
	    },
	
	    set_x_range: function(array) {
	        for(var iter = 0; iter < array.length; iter++) {
	            array[iter].set_range(this.parent.range("x"));
	        }
	    },
	
	    set_y_range: function(array) {
	        for(var iter = 0; iter < array.length; iter++) {
	            array[iter].set_range(this.parent.range("y"));
	        }
	    },
	
	    update_xscale_domain: function() {
	        // When the domain of the scale is updated, the domain of the scale
	        // for the selector must be expanded to account for the padding.
	        var initial_range = this.parent.padded_range("x", this.x_scale.model);
	        var target_range = this.parent.range("x");
	        this.x_scale.expand_domain(initial_range, target_range);
	    },
	
	    update_yscale_domain: function() {
	        // When the domain of the scale is updated, the domain of the scale
	        // for the selector must be expanded to account for the padding.
	        var initial_range = this.parent.padded_range("y", this.y_scale.model);
	        var target_range = this.parent.range("y");
	        this.y_scale.expand_domain(initial_range, target_range);
	    }
	});
	
	module.exports = {
	    BaseSelector: BaseSelector,
	    BaseXSelector: BaseXSelector,
	    BaseXYSelector: BaseXYSelector
	};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var ordinalscale = __webpack_require__(31);
	var colurutils = __webpack_require__(33);
	
	var OrdinalColorScale = ordinalscale.OrdinalScale.extend({
	
	    render: function(){
	        OrdinalColorScale.__super__.render.apply(this);
	        this.listenTo(this.model, "domain_changed", this.model_domain_changed, this);
	        this.listenTo(this.model, "set_ticks", this.model_ticks_changed, this);
	        this.model.on_some_change(["colors", "scheme"], this.colors_changed, this);
	        this.set_range();
	    },
	
	    set_range: function() {
	        if (this.model.get("colors").length > 0) {
	            this.scale.range(colurutils.cycle_colors(this.model.get("colors"), this.scale.domain().length));
	        } else {
	            this.scale.range(colurutils.get_ordinal_scale_range(this.model.get("scheme"), this.scale.domain().length));
	        }
	        this.trigger("color_scale_range_changed");
	    },
	
	    model_domain_changed: function() {
	        OrdinalColorScale.__super__.model_domain_changed.apply(this);
	        this.set_range();
	    },
	
	    colors_changed: function() {
	        this.set_range();
	    }
	});
	
	module.exports = {
	    OrdinalColorScale: OrdinalColorScale
	};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var scale = __webpack_require__(32);
	
	var OrdinalScale = scale.Scale.extend({
	
	    render: function() {
	        this.scale = d3.scale.ordinal();
	        this.scale.domain(this.model.domain);
	        this.offset = 0;
	        this.create_event_listeners();
	    },
	
	    set_range: function(range, padding) {
	       padding = (padding === undefined) ? 0 : padding;
	       this.scale.rangeBands(range, padding, padding / 2.0);
	       this.offset = (this.scale.domain().length === 0) ? 0 : this.scale.rangeBand() / 2.0;
	    },
	
	    expand_domain: function(old_range, new_range) {
	        // If you have a current range and then a new range and want to
	        // expand the domain to expand to the new range but keep it
	        // consistent with the previous one, this is the function you use.
	
	        // I am trying to expand the ordinal scale by setting an
	        // appropriate value for the outer padding of the ordinal scale so
	        // that the starting point of each of the bins match. once that
	        // happens, the labels are placed at the center of the bins
	
	        var unpadded_scale = this.scale.copy();
	        unpadded_scale.rangeBands(old_range);
	        var outer_padding = (unpadded_scale.range().length > 0) ?
	            Math.abs((new_range[1] - old_range[1]) / unpadded_scale.rangeBand()) : 0;
	        this.scale.rangeBands(new_range, 0.0, outer_padding);
	    },
	
	    invert: function(pixel) {
	        // returns the element in the domain which is closest to pixel
	        // value passed. If the pixel is outside the range of the scale,
	        var that = this;
	        var domain = this.scale.domain();
	        var pixel_vals = domain.map(function(d) { 
	            return that.scale(d) + that.scale.rangeBand() / 2;
	        });
	        var abs_diff = pixel_vals.map(function(d) {
	            return Math.abs(pixel - d);
	        });
	        return domain[abs_diff.indexOf(d3.min(abs_diff))];
	    },
	
	    invert_range: function(pixels) {
	        //return all the indices between a range
	        //pixels should be a non-decreasing two element array
	        var that = this;
	        var domain = this.scale.domain();
	        var pixel_vals = domain.map(function(d) {
	            return that.scale(d) + that.scale.rangeBand() / 2;
	        });
	        var indices = _.range(pixel_vals.length);
	        var filtered_ind = indices.filter(function(ind) { 
	            return (pixel_vals[ind] >= pixels[0] &&
	                    pixel_vals[ind] <= pixels[1]);
	        });
	        return filtered_ind.map(function(ind) { return domain[ind]; });
	    }
	});
	
	module.exports = {
	    OrdinalScale: OrdinalScale
	};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	
	var Scale = widgets.WidgetView.extend({
	
	    render: function() {
	        this.offset = 0;
	    },
	
	    create_event_listeners: function() {
	        this.listenTo(this.model, "domain_changed", this.model_domain_changed, this);
	        this.listenTo(this.model, "highlight_axis", this.highlight_axis, this);
	        this.listenTo(this.model, "unhighlight_axis", this.unhighlight_axis, this);
	    },
	
	    set_range: function(range, padding) {
	        this.scale.range(range);
	    },
	
	    compute_and_set_domain: function(array, id) {
	        this.model.compute_and_set_domain(array, id);
	    },
	
	    set_domain: function(array, id) {
	        this.model.set_domain(array, id);
	    },
	
	    model_domain_changed: function() {
	        this.scale.domain(this.model.domain);
	        this.trigger("domain_changed");
	    },
	
	    highlight_axis: function() {
	        this.trigger("highlight_axis");
	    },
	
	    unhighlight_axis: function() {
	        this.trigger("unhighlight_axis");
	    },
	
	    expand_domain: function(old_range, new_range) {
	        // Base class function. No implementation.
	        // Implementation is particular to the child class
	        // if you have a current range and then a new range and want to
	        // expand the domain to expand to the new range but keep it
	        // consistent with the previous one, this is the function you use.
	    }
	});
	
	module.exports = {
	    Scale: Scale
	};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var colorbrewer = __webpack_require__(34);
	var utils = __webpack_require__(10);
	
	var default_scheme = 'RdYlGn'
	
	var cycle_colors = function(colors, count) {
	    var colors_len = colors.length;
	    if(colors_len > count) {
	        return colors.slice(0, count);
	    } else {
	        var return_array = [];
	        var iters = Math.floor(count / colors_len);
	        for(;iters > 0; iters--) {
	            return_array = return_array.concat(colors);
	        }
	        return return_array.concat(colors.slice(0, count % colors_len));
	    }
	};
	
	var cycle_colors_from_scheme = function(scheme, num_steps) {
	    scheme = (scheme in colorbrewer) ? scheme : default_scheme;
	    var color_set = colorbrewer[scheme];
	
	    // Indices of colorbrewer objects are strings
	    var color_index = num_steps.toString();
	
	    if (num_steps === 2) {
	        return [color_set[3]["0"], color_set[3]["2"]];
	    } else if (color_index in color_set) {
	        return color_set[color_index];
	    } else {
	        var color_index = get_max_index(color_set).toString();
	        return this.cycle_colors(color_set[color_index], num_steps);
	    }
	};
	
	var get_linear_scale = function(scheme) {
	    scheme = ((scheme in colorbrewer) && !(colorbrewer[scheme]["type"] === "qual")) ?
	                  scheme : default_scheme;
	    var color_set = colorbrewer[scheme];
	    var color_index = get_max_index(color_set).toString();
	
	    var colors = color_set[color_index];
	    var scale = d3.scale.linear().range(colors);
	    return scale;
	};
	
	var get_ordinal_scale = function(scheme, num_steps) {
	    var scale = d3.scale.ordinal();
	    scale.range(this.cycle_colors_from_scheme(scheme, num_steps));
	    return scale;
	};
	
	var get_linear_scale_range = function(scheme) {
	    return this.get_linear_scale(scheme).range();
	};
	
	var get_ordinal_scale_range = function(scheme, num_steps) {
	    return this.get_ordinal_scale(scheme, num_steps).range();
	};
	
	// Returns the maximum number of colors available in the colorbrewer object
	var get_max_index = function(color_object) {
	    return d3.max(Object.keys(color_object).map(Number));
	};
	
	module.exports = {
	    cycle_colors: cycle_colors,
	    cycle_colors_from_scheme: cycle_colors_from_scheme,
	    get_linear_scale: get_linear_scale,
	    get_ordinal_scale: get_ordinal_scale,
	    get_linear_scale_range: get_linear_scale_range,
	    get_ordinal_scale_range: get_ordinal_scale_range,
	};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/* Apache-Style Software License for ColorBrewer software and ColorBrewer Color
	 * Schemes
	 * 
	 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The Pennsylvania State
	 * University.
	 * 
	 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
	 * use this file except in compliance with the License. You may obtain a copy of
	 * the License at
	 * 
	 * http://www.apache.org/licenses/LICENSE-2.0
	 * 
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
	 * License for the specific language governing permissions and limitations under
	 * the License.
	 * 
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 * 
	 * 1. Redistributions as source code must retain the above copyright notice, this
	 * list of conditions and the following disclaimer.
	 * 
	 * 2. The end-user documentation included with the redistribution, if any, must
	 * include the following acknowledgment: "This product includes color
	 * specifications and designs developed by Cynthia Brewer
	 * (http://colorbrewer.org/)." Alternately, this acknowledgment may appear in the
	 * software itself, if and wherever such third-party acknowledgments normally
	 * appear.
	 * 
	 * 4. The name "ColorBrewer" must not be used to endorse or promote products
	 * derived from this software without prior written permission. For written
	 * permission, please contact Cynthia Brewer at cbrewer@psu.edu.
	 * 
	 * 5. Products derived from this software may not be called "ColorBrewer", nor
	 * may "ColorBrewer" appear in their name, without prior written permission of
	 * Cynthia Brewer.
	 */
	
	// This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).
	// JavaScript specs as packaged in the D3 library (d3js.org). Please see license at http://colorbrewer.org/export/LICENSE.txt
	var colorbrewer = { 
	"Spectral":  {"3": ["rgb(252,141,89)", "rgb(255,255,191)", "rgb(153,213,148)"], "4": ["rgb(215,25,28)", "rgb(253,174,97)", "rgb(171,221,164)", "rgb(43,131,186)"], "5": ["rgb(215,25,28)", "rgb(253,174,97)", "rgb(255,255,191)", "rgb(171,221,164)", "rgb(43,131,186)"], "6": ["rgb(213,62,79)", "rgb(252,141,89)", "rgb(254,224,139)", "rgb(230,245,152)", "rgb(153,213,148)", "rgb(50,136,189)"], "7": ["rgb(213,62,79)", "rgb(252,141,89)", "rgb(254,224,139)", "rgb(255,255,191)", "rgb(230,245,152)", "rgb(153,213,148)", "rgb(50,136,189)"], "8": ["rgb(213,62,79)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,139)", "rgb(230,245,152)", "rgb(171,221,164)", "rgb(102,194,165)", "rgb(50,136,189)"], "9": ["rgb(213,62,79)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,139)", "rgb(255,255,191)", "rgb(230,245,152)", "rgb(171,221,164)", "rgb(102,194,165)", "rgb(50,136,189)"], "10": ["rgb(158,1,66)", "rgb(213,62,79)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,139)", "rgb(230,245,152)", "rgb(171,221,164)", "rgb(102,194,165)", "rgb(50,136,189)", "rgb(94,79,162)"], "11": ["rgb(158,1,66)", "rgb(213,62,79)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,139)", "rgb(255,255,191)", "rgb(230,245,152)", "rgb(171,221,164)", "rgb(102,194,165)", "rgb(50,136,189)", "rgb(94,79,162)"], "type": "div"} ,
	"RdYlGn":  {"3": ["rgb(252,141,89)", "rgb(255,255,191)", "rgb(145,207,96)"], "4": ["rgb(215,25,28)", "rgb(253,174,97)", "rgb(166,217,106)", "rgb(26,150,65)"], "5": ["rgb(215,25,28)", "rgb(253,174,97)", "rgb(255,255,191)", "rgb(166,217,106)", "rgb(26,150,65)"], "6": ["rgb(215,48,39)", "rgb(252,141,89)", "rgb(254,224,139)", "rgb(217,239,139)", "rgb(145,207,96)", "rgb(26,152,80)"], "7": ["rgb(215,48,39)", "rgb(252,141,89)", "rgb(254,224,139)", "rgb(255,255,191)", "rgb(217,239,139)", "rgb(145,207,96)", "rgb(26,152,80)"], "8": ["rgb(215,48,39)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,139)", "rgb(217,239,139)", "rgb(166,217,106)", "rgb(102,189,99)", "rgb(26,152,80)"], "9": ["rgb(215,48,39)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,139)", "rgb(255,255,191)", "rgb(217,239,139)", "rgb(166,217,106)", "rgb(102,189,99)", "rgb(26,152,80)"], "10": ["rgb(165,0,38)", "rgb(215,48,39)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,139)", "rgb(217,239,139)", "rgb(166,217,106)", "rgb(102,189,99)", "rgb(26,152,80)", "rgb(0,104,55)"], "11": ["rgb(165,0,38)", "rgb(215,48,39)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,139)", "rgb(255,255,191)", "rgb(217,239,139)", "rgb(166,217,106)", "rgb(102,189,99)", "rgb(26,152,80)", "rgb(0,104,55)"], "type": "div"} ,
	"RdBu":  {"3": ["rgb(239,138,98)", "rgb(247,247,247)", "rgb(103,169,207)"], "4": ["rgb(202,0,32)", "rgb(244,165,130)", "rgb(146,197,222)", "rgb(5,113,176)"], "5": ["rgb(202,0,32)", "rgb(244,165,130)", "rgb(247,247,247)", "rgb(146,197,222)", "rgb(5,113,176)"], "6": ["rgb(178,24,43)", "rgb(239,138,98)", "rgb(253,219,199)", "rgb(209,229,240)", "rgb(103,169,207)", "rgb(33,102,172)"], "7": ["rgb(178,24,43)", "rgb(239,138,98)", "rgb(253,219,199)", "rgb(247,247,247)", "rgb(209,229,240)", "rgb(103,169,207)", "rgb(33,102,172)"], "8": ["rgb(178,24,43)", "rgb(214,96,77)", "rgb(244,165,130)", "rgb(253,219,199)", "rgb(209,229,240)", "rgb(146,197,222)", "rgb(67,147,195)", "rgb(33,102,172)"], "9": ["rgb(178,24,43)", "rgb(214,96,77)", "rgb(244,165,130)", "rgb(253,219,199)", "rgb(247,247,247)", "rgb(209,229,240)", "rgb(146,197,222)", "rgb(67,147,195)", "rgb(33,102,172)"], "10": ["rgb(103,0,31)", "rgb(178,24,43)", "rgb(214,96,77)", "rgb(244,165,130)", "rgb(253,219,199)", "rgb(209,229,240)", "rgb(146,197,222)", "rgb(67,147,195)", "rgb(33,102,172)", "rgb(5,48,97)"], "11": ["rgb(103,0,31)", "rgb(178,24,43)", "rgb(214,96,77)", "rgb(244,165,130)", "rgb(253,219,199)", "rgb(247,247,247)", "rgb(209,229,240)", "rgb(146,197,222)", "rgb(67,147,195)", "rgb(33,102,172)", "rgb(5,48,97)"], "type": "div"} ,
	"PiYG":  {"3": ["rgb(233,163,201)", "rgb(247,247,247)", "rgb(161,215,106)"], "4": ["rgb(208,28,139)", "rgb(241,182,218)", "rgb(184,225,134)", "rgb(77,172,38)"], "5": ["rgb(208,28,139)", "rgb(241,182,218)", "rgb(247,247,247)", "rgb(184,225,134)", "rgb(77,172,38)"], "6": ["rgb(197,27,125)", "rgb(233,163,201)", "rgb(253,224,239)", "rgb(230,245,208)", "rgb(161,215,106)", "rgb(77,146,33)"], "7": ["rgb(197,27,125)", "rgb(233,163,201)", "rgb(253,224,239)", "rgb(247,247,247)", "rgb(230,245,208)", "rgb(161,215,106)", "rgb(77,146,33)"], "8": ["rgb(197,27,125)", "rgb(222,119,174)", "rgb(241,182,218)", "rgb(253,224,239)", "rgb(230,245,208)", "rgb(184,225,134)", "rgb(127,188,65)", "rgb(77,146,33)"], "9": ["rgb(197,27,125)", "rgb(222,119,174)", "rgb(241,182,218)", "rgb(253,224,239)", "rgb(247,247,247)", "rgb(230,245,208)", "rgb(184,225,134)", "rgb(127,188,65)", "rgb(77,146,33)"], "10": ["rgb(142,1,82)", "rgb(197,27,125)", "rgb(222,119,174)", "rgb(241,182,218)", "rgb(253,224,239)", "rgb(230,245,208)", "rgb(184,225,134)", "rgb(127,188,65)", "rgb(77,146,33)", "rgb(39,100,25)"], "11": ["rgb(142,1,82)", "rgb(197,27,125)", "rgb(222,119,174)", "rgb(241,182,218)", "rgb(253,224,239)", "rgb(247,247,247)", "rgb(230,245,208)", "rgb(184,225,134)", "rgb(127,188,65)", "rgb(77,146,33)", "rgb(39,100,25)"], "type": "div"} ,
	"PRGn":  {"3": ["rgb(175,141,195)", "rgb(247,247,247)", "rgb(127,191,123)"], "4": ["rgb(123,50,148)", "rgb(194,165,207)", "rgb(166,219,160)", "rgb(0,136,55)"], "5": ["rgb(123,50,148)", "rgb(194,165,207)", "rgb(247,247,247)", "rgb(166,219,160)", "rgb(0,136,55)"], "6": ["rgb(118,42,131)", "rgb(175,141,195)", "rgb(231,212,232)", "rgb(217,240,211)", "rgb(127,191,123)", "rgb(27,120,55)"], "7": ["rgb(118,42,131)", "rgb(175,141,195)", "rgb(231,212,232)", "rgb(247,247,247)", "rgb(217,240,211)", "rgb(127,191,123)", "rgb(27,120,55)"], "8": ["rgb(118,42,131)", "rgb(153,112,171)", "rgb(194,165,207)", "rgb(231,212,232)", "rgb(217,240,211)", "rgb(166,219,160)", "rgb(90,174,97)", "rgb(27,120,55)"], "9": ["rgb(118,42,131)", "rgb(153,112,171)", "rgb(194,165,207)", "rgb(231,212,232)", "rgb(247,247,247)", "rgb(217,240,211)", "rgb(166,219,160)", "rgb(90,174,97)", "rgb(27,120,55)"], "10": ["rgb(64,0,75)", "rgb(118,42,131)", "rgb(153,112,171)", "rgb(194,165,207)", "rgb(231,212,232)", "rgb(217,240,211)", "rgb(166,219,160)", "rgb(90,174,97)", "rgb(27,120,55)", "rgb(0,68,27)"], "11": ["rgb(64,0,75)", "rgb(118,42,131)", "rgb(153,112,171)", "rgb(194,165,207)", "rgb(231,212,232)", "rgb(247,247,247)", "rgb(217,240,211)", "rgb(166,219,160)", "rgb(90,174,97)", "rgb(27,120,55)", "rgb(0,68,27)"], "type": "div"} ,
	"RdYlBu":  {"3": ["rgb(252,141,89)", "rgb(255,255,191)", "rgb(145,191,219)"], "4": ["rgb(215,25,28)", "rgb(253,174,97)", "rgb(171,217,233)", "rgb(44,123,182)"], "5": ["rgb(215,25,28)", "rgb(253,174,97)", "rgb(255,255,191)", "rgb(171,217,233)", "rgb(44,123,182)"], "6": ["rgb(215,48,39)", "rgb(252,141,89)", "rgb(254,224,144)", "rgb(224,243,248)", "rgb(145,191,219)", "rgb(69,117,180)"], "7": ["rgb(215,48,39)", "rgb(252,141,89)", "rgb(254,224,144)", "rgb(255,255,191)", "rgb(224,243,248)", "rgb(145,191,219)", "rgb(69,117,180)"], "8": ["rgb(215,48,39)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,144)", "rgb(224,243,248)", "rgb(171,217,233)", "rgb(116,173,209)", "rgb(69,117,180)"], "9": ["rgb(215,48,39)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,144)", "rgb(255,255,191)", "rgb(224,243,248)", "rgb(171,217,233)", "rgb(116,173,209)", "rgb(69,117,180)"], "10": ["rgb(165,0,38)", "rgb(215,48,39)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,144)", "rgb(224,243,248)", "rgb(171,217,233)", "rgb(116,173,209)", "rgb(69,117,180)", "rgb(49,54,149)"], "11": ["rgb(165,0,38)", "rgb(215,48,39)", "rgb(244,109,67)", "rgb(253,174,97)", "rgb(254,224,144)", "rgb(255,255,191)", "rgb(224,243,248)", "rgb(171,217,233)", "rgb(116,173,209)", "rgb(69,117,180)", "rgb(49,54,149)"], "type": "div"} ,
	"BrBG":  {"3": ["rgb(216,179,101)", "rgb(245,245,245)", "rgb(90,180,172)"], "4": ["rgb(166,97,26)", "rgb(223,194,125)", "rgb(128,205,193)", "rgb(1,133,113)"], "5": ["rgb(166,97,26)", "rgb(223,194,125)", "rgb(245,245,245)", "rgb(128,205,193)", "rgb(1,133,113)"], "6": ["rgb(140,81,10)", "rgb(216,179,101)", "rgb(246,232,195)", "rgb(199,234,229)", "rgb(90,180,172)", "rgb(1,102,94)"], "7": ["rgb(140,81,10)", "rgb(216,179,101)", "rgb(246,232,195)", "rgb(245,245,245)", "rgb(199,234,229)", "rgb(90,180,172)", "rgb(1,102,94)"], "8": ["rgb(140,81,10)", "rgb(191,129,45)", "rgb(223,194,125)", "rgb(246,232,195)", "rgb(199,234,229)", "rgb(128,205,193)", "rgb(53,151,143)", "rgb(1,102,94)"], "9": ["rgb(140,81,10)", "rgb(191,129,45)", "rgb(223,194,125)", "rgb(246,232,195)", "rgb(245,245,245)", "rgb(199,234,229)", "rgb(128,205,193)", "rgb(53,151,143)", "rgb(1,102,94)"], "10": ["rgb(84,48,5)", "rgb(140,81,10)", "rgb(191,129,45)", "rgb(223,194,125)", "rgb(246,232,195)", "rgb(199,234,229)", "rgb(128,205,193)", "rgb(53,151,143)", "rgb(1,102,94)", "rgb(0,60,48)"], "11": ["rgb(84,48,5)", "rgb(140,81,10)", "rgb(191,129,45)", "rgb(223,194,125)", "rgb(246,232,195)", "rgb(245,245,245)", "rgb(199,234,229)", "rgb(128,205,193)", "rgb(53,151,143)", "rgb(1,102,94)", "rgb(0,60,48)"], "type": "div"} ,
	"RdGy":  {"3": ["rgb(239,138,98)", "rgb(255,255,255)", "rgb(153,153,153)"], "4": ["rgb(202,0,32)", "rgb(244,165,130)", "rgb(186,186,186)", "rgb(64,64,64)"], "5": ["rgb(202,0,32)", "rgb(244,165,130)", "rgb(255,255,255)", "rgb(186,186,186)", "rgb(64,64,64)"], "6": ["rgb(178,24,43)", "rgb(239,138,98)", "rgb(253,219,199)", "rgb(224,224,224)", "rgb(153,153,153)", "rgb(77,77,77)"], "7": ["rgb(178,24,43)", "rgb(239,138,98)", "rgb(253,219,199)", "rgb(255,255,255)", "rgb(224,224,224)", "rgb(153,153,153)", "rgb(77,77,77)"], "8": ["rgb(178,24,43)", "rgb(214,96,77)", "rgb(244,165,130)", "rgb(253,219,199)", "rgb(224,224,224)", "rgb(186,186,186)", "rgb(135,135,135)", "rgb(77,77,77)"], "9": ["rgb(178,24,43)", "rgb(214,96,77)", "rgb(244,165,130)", "rgb(253,219,199)", "rgb(255,255,255)", "rgb(224,224,224)", "rgb(186,186,186)", "rgb(135,135,135)", "rgb(77,77,77)"], "10": ["rgb(103,0,31)", "rgb(178,24,43)", "rgb(214,96,77)", "rgb(244,165,130)", "rgb(253,219,199)", "rgb(224,224,224)", "rgb(186,186,186)", "rgb(135,135,135)", "rgb(77,77,77)", "rgb(26,26,26)"], "11": ["rgb(103,0,31)", "rgb(178,24,43)", "rgb(214,96,77)", "rgb(244,165,130)", "rgb(253,219,199)", "rgb(255,255,255)", "rgb(224,224,224)", "rgb(186,186,186)", "rgb(135,135,135)", "rgb(77,77,77)", "rgb(26,26,26)"], "type": "div"} ,
	"PuOr":  {"3": ["rgb(241,163,64)", "rgb(247,247,247)", "rgb(153,142,195)"], "4": ["rgb(230,97,1)", "rgb(253,184,99)", "rgb(178,171,210)", "rgb(94,60,153)"], "5": ["rgb(230,97,1)", "rgb(253,184,99)", "rgb(247,247,247)", "rgb(178,171,210)", "rgb(94,60,153)"], "6": ["rgb(179,88,6)", "rgb(241,163,64)", "rgb(254,224,182)", "rgb(216,218,235)", "rgb(153,142,195)", "rgb(84,39,136)"], "7": ["rgb(179,88,6)", "rgb(241,163,64)", "rgb(254,224,182)", "rgb(247,247,247)", "rgb(216,218,235)", "rgb(153,142,195)", "rgb(84,39,136)"], "8": ["rgb(179,88,6)", "rgb(224,130,20)", "rgb(253,184,99)", "rgb(254,224,182)", "rgb(216,218,235)", "rgb(178,171,210)", "rgb(128,115,172)", "rgb(84,39,136)"], "9": ["rgb(179,88,6)", "rgb(224,130,20)", "rgb(253,184,99)", "rgb(254,224,182)", "rgb(247,247,247)", "rgb(216,218,235)", "rgb(178,171,210)", "rgb(128,115,172)", "rgb(84,39,136)"], "10": ["rgb(127,59,8)", "rgb(179,88,6)", "rgb(224,130,20)", "rgb(253,184,99)", "rgb(254,224,182)", "rgb(216,218,235)", "rgb(178,171,210)", "rgb(128,115,172)", "rgb(84,39,136)", "rgb(45,0,75)"], "11": ["rgb(127,59,8)", "rgb(179,88,6)", "rgb(224,130,20)", "rgb(253,184,99)", "rgb(254,224,182)", "rgb(247,247,247)", "rgb(216,218,235)", "rgb(178,171,210)", "rgb(128,115,172)", "rgb(84,39,136)", "rgb(45,0,75)"], "type": "div"} ,
	
	"Set2":  {"3": ["rgb(102,194,165)", "rgb(252,141,98)", "rgb(141,160,203)"], "4": ["rgb(102,194,165)", "rgb(252,141,98)", "rgb(141,160,203)", "rgb(231,138,195)"], "5": ["rgb(102,194,165)", "rgb(252,141,98)", "rgb(141,160,203)", "rgb(231,138,195)", "rgb(166,216,84)"], "6": ["rgb(102,194,165)", "rgb(252,141,98)", "rgb(141,160,203)", "rgb(231,138,195)", "rgb(166,216,84)", "rgb(255,217,47)"], "7": ["rgb(102,194,165)", "rgb(252,141,98)", "rgb(141,160,203)", "rgb(231,138,195)", "rgb(166,216,84)", "rgb(255,217,47)", "rgb(229,196,148)"], "8": ["rgb(102,194,165)", "rgb(252,141,98)", "rgb(141,160,203)", "rgb(231,138,195)", "rgb(166,216,84)", "rgb(255,217,47)", "rgb(229,196,148)", "rgb(179,179,179)"], "type": "qual"} ,
	"Accent":  {"3": ["rgb(127,201,127)", "rgb(190,174,212)", "rgb(253,192,134)"], "4": ["rgb(127,201,127)", "rgb(190,174,212)", "rgb(253,192,134)", "rgb(255,255,153)"], "5": ["rgb(127,201,127)", "rgb(190,174,212)", "rgb(253,192,134)", "rgb(255,255,153)", "rgb(56,108,176)"], "6": ["rgb(127,201,127)", "rgb(190,174,212)", "rgb(253,192,134)", "rgb(255,255,153)", "rgb(56,108,176)", "rgb(240,2,127)"], "7": ["rgb(127,201,127)", "rgb(190,174,212)", "rgb(253,192,134)", "rgb(255,255,153)", "rgb(56,108,176)", "rgb(240,2,127)", "rgb(191,91,23)"], "8": ["rgb(127,201,127)", "rgb(190,174,212)", "rgb(253,192,134)", "rgb(255,255,153)", "rgb(56,108,176)", "rgb(240,2,127)", "rgb(191,91,23)", "rgb(102,102,102)"], "type": "qual"} ,
	"Set1":  {"3": ["rgb(228,26,28)", "rgb(55,126,184)", "rgb(77,175,74)"], "4": ["rgb(228,26,28)", "rgb(55,126,184)", "rgb(77,175,74)", "rgb(152,78,163)"], "5": ["rgb(228,26,28)", "rgb(55,126,184)", "rgb(77,175,74)", "rgb(152,78,163)", "rgb(255,127,0)"], "6": ["rgb(228,26,28)", "rgb(55,126,184)", "rgb(77,175,74)", "rgb(152,78,163)", "rgb(255,127,0)", "rgb(255,255,51)"], "7": ["rgb(228,26,28)", "rgb(55,126,184)", "rgb(77,175,74)", "rgb(152,78,163)", "rgb(255,127,0)", "rgb(255,255,51)", "rgb(166,86,40)"], "8": ["rgb(228,26,28)", "rgb(55,126,184)", "rgb(77,175,74)", "rgb(152,78,163)", "rgb(255,127,0)", "rgb(255,255,51)", "rgb(166,86,40)", "rgb(247,129,191)"], "9": ["rgb(228,26,28)", "rgb(55,126,184)", "rgb(77,175,74)", "rgb(152,78,163)", "rgb(255,127,0)", "rgb(255,255,51)", "rgb(166,86,40)", "rgb(247,129,191)", "rgb(153,153,153)"], "type": "qual"} ,
	"Set3":  {"3": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)"], "4": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)"], "5": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)"], "6": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)", "rgb(253,180,98)"], "7": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)", "rgb(253,180,98)", "rgb(179,222,105)"], "8": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)", "rgb(253,180,98)", "rgb(179,222,105)", "rgb(252,205,229)"], "9": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)", "rgb(253,180,98)", "rgb(179,222,105)", "rgb(252,205,229)", "rgb(217,217,217)"], "10": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)", "rgb(253,180,98)", "rgb(179,222,105)", "rgb(252,205,229)", "rgb(217,217,217)", "rgb(188,128,189)"], "11": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)", "rgb(253,180,98)", "rgb(179,222,105)", "rgb(252,205,229)", "rgb(217,217,217)", "rgb(188,128,189)", "rgb(204,235,197)"], "12": ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)", "rgb(253,180,98)", "rgb(179,222,105)", "rgb(252,205,229)", "rgb(217,217,217)", "rgb(188,128,189)", "rgb(204,235,197)", "rgb(255,237,111)"], "type": "qual"} ,
	"Dark2":  {"3": ["rgb(27,158,119)", "rgb(217,95,2)", "rgb(117,112,179)"], "4": ["rgb(27,158,119)", "rgb(217,95,2)", "rgb(117,112,179)", "rgb(231,41,138)"], "5": ["rgb(27,158,119)", "rgb(217,95,2)", "rgb(117,112,179)", "rgb(231,41,138)", "rgb(102,166,30)"], "6": ["rgb(27,158,119)", "rgb(217,95,2)", "rgb(117,112,179)", "rgb(231,41,138)", "rgb(102,166,30)", "rgb(230,171,2)"], "7": ["rgb(27,158,119)", "rgb(217,95,2)", "rgb(117,112,179)", "rgb(231,41,138)", "rgb(102,166,30)", "rgb(230,171,2)", "rgb(166,118,29)"], "8": ["rgb(27,158,119)", "rgb(217,95,2)", "rgb(117,112,179)", "rgb(231,41,138)", "rgb(102,166,30)", "rgb(230,171,2)", "rgb(166,118,29)", "rgb(102,102,102)"], "type": "qual"} ,
	"Paired":  {"3": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)"], "4": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)", "rgb(51,160,44)"], "5": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)", "rgb(51,160,44)", "rgb(251,154,153)"], "6": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)", "rgb(51,160,44)", "rgb(251,154,153)", "rgb(227,26,28)"], "7": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)", "rgb(51,160,44)", "rgb(251,154,153)", "rgb(227,26,28)", "rgb(253,191,111)"], "8": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)", "rgb(51,160,44)", "rgb(251,154,153)", "rgb(227,26,28)", "rgb(253,191,111)", "rgb(255,127,0)"], "9": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)", "rgb(51,160,44)", "rgb(251,154,153)", "rgb(227,26,28)", "rgb(253,191,111)", "rgb(255,127,0)", "rgb(202,178,214)"], "10": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)", "rgb(51,160,44)", "rgb(251,154,153)", "rgb(227,26,28)", "rgb(253,191,111)", "rgb(255,127,0)", "rgb(202,178,214)", "rgb(106,61,154)"], "11": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)", "rgb(51,160,44)", "rgb(251,154,153)", "rgb(227,26,28)", "rgb(253,191,111)", "rgb(255,127,0)", "rgb(202,178,214)", "rgb(106,61,154)", "rgb(255,255,153)"], "12": ["rgb(166,206,227)", "rgb(31,120,180)", "rgb(178,223,138)", "rgb(51,160,44)", "rgb(251,154,153)", "rgb(227,26,28)", "rgb(253,191,111)", "rgb(255,127,0)", "rgb(202,178,214)", "rgb(106,61,154)", "rgb(255,255,153)", "rgb(177,89,40)"], "type": "qual"} ,
	"Pastel2":  {"3": ["rgb(179,226,205)", "rgb(253,205,172)", "rgb(203,213,232)"], "4": ["rgb(179,226,205)", "rgb(253,205,172)", "rgb(203,213,232)", "rgb(244,202,228)"], "5": ["rgb(179,226,205)", "rgb(253,205,172)", "rgb(203,213,232)", "rgb(244,202,228)", "rgb(230,245,201)"], "6": ["rgb(179,226,205)", "rgb(253,205,172)", "rgb(203,213,232)", "rgb(244,202,228)", "rgb(230,245,201)", "rgb(255,242,174)"], "7": ["rgb(179,226,205)", "rgb(253,205,172)", "rgb(203,213,232)", "rgb(244,202,228)", "rgb(230,245,201)", "rgb(255,242,174)", "rgb(241,226,204)"], "8": ["rgb(179,226,205)", "rgb(253,205,172)", "rgb(203,213,232)", "rgb(244,202,228)", "rgb(230,245,201)", "rgb(255,242,174)", "rgb(241,226,204)", "rgb(204,204,204)"], "type": "qual"} ,
	"Pastel1":  {"3": ["rgb(251,180,174)", "rgb(179,205,227)", "rgb(204,235,197)"], "4": ["rgb(251,180,174)", "rgb(179,205,227)", "rgb(204,235,197)", "rgb(222,203,228)"], "5": ["rgb(251,180,174)", "rgb(179,205,227)", "rgb(204,235,197)", "rgb(222,203,228)", "rgb(254,217,166)"], "6": ["rgb(251,180,174)", "rgb(179,205,227)", "rgb(204,235,197)", "rgb(222,203,228)", "rgb(254,217,166)", "rgb(255,255,204)"], "7": ["rgb(251,180,174)", "rgb(179,205,227)", "rgb(204,235,197)", "rgb(222,203,228)", "rgb(254,217,166)", "rgb(255,255,204)", "rgb(229,216,189)"], "8": ["rgb(251,180,174)", "rgb(179,205,227)", "rgb(204,235,197)", "rgb(222,203,228)", "rgb(254,217,166)", "rgb(255,255,204)", "rgb(229,216,189)", "rgb(253,218,236)"], "9": ["rgb(251,180,174)", "rgb(179,205,227)", "rgb(204,235,197)", "rgb(222,203,228)", "rgb(254,217,166)", "rgb(255,255,204)", "rgb(229,216,189)", "rgb(253,218,236)", "rgb(242,242,242)"], "type": "qual"} ,
	
	"OrRd":  {"3": ["rgb(254,232,200)", "rgb(253,187,132)", "rgb(227,74,51)"], "4": ["rgb(254,240,217)", "rgb(253,204,138)", "rgb(252,141,89)", "rgb(215,48,31)"], "5": ["rgb(254,240,217)", "rgb(253,204,138)", "rgb(252,141,89)", "rgb(227,74,51)", "rgb(179,0,0)"], "6": ["rgb(254,240,217)", "rgb(253,212,158)", "rgb(253,187,132)", "rgb(252,141,89)", "rgb(227,74,51)", "rgb(179,0,0)"], "7": ["rgb(254,240,217)", "rgb(253,212,158)", "rgb(253,187,132)", "rgb(252,141,89)", "rgb(239,101,72)", "rgb(215,48,31)", "rgb(153,0,0)"], "8": ["rgb(255,247,236)", "rgb(254,232,200)", "rgb(253,212,158)", "rgb(253,187,132)", "rgb(252,141,89)", "rgb(239,101,72)", "rgb(215,48,31)", "rgb(153,0,0)"], "9": ["rgb(255,247,236)", "rgb(254,232,200)", "rgb(253,212,158)", "rgb(253,187,132)", "rgb(252,141,89)", "rgb(239,101,72)", "rgb(215,48,31)", "rgb(179,0,0)", "rgb(127,0,0)"], "type": "seq"} ,
	"PuBu":  {"3": ["rgb(236,231,242)", "rgb(166,189,219)", "rgb(43,140,190)"], "4": ["rgb(241,238,246)", "rgb(189,201,225)", "rgb(116,169,207)", "rgb(5,112,176)"], "5": ["rgb(241,238,246)", "rgb(189,201,225)", "rgb(116,169,207)", "rgb(43,140,190)", "rgb(4,90,141)"], "6": ["rgb(241,238,246)", "rgb(208,209,230)", "rgb(166,189,219)", "rgb(116,169,207)", "rgb(43,140,190)", "rgb(4,90,141)"], "7": ["rgb(241,238,246)", "rgb(208,209,230)", "rgb(166,189,219)", "rgb(116,169,207)", "rgb(54,144,192)", "rgb(5,112,176)", "rgb(3,78,123)"], "8": ["rgb(255,247,251)", "rgb(236,231,242)", "rgb(208,209,230)", "rgb(166,189,219)", "rgb(116,169,207)", "rgb(54,144,192)", "rgb(5,112,176)", "rgb(3,78,123)"], "9": ["rgb(255,247,251)", "rgb(236,231,242)", "rgb(208,209,230)", "rgb(166,189,219)", "rgb(116,169,207)", "rgb(54,144,192)", "rgb(5,112,176)", "rgb(4,90,141)", "rgb(2,56,88)"], "type": "seq"} ,
	"BuPu":  {"3": ["rgb(224,236,244)", "rgb(158,188,218)", "rgb(136,86,167)"], "4": ["rgb(237,248,251)", "rgb(179,205,227)", "rgb(140,150,198)", "rgb(136,65,157)"], "5": ["rgb(237,248,251)", "rgb(179,205,227)", "rgb(140,150,198)", "rgb(136,86,167)", "rgb(129,15,124)"], "6": ["rgb(237,248,251)", "rgb(191,211,230)", "rgb(158,188,218)", "rgb(140,150,198)", "rgb(136,86,167)", "rgb(129,15,124)"], "7": ["rgb(237,248,251)", "rgb(191,211,230)", "rgb(158,188,218)", "rgb(140,150,198)", "rgb(140,107,177)", "rgb(136,65,157)", "rgb(110,1,107)"], "8": ["rgb(247,252,253)", "rgb(224,236,244)", "rgb(191,211,230)", "rgb(158,188,218)", "rgb(140,150,198)", "rgb(140,107,177)", "rgb(136,65,157)", "rgb(110,1,107)"], "9": ["rgb(247,252,253)", "rgb(224,236,244)", "rgb(191,211,230)", "rgb(158,188,218)", "rgb(140,150,198)", "rgb(140,107,177)", "rgb(136,65,157)", "rgb(129,15,124)", "rgb(77,0,75)"], "type": "seq"} ,
	"Oranges":  {"3": ["rgb(254,230,206)", "rgb(253,174,107)", "rgb(230,85,13)"], "4": ["rgb(254,237,222)", "rgb(253,190,133)", "rgb(253,141,60)", "rgb(217,71,1)"], "5": ["rgb(254,237,222)", "rgb(253,190,133)", "rgb(253,141,60)", "rgb(230,85,13)", "rgb(166,54,3)"], "6": ["rgb(254,237,222)", "rgb(253,208,162)", "rgb(253,174,107)", "rgb(253,141,60)", "rgb(230,85,13)", "rgb(166,54,3)"], "7": ["rgb(254,237,222)", "rgb(253,208,162)", "rgb(253,174,107)", "rgb(253,141,60)", "rgb(241,105,19)", "rgb(217,72,1)", "rgb(140,45,4)"], "8": ["rgb(255,245,235)", "rgb(254,230,206)", "rgb(253,208,162)", "rgb(253,174,107)", "rgb(253,141,60)", "rgb(241,105,19)", "rgb(217,72,1)", "rgb(140,45,4)"], "9": ["rgb(255,245,235)", "rgb(254,230,206)", "rgb(253,208,162)", "rgb(253,174,107)", "rgb(253,141,60)", "rgb(241,105,19)", "rgb(217,72,1)", "rgb(166,54,3)", "rgb(127,39,4)"], "type": "seq"} ,
	"BuGn":  {"3": ["rgb(229,245,249)", "rgb(153,216,201)", "rgb(44,162,95)"], "4": ["rgb(237,248,251)", "rgb(178,226,226)", "rgb(102,194,164)", "rgb(35,139,69)"], "5": ["rgb(237,248,251)", "rgb(178,226,226)", "rgb(102,194,164)", "rgb(44,162,95)", "rgb(0,109,44)"], "6": ["rgb(237,248,251)", "rgb(204,236,230)", "rgb(153,216,201)", "rgb(102,194,164)", "rgb(44,162,95)", "rgb(0,109,44)"], "7": ["rgb(237,248,251)", "rgb(204,236,230)", "rgb(153,216,201)", "rgb(102,194,164)", "rgb(65,174,118)", "rgb(35,139,69)", "rgb(0,88,36)"], "8": ["rgb(247,252,253)", "rgb(229,245,249)", "rgb(204,236,230)", "rgb(153,216,201)", "rgb(102,194,164)", "rgb(65,174,118)", "rgb(35,139,69)", "rgb(0,88,36)"], "9": ["rgb(247,252,253)", "rgb(229,245,249)", "rgb(204,236,230)", "rgb(153,216,201)", "rgb(102,194,164)", "rgb(65,174,118)", "rgb(35,139,69)", "rgb(0,109,44)", "rgb(0,68,27)"], "type": "seq"} ,
	"YlOrBr":  {"3": ["rgb(255,247,188)", "rgb(254,196,79)", "rgb(217,95,14)"], "4": ["rgb(255,255,212)", "rgb(254,217,142)", "rgb(254,153,41)", "rgb(204,76,2)"], "5": ["rgb(255,255,212)", "rgb(254,217,142)", "rgb(254,153,41)", "rgb(217,95,14)", "rgb(153,52,4)"], "6": ["rgb(255,255,212)", "rgb(254,227,145)", "rgb(254,196,79)", "rgb(254,153,41)", "rgb(217,95,14)", "rgb(153,52,4)"], "7": ["rgb(255,255,212)", "rgb(254,227,145)", "rgb(254,196,79)", "rgb(254,153,41)", "rgb(236,112,20)", "rgb(204,76,2)", "rgb(140,45,4)"], "8": ["rgb(255,255,229)", "rgb(255,247,188)", "rgb(254,227,145)", "rgb(254,196,79)", "rgb(254,153,41)", "rgb(236,112,20)", "rgb(204,76,2)", "rgb(140,45,4)"], "9": ["rgb(255,255,229)", "rgb(255,247,188)", "rgb(254,227,145)", "rgb(254,196,79)", "rgb(254,153,41)", "rgb(236,112,20)", "rgb(204,76,2)", "rgb(153,52,4)", "rgb(102,37,6)"], "type": "seq"} ,
	"YlGn":  {"3": ["rgb(247,252,185)", "rgb(173,221,142)", "rgb(49,163,84)"], "4": ["rgb(255,255,204)", "rgb(194,230,153)", "rgb(120,198,121)", "rgb(35,132,67)"], "5": ["rgb(255,255,204)", "rgb(194,230,153)", "rgb(120,198,121)", "rgb(49,163,84)", "rgb(0,104,55)"], "6": ["rgb(255,255,204)", "rgb(217,240,163)", "rgb(173,221,142)", "rgb(120,198,121)", "rgb(49,163,84)", "rgb(0,104,55)"], "7": ["rgb(255,255,204)", "rgb(217,240,163)", "rgb(173,221,142)", "rgb(120,198,121)", "rgb(65,171,93)", "rgb(35,132,67)", "rgb(0,90,50)"], "8": ["rgb(255,255,229)", "rgb(247,252,185)", "rgb(217,240,163)", "rgb(173,221,142)", "rgb(120,198,121)", "rgb(65,171,93)", "rgb(35,132,67)", "rgb(0,90,50)"], "9": ["rgb(255,255,229)", "rgb(247,252,185)", "rgb(217,240,163)", "rgb(173,221,142)", "rgb(120,198,121)", "rgb(65,171,93)", "rgb(35,132,67)", "rgb(0,104,55)", "rgb(0,69,41)"], "type": "seq"} ,
	"Reds":  {"3": ["rgb(254,224,210)", "rgb(252,146,114)", "rgb(222,45,38)"], "4": ["rgb(254,229,217)", "rgb(252,174,145)", "rgb(251,106,74)", "rgb(203,24,29)"], "5": ["rgb(254,229,217)", "rgb(252,174,145)", "rgb(251,106,74)", "rgb(222,45,38)", "rgb(165,15,21)"], "6": ["rgb(254,229,217)", "rgb(252,187,161)", "rgb(252,146,114)", "rgb(251,106,74)", "rgb(222,45,38)", "rgb(165,15,21)"], "7": ["rgb(254,229,217)", "rgb(252,187,161)", "rgb(252,146,114)", "rgb(251,106,74)", "rgb(239,59,44)", "rgb(203,24,29)", "rgb(153,0,13)"], "8": ["rgb(255,245,240)", "rgb(254,224,210)", "rgb(252,187,161)", "rgb(252,146,114)", "rgb(251,106,74)", "rgb(239,59,44)", "rgb(203,24,29)", "rgb(153,0,13)"], "9": ["rgb(255,245,240)", "rgb(254,224,210)", "rgb(252,187,161)", "rgb(252,146,114)", "rgb(251,106,74)", "rgb(239,59,44)", "rgb(203,24,29)", "rgb(165,15,21)", "rgb(103,0,13)"], "type": "seq"} ,
	"RdPu":  {"3": ["rgb(253,224,221)", "rgb(250,159,181)", "rgb(197,27,138)"], "4": ["rgb(254,235,226)", "rgb(251,180,185)", "rgb(247,104,161)", "rgb(174,1,126)"], "5": ["rgb(254,235,226)", "rgb(251,180,185)", "rgb(247,104,161)", "rgb(197,27,138)", "rgb(122,1,119)"], "6": ["rgb(254,235,226)", "rgb(252,197,192)", "rgb(250,159,181)", "rgb(247,104,161)", "rgb(197,27,138)", "rgb(122,1,119)"], "7": ["rgb(254,235,226)", "rgb(252,197,192)", "rgb(250,159,181)", "rgb(247,104,161)", "rgb(221,52,151)", "rgb(174,1,126)", "rgb(122,1,119)"], "8": ["rgb(255,247,243)", "rgb(253,224,221)", "rgb(252,197,192)", "rgb(250,159,181)", "rgb(247,104,161)", "rgb(221,52,151)", "rgb(174,1,126)", "rgb(122,1,119)"], "9": ["rgb(255,247,243)", "rgb(253,224,221)", "rgb(252,197,192)", "rgb(250,159,181)", "rgb(247,104,161)", "rgb(221,52,151)", "rgb(174,1,126)", "rgb(122,1,119)", "rgb(73,0,106)"], "type": "seq"} ,
	"Greens":  {"3": ["rgb(229,245,224)", "rgb(161,217,155)", "rgb(49,163,84)"], "4": ["rgb(237,248,233)", "rgb(186,228,179)", "rgb(116,196,118)", "rgb(35,139,69)"], "5": ["rgb(237,248,233)", "rgb(186,228,179)", "rgb(116,196,118)", "rgb(49,163,84)", "rgb(0,109,44)"], "6": ["rgb(237,248,233)", "rgb(199,233,192)", "rgb(161,217,155)", "rgb(116,196,118)", "rgb(49,163,84)", "rgb(0,109,44)"], "7": ["rgb(237,248,233)", "rgb(199,233,192)", "rgb(161,217,155)", "rgb(116,196,118)", "rgb(65,171,93)", "rgb(35,139,69)", "rgb(0,90,50)"], "8": ["rgb(247,252,245)", "rgb(229,245,224)", "rgb(199,233,192)", "rgb(161,217,155)", "rgb(116,196,118)", "rgb(65,171,93)", "rgb(35,139,69)", "rgb(0,90,50)"], "9": ["rgb(247,252,245)", "rgb(229,245,224)", "rgb(199,233,192)", "rgb(161,217,155)", "rgb(116,196,118)", "rgb(65,171,93)", "rgb(35,139,69)", "rgb(0,109,44)", "rgb(0,68,27)"], "type": "seq"} ,
	"YlGnBu":  {"3": ["rgb(237,248,177)", "rgb(127,205,187)", "rgb(44,127,184)"], "4": ["rgb(255,255,204)", "rgb(161,218,180)", "rgb(65,182,196)", "rgb(34,94,168)"], "5": ["rgb(255,255,204)", "rgb(161,218,180)", "rgb(65,182,196)", "rgb(44,127,184)", "rgb(37,52,148)"], "6": ["rgb(255,255,204)", "rgb(199,233,180)", "rgb(127,205,187)", "rgb(65,182,196)", "rgb(44,127,184)", "rgb(37,52,148)"], "7": ["rgb(255,255,204)", "rgb(199,233,180)", "rgb(127,205,187)", "rgb(65,182,196)", "rgb(29,145,192)", "rgb(34,94,168)", "rgb(12,44,132)"], "8": ["rgb(255,255,217)", "rgb(237,248,177)", "rgb(199,233,180)", "rgb(127,205,187)", "rgb(65,182,196)", "rgb(29,145,192)", "rgb(34,94,168)", "rgb(12,44,132)"], "9": ["rgb(255,255,217)", "rgb(237,248,177)", "rgb(199,233,180)", "rgb(127,205,187)", "rgb(65,182,196)", "rgb(29,145,192)", "rgb(34,94,168)", "rgb(37,52,148)", "rgb(8,29,88)"], "type": "seq"} ,
	"Purples":  {"3": ["rgb(239,237,245)", "rgb(188,189,220)", "rgb(117,107,177)"], "4": ["rgb(242,240,247)", "rgb(203,201,226)", "rgb(158,154,200)", "rgb(106,81,163)"], "5": ["rgb(242,240,247)", "rgb(203,201,226)", "rgb(158,154,200)", "rgb(117,107,177)", "rgb(84,39,143)"], "6": ["rgb(242,240,247)", "rgb(218,218,235)", "rgb(188,189,220)", "rgb(158,154,200)", "rgb(117,107,177)", "rgb(84,39,143)"], "7": ["rgb(242,240,247)", "rgb(218,218,235)", "rgb(188,189,220)", "rgb(158,154,200)", "rgb(128,125,186)", "rgb(106,81,163)", "rgb(74,20,134)"], "8": ["rgb(252,251,253)", "rgb(239,237,245)", "rgb(218,218,235)", "rgb(188,189,220)", "rgb(158,154,200)", "rgb(128,125,186)", "rgb(106,81,163)", "rgb(74,20,134)"], "9": ["rgb(252,251,253)", "rgb(239,237,245)", "rgb(218,218,235)", "rgb(188,189,220)", "rgb(158,154,200)", "rgb(128,125,186)", "rgb(106,81,163)", "rgb(84,39,143)", "rgb(63,0,125)"], "type": "seq"} ,
	"GnBu":  {"3": ["rgb(224,243,219)", "rgb(168,221,181)", "rgb(67,162,202)"], "4": ["rgb(240,249,232)", "rgb(186,228,188)", "rgb(123,204,196)", "rgb(43,140,190)"], "5": ["rgb(240,249,232)", "rgb(186,228,188)", "rgb(123,204,196)", "rgb(67,162,202)", "rgb(8,104,172)"], "6": ["rgb(240,249,232)", "rgb(204,235,197)", "rgb(168,221,181)", "rgb(123,204,196)", "rgb(67,162,202)", "rgb(8,104,172)"], "7": ["rgb(240,249,232)", "rgb(204,235,197)", "rgb(168,221,181)", "rgb(123,204,196)", "rgb(78,179,211)", "rgb(43,140,190)", "rgb(8,88,158)"], "8": ["rgb(247,252,240)", "rgb(224,243,219)", "rgb(204,235,197)", "rgb(168,221,181)", "rgb(123,204,196)", "rgb(78,179,211)", "rgb(43,140,190)", "rgb(8,88,158)"], "9": ["rgb(247,252,240)", "rgb(224,243,219)", "rgb(204,235,197)", "rgb(168,221,181)", "rgb(123,204,196)", "rgb(78,179,211)", "rgb(43,140,190)", "rgb(8,104,172)", "rgb(8,64,129)"], "type": "seq"} ,
	"Greys":  {"3": ["rgb(240,240,240)", "rgb(189,189,189)", "rgb(99,99,99)"], "4": ["rgb(247,247,247)", "rgb(204,204,204)", "rgb(150,150,150)", "rgb(82,82,82)"], "5": ["rgb(247,247,247)", "rgb(204,204,204)", "rgb(150,150,150)", "rgb(99,99,99)", "rgb(37,37,37)"], "6": ["rgb(247,247,247)", "rgb(217,217,217)", "rgb(189,189,189)", "rgb(150,150,150)", "rgb(99,99,99)", "rgb(37,37,37)"], "7": ["rgb(247,247,247)", "rgb(217,217,217)", "rgb(189,189,189)", "rgb(150,150,150)", "rgb(115,115,115)", "rgb(82,82,82)", "rgb(37,37,37)"], "8": ["rgb(255,255,255)", "rgb(240,240,240)", "rgb(217,217,217)", "rgb(189,189,189)", "rgb(150,150,150)", "rgb(115,115,115)", "rgb(82,82,82)", "rgb(37,37,37)"], "9": ["rgb(255,255,255)", "rgb(240,240,240)", "rgb(217,217,217)", "rgb(189,189,189)", "rgb(150,150,150)", "rgb(115,115,115)", "rgb(82,82,82)", "rgb(37,37,37)", "rgb(0,0,0)"], "type": "seq"} ,
	"YlOrRd":  {"3": ["rgb(255,237,160)", "rgb(254,178,76)", "rgb(240,59,32)"], "4": ["rgb(255,255,178)", "rgb(254,204,92)", "rgb(253,141,60)", "rgb(227,26,28)"], "5": ["rgb(255,255,178)", "rgb(254,204,92)", "rgb(253,141,60)", "rgb(240,59,32)", "rgb(189,0,38)"], "6": ["rgb(255,255,178)", "rgb(254,217,118)", "rgb(254,178,76)", "rgb(253,141,60)", "rgb(240,59,32)", "rgb(189,0,38)"], "7": ["rgb(255,255,178)", "rgb(254,217,118)", "rgb(254,178,76)", "rgb(253,141,60)", "rgb(252,78,42)", "rgb(227,26,28)", "rgb(177,0,38)"], "8": ["rgb(255,255,204)", "rgb(255,237,160)", "rgb(254,217,118)", "rgb(254,178,76)", "rgb(253,141,60)", "rgb(252,78,42)", "rgb(227,26,28)", "rgb(177,0,38)"], "type": "seq"} ,
	"PuRd":  {"3": ["rgb(231,225,239)", "rgb(201,148,199)", "rgb(221,28,119)"], "4": ["rgb(241,238,246)", "rgb(215,181,216)", "rgb(223,101,176)", "rgb(206,18,86)"], "5": ["rgb(241,238,246)", "rgb(215,181,216)", "rgb(223,101,176)", "rgb(221,28,119)", "rgb(152,0,67)"], "6": ["rgb(241,238,246)", "rgb(212,185,218)", "rgb(201,148,199)", "rgb(223,101,176)", "rgb(221,28,119)", "rgb(152,0,67)"], "7": ["rgb(241,238,246)", "rgb(212,185,218)", "rgb(201,148,199)", "rgb(223,101,176)", "rgb(231,41,138)", "rgb(206,18,86)", "rgb(145,0,63)"], "8": ["rgb(247,244,249)", "rgb(231,225,239)", "rgb(212,185,218)", "rgb(201,148,199)", "rgb(223,101,176)", "rgb(231,41,138)", "rgb(206,18,86)", "rgb(145,0,63)"], "9": ["rgb(247,244,249)", "rgb(231,225,239)", "rgb(212,185,218)", "rgb(201,148,199)", "rgb(223,101,176)", "rgb(231,41,138)", "rgb(206,18,86)", "rgb(152,0,67)", "rgb(103,0,31)"], "type": "seq"} ,
	"Blues":  {"3": ["rgb(222,235,247)", "rgb(158,202,225)", "rgb(49,130,189)"], "4": ["rgb(239,243,255)", "rgb(189,215,231)", "rgb(107,174,214)", "rgb(33,113,181)"], "5": ["rgb(239,243,255)", "rgb(189,215,231)", "rgb(107,174,214)", "rgb(49,130,189)", "rgb(8,81,156)"], "6": ["rgb(239,243,255)", "rgb(198,219,239)", "rgb(158,202,225)", "rgb(107,174,214)", "rgb(49,130,189)", "rgb(8,81,156)"], "7": ["rgb(239,243,255)", "rgb(198,219,239)", "rgb(158,202,225)", "rgb(107,174,214)", "rgb(66,146,198)", "rgb(33,113,181)", "rgb(8,69,148)"], "8": ["rgb(247,251,255)", "rgb(222,235,247)", "rgb(198,219,239)", "rgb(158,202,225)", "rgb(107,174,214)", "rgb(66,146,198)", "rgb(33,113,181)", "rgb(8,69,148)"], "9": ["rgb(247,251,255)", "rgb(222,235,247)", "rgb(198,219,239)", "rgb(158,202,225)", "rgb(107,174,214)", "rgb(66,146,198)", "rgb(33,113,181)", "rgb(8,81,156)", "rgb(8,48,107)"], "type": "seq"} ,
	"PuBuGn":  {"3": ["rgb(236,226,240)", "rgb(166,189,219)", "rgb(28,144,153)"], "4": ["rgb(246,239,247)", "rgb(189,201,225)", "rgb(103,169,207)", "rgb(2,129,138)"], "5": ["rgb(246,239,247)", "rgb(189,201,225)", "rgb(103,169,207)", "rgb(28,144,153)", "rgb(1,108,89)"], "6": ["rgb(246,239,247)", "rgb(208,209,230)", "rgb(166,189,219)", "rgb(103,169,207)", "rgb(28,144,153)", "rgb(1,108,89)"], "7": ["rgb(246,239,247)", "rgb(208,209,230)", "rgb(166,189,219)", "rgb(103,169,207)", "rgb(54,144,192)", "rgb(2,129,138)", "rgb(1,100,80)"], "8": ["rgb(255,247,251)", "rgb(236,226,240)", "rgb(208,209,230)", "rgb(166,189,219)", "rgb(103,169,207)", "rgb(54,144,192)", "rgb(2,129,138)", "rgb(1,100,80)"], "9": ["rgb(255,247,251)", "rgb(236,226,240)", "rgb(208,209,230)", "rgb(166,189,219)", "rgb(103,169,207)", "rgb(54,144,192)", "rgb(2,129,138)", "rgb(1,108,89)", "rgb(1,70,54)"], "type": "seq"} ,
	
	"viridis": {"256": ["#440154","#440256","#450457","#450559","#46075a","#46085c","#460a5d","#460b5e","#470d60","#470e61","#471063","#471164","#471365","#481467","#481668","#481769","#48186a","#481a6c","#481b6d","#481c6e","#481d6f","#481f70","#482071","#482173","#482374","#482475","#482576","#482677","#482878","#482979","#472a7a","#472c7a","#472d7b","#472e7c","#472f7d","#46307e","#46327e","#46337f","#463480","#453581","#453781","#453882","#443983","#443a83","#443b84","#433d84","#433e85","#423f85","#424086","#424186","#414287","#414487","#404588","#404688","#3f4788","#3f4889","#3e4989","#3e4a89","#3e4c8a","#3d4d8a","#3d4e8a","#3c4f8a","#3c508b","#3b518b","#3b528b","#3a538b","#3a548c","#39558c","#39568c","#38588c","#38598c","#375a8c","#375b8d","#365c8d","#365d8d","#355e8d","#355f8d","#34608d","#34618d","#33628d","#33638d","#32648e","#32658e","#31668e","#31678e","#31688e","#30698e","#306a8e","#2f6b8e","#2f6c8e","#2e6d8e","#2e6e8e","#2e6f8e","#2d708e","#2d718e","#2c718e","#2c728e","#2c738e","#2b748e","#2b758e","#2a768e","#2a778e","#2a788e","#29798e","#297a8e","#297b8e","#287c8e","#287d8e","#277e8e","#277f8e","#27808e","#26818e","#26828e","#26828e","#25838e","#25848e","#25858e","#24868e","#24878e","#23888e","#23898e","#238a8d","#228b8d","#228c8d","#228d8d","#218e8d","#218f8d","#21908d","#21918c","#20928c","#20928c","#20938c","#1f948c","#1f958b","#1f968b","#1f978b","#1f988b","#1f998a","#1f9a8a","#1e9b8a","#1e9c89","#1e9d89","#1f9e89","#1f9f88","#1fa088","#1fa188","#1fa187","#1fa287","#20a386","#20a486","#21a585","#21a685","#22a785","#22a884","#23a983","#24aa83","#25ab82","#25ac82","#26ad81","#27ad81","#28ae80","#29af7f","#2ab07f","#2cb17e","#2db27d","#2eb37c","#2fb47c","#31b57b","#32b67a","#34b679","#35b779","#37b878","#38b977","#3aba76","#3bbb75","#3dbc74","#3fbc73","#40bd72","#42be71","#44bf70","#46c06f","#48c16e","#4ac16d","#4cc26c","#4ec36b","#50c46a","#52c569","#54c568","#56c667","#58c765","#5ac864","#5cc863","#5ec962","#60ca60","#63cb5f","#65cb5e","#67cc5c","#69cd5b","#6ccd5a","#6ece58","#70cf57","#73d056","#75d054","#77d153","#7ad151","#7cd250","#7fd34e","#81d34d","#84d44b","#86d549","#89d548","#8bd646","#8ed645","#90d743","#93d741","#95d840","#98d83e","#9bd93c","#9dd93b","#a0da39","#a2da37","#a5db36","#a8db34","#aadc32","#addc30","#b0dd2f","#b2dd2d","#b5de2b","#b8de29","#bade28","#bddf26","#c0df25","#c2df23","#c5e021","#c8e020","#cae11f","#cde11d","#d0e11c","#d2e21b","#d5e21a","#d8e219","#dae319","#dde318","#dfe318","#e2e418","#e5e419","#e7e419","#eae51a","#ece51b","#efe51c","#f1e51d","#f4e61e","#f6e620","#f8e621","#fbe723","#fde725"], "type": "seq"},
	"plasma": {"256": ["#0d0887","#100788","#130789","#16078a","#19068c","#1b068d","#1d068e","#20068f","#220690","#240691","#260591","#280592","#2a0593","#2c0594","#2e0595","#2f0596","#310597","#330597","#350498","#370499","#38049a","#3a049a","#3c049b","#3e049c","#3f049c","#41049d","#43039e","#44039e","#46039f","#48039f","#4903a0","#4b03a1","#4c02a1","#4e02a2","#5002a2","#5102a3","#5302a3","#5502a4","#5601a4","#5801a4","#5901a5","#5b01a5","#5c01a6","#5e01a6","#6001a6","#6100a7","#6300a7","#6400a7","#6600a7","#6700a8","#6900a8","#6a00a8","#6c00a8","#6e00a8","#6f00a8","#7100a8","#7201a8","#7401a8","#7501a8","#7701a8","#7801a8","#7a02a8","#7b02a8","#7d03a8","#7e03a8","#8004a8","#8104a7","#8305a7","#8405a7","#8606a6","#8707a6","#8808a6","#8a09a5","#8b0aa5","#8d0ba5","#8e0ca4","#8f0da4","#910ea3","#920fa3","#9410a2","#9511a1","#9613a1","#9814a0","#99159f","#9a169f","#9c179e","#9d189d","#9e199d","#a01a9c","#a11b9b","#a21d9a","#a31e9a","#a51f99","#a62098","#a72197","#a82296","#aa2395","#ab2494","#ac2694","#ad2793","#ae2892","#b02991","#b12a90","#b22b8f","#b32c8e","#b42e8d","#b52f8c","#b6308b","#b7318a","#b83289","#ba3388","#bb3488","#bc3587","#bd3786","#be3885","#bf3984","#c03a83","#c13b82","#c23c81","#c33d80","#c43e7f","#c5407e","#c6417d","#c7427c","#c8437b","#c9447a","#ca457a","#cb4679","#cc4778","#cc4977","#cd4a76","#ce4b75","#cf4c74","#d04d73","#d14e72","#d24f71","#d35171","#d45270","#d5536f","#d5546e","#d6556d","#d7566c","#d8576b","#d9586a","#da5a6a","#da5b69","#db5c68","#dc5d67","#dd5e66","#de5f65","#de6164","#df6263","#e06363","#e16462","#e26561","#e26660","#e3685f","#e4695e","#e56a5d","#e56b5d","#e66c5c","#e76e5b","#e76f5a","#e87059","#e97158","#e97257","#ea7457","#eb7556","#eb7655","#ec7754","#ed7953","#ed7a52","#ee7b51","#ef7c51","#ef7e50","#f07f4f","#f0804e","#f1814d","#f1834c","#f2844b","#f3854b","#f3874a","#f48849","#f48948","#f58b47","#f58c46","#f68d45","#f68f44","#f79044","#f79143","#f79342","#f89441","#f89540","#f9973f","#f9983e","#f99a3e","#fa9b3d","#fa9c3c","#fa9e3b","#fb9f3a","#fba139","#fba238","#fca338","#fca537","#fca636","#fca835","#fca934","#fdab33","#fdac33","#fdae32","#fdaf31","#fdb130","#fdb22f","#fdb42f","#fdb52e","#feb72d","#feb82c","#feba2c","#febb2b","#febd2a","#febe2a","#fec029","#fdc229","#fdc328","#fdc527","#fdc627","#fdc827","#fdca26","#fdcb26","#fccd25","#fcce25","#fcd025","#fcd225","#fbd324","#fbd524","#fbd724","#fad824","#fada24","#f9dc24","#f9dd25","#f8df25","#f8e125","#f7e225","#f7e425","#f6e626","#f6e826","#f5e926","#f5eb27","#f4ed27","#f3ee27","#f3f027","#f2f227","#f1f426","#f1f525","#f0f724","#f0f921"], "type": "seq"},
	"inferno": {"256": ["#000004","#010005","#010106","#010108","#02010a","#02020c","#02020e","#030210","#040312","#040314","#050417","#060419","#07051b","#08051d","#09061f","#0a0722","#0b0724","#0c0826","#0d0829","#0e092b","#10092d","#110a30","#120a32","#140b34","#150b37","#160b39","#180c3c","#190c3e","#1b0c41","#1c0c43","#1e0c45","#1f0c48","#210c4a","#230c4c","#240c4f","#260c51","#280b53","#290b55","#2b0b57","#2d0b59","#2f0a5b","#310a5c","#320a5e","#340a5f","#360961","#380962","#390963","#3b0964","#3d0965","#3e0966","#400a67","#420a68","#440a68","#450a69","#470b6a","#490b6a","#4a0c6b","#4c0c6b","#4d0d6c","#4f0d6c","#510e6c","#520e6d","#540f6d","#550f6d","#57106e","#59106e","#5a116e","#5c126e","#5d126e","#5f136e","#61136e","#62146e","#64156e","#65156e","#67166e","#69166e","#6a176e","#6c186e","#6d186e","#6f196e","#71196e","#721a6e","#741a6e","#751b6e","#771c6d","#781c6d","#7a1d6d","#7c1d6d","#7d1e6d","#7f1e6c","#801f6c","#82206c","#84206b","#85216b","#87216b","#88226a","#8a226a","#8c2369","#8d2369","#8f2469","#902568","#922568","#932667","#952667","#972766","#982766","#9a2865","#9b2964","#9d2964","#9f2a63","#a02a63","#a22b62","#a32c61","#a52c60","#a62d60","#a82e5f","#a92e5e","#ab2f5e","#ad305d","#ae305c","#b0315b","#b1325a","#b3325a","#b43359","#b63458","#b73557","#b93556","#ba3655","#bc3754","#bd3853","#bf3952","#c03a51","#c13a50","#c33b4f","#c43c4e","#c63d4d","#c73e4c","#c83f4b","#ca404a","#cb4149","#cc4248","#ce4347","#cf4446","#d04545","#d24644","#d34743","#d44842","#d54a41","#d74b3f","#d84c3e","#d94d3d","#da4e3c","#db503b","#dd513a","#de5238","#df5337","#e05536","#e15635","#e25734","#e35933","#e45a31","#e55c30","#e65d2f","#e75e2e","#e8602d","#e9612b","#ea632a","#eb6429","#eb6628","#ec6726","#ed6925","#ee6a24","#ef6c23","#ef6e21","#f06f20","#f1711f","#f1731d","#f2741c","#f3761b","#f37819","#f47918","#f57b17","#f57d15","#f67e14","#f68013","#f78212","#f78410","#f8850f","#f8870e","#f8890c","#f98b0b","#f98c0a","#f98e09","#fa9008","#fa9207","#fa9407","#fb9606","#fb9706","#fb9906","#fb9b06","#fb9d07","#fc9f07","#fca108","#fca309","#fca50a","#fca60c","#fca80d","#fcaa0f","#fcac11","#fcae12","#fcb014","#fcb216","#fcb418","#fbb61a","#fbb81d","#fbba1f","#fbbc21","#fbbe23","#fac026","#fac228","#fac42a","#fac62d","#f9c72f","#f9c932","#f9cb35","#f8cd37","#f8cf3a","#f7d13d","#f7d340","#f6d543","#f6d746","#f5d949","#f5db4c","#f4dd4f","#f4df53","#f4e156","#f3e35a","#f3e55d","#f2e661","#f2e865","#f2ea69","#f1ec6d","#f1ed71","#f1ef75","#f1f179","#f2f27d","#f2f482","#f3f586","#f3f68a","#f4f88e","#f5f992","#f6fa96","#f8fb9a","#f9fc9d","#fafda1","#fcffa4"], "type": "seq"},
	"magma": {"256": ["#000004","#010005","#010106","#010108","#020109","#02020b","#02020d","#03030f","#030312","#040414","#050416","#060518","#06051a","#07061c","#08071e","#090720","#0a0822","#0b0924","#0c0926","#0d0a29","#0e0b2b","#100b2d","#110c2f","#120d31","#130d34","#140e36","#150e38","#160f3b","#180f3d","#19103f","#1a1042","#1c1044","#1d1147","#1e1149","#20114b","#21114e","#221150","#241253","#251255","#271258","#29115a","#2a115c","#2c115f","#2d1161","#2f1163","#311165","#331067","#341069","#36106b","#38106c","#390f6e","#3b0f70","#3d0f71","#3f0f72","#400f74","#420f75","#440f76","#451077","#471078","#491078","#4a1079","#4c117a","#4e117b","#4f127b","#51127c","#52137c","#54137d","#56147d","#57157e","#59157e","#5a167e","#5c167f","#5d177f","#5f187f","#601880","#621980","#641a80","#651a80","#671b80","#681c81","#6a1c81","#6b1d81","#6d1d81","#6e1e81","#701f81","#721f81","#732081","#752181","#762181","#782281","#792282","#7b2382","#7c2382","#7e2482","#802582","#812581","#832681","#842681","#862781","#882781","#892881","#8b2981","#8c2981","#8e2a81","#902a81","#912b81","#932b80","#942c80","#962c80","#982d80","#992d80","#9b2e7f","#9c2e7f","#9e2f7f","#a02f7f","#a1307e","#a3307e","#a5317e","#a6317d","#a8327d","#aa337d","#ab337c","#ad347c","#ae347b","#b0357b","#b2357b","#b3367a","#b5367a","#b73779","#b83779","#ba3878","#bc3978","#bd3977","#bf3a77","#c03a76","#c23b75","#c43c75","#c53c74","#c73d73","#c83e73","#ca3e72","#cc3f71","#cd4071","#cf4070","#d0416f","#d2426f","#d3436e","#d5446d","#d6456c","#d8456c","#d9466b","#db476a","#dc4869","#de4968","#df4a68","#e04c67","#e24d66","#e34e65","#e44f64","#e55064","#e75263","#e85362","#e95462","#ea5661","#eb5760","#ec5860","#ed5a5f","#ee5b5e","#ef5d5e","#f05f5e","#f1605d","#f2625d","#f2645c","#f3655c","#f4675c","#f4695c","#f56b5c","#f66c5c","#f66e5c","#f7705c","#f7725c","#f8745c","#f8765c","#f9785d","#f9795d","#f97b5d","#fa7d5e","#fa7f5e","#fa815f","#fb835f","#fb8560","#fb8761","#fc8961","#fc8a62","#fc8c63","#fc8e64","#fc9065","#fd9266","#fd9467","#fd9668","#fd9869","#fd9a6a","#fd9b6b","#fe9d6c","#fe9f6d","#fea16e","#fea36f","#fea571","#fea772","#fea973","#feaa74","#feac76","#feae77","#feb078","#feb27a","#feb47b","#feb67c","#feb77e","#feb97f","#febb81","#febd82","#febf84","#fec185","#fec287","#fec488","#fec68a","#fec88c","#feca8d","#fecc8f","#fecd90","#fecf92","#fed194","#fed395","#fed597","#fed799","#fed89a","#fdda9c","#fddc9e","#fddea0","#fde0a1","#fde2a3","#fde3a5","#fde5a7","#fde7a9","#fde9aa","#fdebac","#fcecae","#fceeb0","#fcf0b2","#fcf2b4","#fcf4b6","#fcf6b8","#fcf7b9","#fcf9bb","#fcfbbd","#fcfdbf"], "type": "seq"},
	};
	
	var matplotlib = {
	"viridis": {"256": ["#440154","#440256","#450457","#450559","#46075a","#46085c","#460a5d","#460b5e","#470d60","#470e61","#471063","#471164","#471365","#481467","#481668","#481769","#48186a","#481a6c","#481b6d","#481c6e","#481d6f","#481f70","#482071","#482173","#482374","#482475","#482576","#482677","#482878","#482979","#472a7a","#472c7a","#472d7b","#472e7c","#472f7d","#46307e","#46327e","#46337f","#463480","#453581","#453781","#453882","#443983","#443a83","#443b84","#433d84","#433e85","#423f85","#424086","#424186","#414287","#414487","#404588","#404688","#3f4788","#3f4889","#3e4989","#3e4a89","#3e4c8a","#3d4d8a","#3d4e8a","#3c4f8a","#3c508b","#3b518b","#3b528b","#3a538b","#3a548c","#39558c","#39568c","#38588c","#38598c","#375a8c","#375b8d","#365c8d","#365d8d","#355e8d","#355f8d","#34608d","#34618d","#33628d","#33638d","#32648e","#32658e","#31668e","#31678e","#31688e","#30698e","#306a8e","#2f6b8e","#2f6c8e","#2e6d8e","#2e6e8e","#2e6f8e","#2d708e","#2d718e","#2c718e","#2c728e","#2c738e","#2b748e","#2b758e","#2a768e","#2a778e","#2a788e","#29798e","#297a8e","#297b8e","#287c8e","#287d8e","#277e8e","#277f8e","#27808e","#26818e","#26828e","#26828e","#25838e","#25848e","#25858e","#24868e","#24878e","#23888e","#23898e","#238a8d","#228b8d","#228c8d","#228d8d","#218e8d","#218f8d","#21908d","#21918c","#20928c","#20928c","#20938c","#1f948c","#1f958b","#1f968b","#1f978b","#1f988b","#1f998a","#1f9a8a","#1e9b8a","#1e9c89","#1e9d89","#1f9e89","#1f9f88","#1fa088","#1fa188","#1fa187","#1fa287","#20a386","#20a486","#21a585","#21a685","#22a785","#22a884","#23a983","#24aa83","#25ab82","#25ac82","#26ad81","#27ad81","#28ae80","#29af7f","#2ab07f","#2cb17e","#2db27d","#2eb37c","#2fb47c","#31b57b","#32b67a","#34b679","#35b779","#37b878","#38b977","#3aba76","#3bbb75","#3dbc74","#3fbc73","#40bd72","#42be71","#44bf70","#46c06f","#48c16e","#4ac16d","#4cc26c","#4ec36b","#50c46a","#52c569","#54c568","#56c667","#58c765","#5ac864","#5cc863","#5ec962","#60ca60","#63cb5f","#65cb5e","#67cc5c","#69cd5b","#6ccd5a","#6ece58","#70cf57","#73d056","#75d054","#77d153","#7ad151","#7cd250","#7fd34e","#81d34d","#84d44b","#86d549","#89d548","#8bd646","#8ed645","#90d743","#93d741","#95d840","#98d83e","#9bd93c","#9dd93b","#a0da39","#a2da37","#a5db36","#a8db34","#aadc32","#addc30","#b0dd2f","#b2dd2d","#b5de2b","#b8de29","#bade28","#bddf26","#c0df25","#c2df23","#c5e021","#c8e020","#cae11f","#cde11d","#d0e11c","#d2e21b","#d5e21a","#d8e219","#dae319","#dde318","#dfe318","#e2e418","#e5e419","#e7e419","#eae51a","#ece51b","#efe51c","#f1e51d","#f4e61e","#f6e620","#f8e621","#fbe723","#fde725"], "type": "seq"},
	};
	
	module.exports = colorbrewer;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var BoxplotModel = markmodel.MarkModel.extend({
	
	    defaults: function() {
	        return _.extend(markmodel.MarkModel.prototype.defaults(), {
	            _model_name: "BoxplotModel",
	            _view_name: "Boxplot",
	
	            x: [],
	            y: [],
	            scales_metadata: {
	                x: { orientation: "horizontal", dimension: "x" },
	                y: { orientation: "vertical", dimension: "y" }
	            },
	            stroke: null,
	            box_fill_color: "dodgerblue",
	            outlier_fill_color: "gray",
	            opacities: [],
	            box_width: null // auto calculate box width
	        });
	    },
	
	    initialize: function() {
	        BoxplotModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["x", "y"], this.update_data, this);
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.update_data();
	        this.update_domains();
	    },
	
	    update_data: function() {
	        var x_data = this.get_typed_field("x");
	        var y_data = this.get_typed_field("y");
	
	        y_data.forEach(function(elm) {
	            elm.sort(function(a, b) {
	                return a - b;
	            });
	        });
	
	        if(x_data.length > y_data.length) {
	            x_data = x_data.slice(0, y_data.length);
	        } else if(x_data.length < y_data.length) {
	            y_data = y_data.slice(0, x_data.length);
	        }
	
	        this.mark_data = _.zip(x_data, y_data);
	
	        this.update_domains();
	        this.trigger("data_updated");
	    },
	
	    update_domains: function() {
	        // color scale needs an issue in DateScaleModel to be fixed. It
	        // should be moved here as soon as that is fixed.
	
	        var scales = this.get("scales");
	        var x_scale = scales.x;
	        var y_scale = scales.y;
	        var size_scale = scales.size;
	        var opacity_scale = scales.opacity;
	
	        if(!this.get("preserve_domain").x && this.mark_data) {
	            x_scale.compute_and_set_domain(this.mark_data.map(function(elem) {
	                return elem[0];
	            }), this.model_id + "_x");
	        } else {
	            x_scale.del_domain([], this.model_id + "_x");
	        }
	        if(!this.get("preserve_domain").y && this.mark_data) {
	           //The values are sorted, so we are using that to calculate the min/max
	
	            var min = d3.min(this.mark_data.map(function(d) {
	                return d[1][0];
	            }));
	            var max = d3.max(this.mark_data.map(function(d) {
	                var values = d[1];
	                return values[values.length-1];
	            }));
	
	            y_scale.set_domain([min,max], this.model_id + "_y");
	
	        } else {
	            y_scale.del_domain([], this.model_id + "_y");
	        }
	    }
	});
	
	
	module.exports = {
	    BoxplotModel: BoxplotModel
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var scatterbase = __webpack_require__(37);
	
	
	var Label = scatterbase.ScatterBase.extend({
	
	    create_listeners: function() {
	        Label.__super__.create_listeners.apply(this);
	        this.model.on_some_change(["font_weight", "font_size", "colors",
	                                   "align", "font_unit"], this.update_style, this);
	        this.model.on_some_change(["x", "y", "x_offset", "y_offset",
	                                   "rotate_angle"], this.update_position, this);
	    },
	
	    update_default_opacities: function(animate) {
	        if (!this.model.dirty) {
	            var default_opacities = this.model.get("default_opacities");
	            var len_opac = default_opacities.length;
	            var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	
	            // update opacity scale range?
	            var that = this;
	            this.d3el.selectAll(".label")
	                .transition("update_default_opacities")
	                .duration(animation_duration)
	                .style("opacity", function(d, i) {
	                    return that.get_element_opacity(d, i);
	                });
	        }
	    },
	
	    update_default_size: function(animate) {
	        this.compute_view_padding();
	        // update size scale range?
	        if (!this.model.dirty) {
	            var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	            var that = this;
	            this.d3el.selectAll(".label")
	                .transition("update_default_size")
	                .duration(animation_duration)
	                .style("font-size", function(d, i) {
	                    return that.get_element_size(d);
	                });
	        }
	    },
	
	    create_listeners: function() {
	        Label.__super__.create_listeners.apply(this);
	        this.model.on_some_change(["font_weight", "default_size", "colors",
	                                   "align", "font_unit"], this.update_style, this);
	        this.model.on_some_change(["x", "y", "x_offset", "y_offset",
	                                   "rotate_angle"], this.update_position, this);
	    },
	
	    relayout: function() {
	        this.set_ranges();
	        this.update_position();
	    },
	
	    draw_elements: function(animate, elements_added) {
	        elements_added.append("text")
	            .classed("label element", true);
	
	        this.update_text();
	        this.update_style();
	        this.update_default_opacities(true);
	    },
	
	    update_text: function() {
	        this.d3el.selectAll(".object_grp")
	            .select(".label")
	            .text(function(d) { return d.text; });
	    },
	
	    get_element_size: function(data) {
	        var size_scale = this.scales.size;
	        var unit = this.model.get("font_unit");
	        if(size_scale && data.size !== undefined) {
	            return size_scale.scale(data.size) + unit;
	        }
	        return this.model.get("default_size") + unit;
	    },
	
	    get_element_rotation: function(data) {
	        var rotation_scale = this.scales.rotation;
	        return (!rotation_scale || !data.rotation) ? "rotate(" + this.model.get("rotate_angle") + ")" :
	            "rotate(" + rotation_scale.scale(data.rotation) + ")";
	    },
	
	    update_position: function() {
	        var that = this;
	        var x_scale = this.x_scale;
	        var y_scale = this.y_scale;
	        var x = (x_scale.model.type === "date") ?
	            this.model.get_date_elem("x") : this.model.get("x");
	        var y = (y_scale.model.type === "date") ?
	            this.model.get_date_elem("y") : this.model.get("y");
	        var x_offset = this.model.get("x_offset"),
	            y_offset = this.model.get("y_offset");
	        this.d3el.selectAll(".object_grp")
	            .attr("transform", function(d) {
	                return "translate(" + (x_scale.scale(d.x) + x_scale.offset + x_offset) +
	                                "," + (y_scale.scale(d.y) + y_scale.offset + y_offset) + ")" +
	                       that.get_element_rotation(d);
	            });
	    },
	
	    update_style: function() {
	        var that = this;
	        this.d3el.selectAll(".object_grp")
	            .select("text")
	            .attr("dominant-baseline", "central")
	            .style("font-size", function(d, i) {
	                return that.get_element_size(d);
	            })
	            .style("font-weight", this.model.get("font_weight"))
	            .style("text-anchor", this.model.get("align"));
	
	        this.d3el.selectAll(".label")
	            .style("fill", function(d, i) {
	                    return that.get_element_color(d,i);
	            });
	    },
	
	    color_scale_updated: function(animate) {
	        var that = this;
	        var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	
	        this.d3el.selectAll(".object_grp")
	            .select("text")
	            .transition("color_scale_updated")
	            .duration(animation_duration)
	            .style("fill", function(d, i) {
	                  return that.get_element_color(d, i);
	            });
	    },
	
	    set_default_style: function(indices) {
	        // For all the elements with index in the list indices, the default
	        // style is applied.
	        if(!indices || indices.length === 0) {
	            return;
	        }
	        var elements = this.d3el.selectAll(".element").filter(function(data, index) {
	            return indices.indexOf(index) !== -1;
	        });
	        var that = this;
	        elements
	            .style("font-size", function(d, i) {
	                return that.get_element_size(d);
	            })
	            .style("font-weight", this.model.get("font_weight"))
	            .style("text-anchor", this.model.get("align"))
	            .style("fill", function(d, i) {
	                    return that.get_element_color(d, i);
	            });
	    },
	
	    set_drag_style: function(d, i, dragged_node) {
	        var dragged_size = (this.model.get("drag_size") *
	            this.model.get("default_size")) + this.model.get("font_unit");
	        d3.select(dragged_node)
	          .select("text")
	          .classed("drag_label", true)
	          .transition("set_drag_style")
	          .style("font-size", (dragged_size));
	    },
	
	    reset_drag_style: function(d, i, dragged_node) {
	        d3.select(dragged_node)
	          .select("text")
	          .classed("drag_label", false)
	          .transition("reset_drag_style")
	          .style("font-size", this.get_element_size(d));
	    },
	});
	
	module.exports = {
	    Label: Label
	};
	


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var utils = __webpack_require__(10);
	var mark = __webpack_require__(15);
	
	var ScatterBase = mark.Mark.extend({
	
	    render: function() {
	        var base_creation_promise = ScatterBase.__super__.render.apply(this);
	
	        var that = this;
	        this.drag_listener = d3.behavior.drag()
	          .on("dragstart", function(d, i) { return that.drag_start(d, i, this); })
	          .on("drag", function(d, i) { return that.on_drag(d, i, this); })
	          .on("dragend", function(d, i) { return that.drag_ended(d, i, this); });
	
	        this.selected_style = this.model.get("selected_style");
	        this.unselected_style = this.model.get("unselected_style");
	        this.selected_indices = this.model.get("selected");
	
	        this.hovered_style = this.model.get("hovered_style");
	        this.unhovered_style = this.model.get("unhovered_style");
	        this.hovered_index = (!this.model.get("hovered_point")) ? null: [this.model.get("hovered_point")];
	
	        this.display_el_classes = ["dot", "legendtext"]; //FIXME
	        this.event_metadata = {
	            "mouse_over": {
	                "msg_name": "hover",
	                "lookup_data": false,
	                "hit_test": true
	            },
	            "legend_clicked":  {
	                "msg_name": "legend_click",
	                "hit_test": true
	            },
	            "element_clicked": {
	                "msg_name": "element_click",
	                "lookup_data": false,
	                "hit_test": true
	            },
	            "parent_clicked": {
	                "msg_name": "background_click",
	                "hit_test": false
	            }
	        };
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	
	        return base_creation_promise.then(function() {
	            that.event_listeners = {};
	            that.process_interactions();
	            that.create_listeners();
	            that.compute_view_padding();
	            that.draw();
	        });
	    },
	
	    set_ranges: function() {
	        var x_scale = this.scales.x,
	            y_scale = this.scales.y,
	            size_scale = this.scales.size,
	            opacity_scale = this.scales.opacity,
	            skew_scale = this.scales.skew,
	            rotation_scale = this.scales.rotation;
	        if(x_scale) {
	            x_scale.set_range(this.parent.padded_range("x", x_scale.model));
	        }
	        if(y_scale) {
	            y_scale.set_range(this.parent.padded_range("y", y_scale.model));
	        }
	        if(size_scale) {
	            size_scale.set_range([0, this.model.get("default_size")]);
	        }
	        if(opacity_scale) {
	            opacity_scale.set_range([0.2, 1]);
	        }
	        if(skew_scale) {
	            skew_scale.set_range([0, 1]);
	        }
	        if(rotation_scale) {
	            rotation_scale.set_range([0, 180]);
	        }
	    },
	
	    set_positional_scales: function() {
	        this.x_scale = this.scales.x;
	        this.y_scale = this.scales.y;
	        // If no scale for "x" or "y" is specified, figure scales are used.
	        if(!this.x_scale) {
	            this.x_scale = this.parent.scale_x;
	        }
	        if(!this.y_scale) {
	            this.y_scale = this.parent.scale_y;
	        }
	        this.listenTo(this.x_scale, "domain_changed", function() {
	            if (!this.model.dirty) {
	                var animate = true;
	                this.update_position(animate); }
	        });
	        this.listenTo(this.y_scale, "domain_changed", function() {
	            if (!this.model.dirty) {
	                var animate = true;
	                this.update_position(animate); }
	        });
	    },
	
	    initialize_additional_scales: function() {
	        // function to create the additional scales and create the
	        // listeners for the additional scales
	        var color_scale = this.scales.color,
	            size_scale = this.scales.size,
	            opacity_scale = this.scales.opacity,
	            skew_scale = this.scales.skew,
	            rotation_scale = this.scales.rotation;
	        // the following handlers are for changes in data that does not
	        // impact the position of the elements
	        if (color_scale) {
	            this.listenTo(color_scale, "domain_changed", function() {
	                var animate = true;
	                this.color_scale_updated(animate);
	            });
	            color_scale.on("color_scale_range_changed",
	                            this.color_scale_updated, this);
	        }
	        if (size_scale) {
	            this.listenTo(size_scale, "domain_changed", function() {
	                var animate = true;
	                this.update_default_size(animate);
	            });
	        }
	        if (opacity_scale) {
	            this.listenTo(opacity_scale, "domain_changed", function() {
	                var animate = true;
	                this.update_default_opacities(animate);
	            });
	        }
	        if (skew_scale) {
	            this.listenTo(skew_scale, "domain_changed", function() {
	                var animate = true;
	                this.update_default_skew(animate);
	            });
	        }
	        if (rotation_scale) {
	            this.listenTo(rotation_scale, "domain_changed", function() {
	                var animate = true;
	                this.update_position(animate);
	            });
	        }
	    },
	
	    create_listeners: function() {
	        ScatterBase.__super__.create_listeners.apply(this);
	        this.d3el.on("mouseover", _.bind(function() {
	              this.event_dispatcher("mouse_over");
	          }, this))
	          .on("mousemove", _.bind(function() {
	              this.event_dispatcher("mouse_move");
	          }, this))
	          .on("mouseout", _.bind(function() {
	              this.event_dispatcher("mouse_out");
	          }, this));
	
	        this.listenTo(this.model, "data_updated", function() {
	            //animate dots on data update
	            var animate = true;
	            this.draw(animate);
	        }, this);
	        this.listenTo(this.model, "change:tooltip", this.create_tooltip, this);
	        this.listenTo(this.model, "change:enable_hover", function() { this.hide_tooltip(); }, this);
	        this.listenTo(this.model, "change:interactions", this.process_interactions);
	        this.listenTo(this.model, "change:enable_move", this.set_drag_behavior);
	        this.listenTo(this.model, "change:selected", this.update_selected);
	        this.listenTo(this.model, "change:hovered_point", this.update_hovered);
	        this.listenTo(this.model, "change:hovered_style", this.hovered_style_updated, this);
	        this.listenTo(this.model, "change:unhovered_style", this.unhovered_style_updated, this);
	        this.listenTo(this.parent, "bg_clicked", function() {
	            this.event_dispatcher("parent_clicked");
	        });
	    },
	
	    // The following three functions are convenience functions to get
	    // the fill color / opacity / size of an element given the data.
	    // In fact they are more than convenience functions as they limit the
	    // points of entry to that logic which makes it easier to manage and to
	    // keep consistent across different places where we use it.
	    get_element_color: function(data, index) {
	        var color_scale = this.scales.color;
	        var colors = this.model.get("colors");
	        var len = colors.length;
	        if(color_scale && data.color !== undefined && data.color !== null) {
	            return color_scale.scale(data.color);
	        }
	        return colors[index % len];
	    },
	
	    get_element_size: function(data) {
	        var size_scale = this.scales.size;
	        if(size_scale && data.size !== undefined) {
	            return size_scale.scale(data.size);
	        }
	        return this.model.get("default_size");
	    },
	
	    get_element_opacity: function(data, index) {
	        var opacity_scale = this.scales.opacity;
	        var default_opacities = this.model.get("default_opacities");
	        var len = default_opacities.length;
	        if(opacity_scale && data.opacity !== undefined) {
	            return opacity_scale.scale(data.opacity);
	        }
	        return default_opacities[index % len];
	    },
	
	    get_element_skew: function(data) {
	        var skew_scale = this.scales.skew;
	        if(skew_scale && data.skew !== undefined) {
	            return skew_scale.scale(data.skew);
	        }
	        return this.model.get("default_skew");
	    },
	
	    get_element_rotation: function(d) {
	        var rotation_scale = this.scales.rotation;
	        return (!rotation_scale || !d.rotation) ? "" :
	            "rotate(" + rotation_scale.scale(d.rotation) + ")";
	    },
	
	    relayout: function() {
	        this.set_ranges();
	        this.update_position();
	    },
	
	    update_position: function(animate) {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        var that = this;
	        var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	
	        this.d3el.selectAll(".object_grp").transition("update_position")
	            .duration(animation_duration)
	            .attr("transform", function(d) {
	                return "translate(" + (x_scale.scale(d.x) + x_scale.offset) +
	                                "," + (y_scale.scale(d.y) + y_scale.offset) + ")" +
	                       that.get_element_rotation(d);
	            });
	        this.x_pixels = this.model.mark_data.map(function(el) { return x_scale.scale(el.x) + x_scale.offset; });
	        this.y_pixels = this.model.mark_data.map(function(el) { return y_scale.scale(el.y) + y_scale.offset; });
	        this.pixel_coords = this.model.mark_data.map(function(el) {
	                return [x_scale.scale(el.x) + x_scale.offset,
	                        y_scale.scale(el.y) + y_scale.offset];
	            });
	    },
	
	    draw: function(animate) {
	        this.set_ranges();
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        var that = this,
	            fill = this.model.get("fill");
	
	        var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	
	        var elements = this.d3el.selectAll(".object_grp")
	            .data(this.model.mark_data, function(d) { return d.unique_id; });
	
	        var elements_added = elements.enter().append("g")
	            .attr("class", "object_grp")
	
	        this.update_position(animate);
	
	        this.set_drag_behavior();
	        elements.on("click", _.bind(function(d, i) {
	            this.event_dispatcher("element_clicked",
				      {"data": d, "index": i});
	        }, this));
		    elements.on("mouseover", _.bind(function(d, i) {
			    this.scatter_hover_handler({"data": d, "index": i});
		    }, this));
		    elements.on("mouseout", _.bind(function() {
			    this.reset_hover();
		    }, this));
	
	        this.draw_elements(animate, elements_added)
	
	        // Removed the transition on exit as it was causing issues.
	        // Elements are not removed until the transition is complete and
	        // hence the setting styles function doesn't behave as intended.
	        // The only way to call the function after all of the elements are
	        // removed is round-about and doesn't look very nice visually.
	        elements.exit().remove();
	    },
	
	    draw_elements: function(animate, elements_added) {},
	
	    process_interactions: function() {
	        var interactions = this.model.get("interactions");
	        if(_.isEmpty(interactions)) {
	            //set all the event listeners to blank functions
	            this.reset_interactions();
	        } else {
	            if(interactions.click !== undefined &&
	               interactions.click !== null) {
	                if(interactions.click === "tooltip") {
	                    this.event_listeners.element_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                } else if (interactions.click === "add") {
	                    this.event_listeners.parent_clicked = this.add_element;
	                    this.event_listeners.element_clicked = function() {};
	                } else if (interactions.click == 'select') {
	   		            this.event_listeners.parent_clicked = this.reset_selection;
			            this.event_listeners.element_clicked = this.scatter_click_handler;
		            }
	            } else {
	                this.reset_click();
	            }
	            if(interactions.hover !== undefined &&
	              interactions.hover !== null) {
	                if(interactions.hover === "tooltip") {
	                    this.event_listeners.mouse_over = this.refresh_tooltip;
	                    this.event_listeners.mouse_move = this.move_tooltip;
	                    this.event_listeners.mouse_out = this.hide_tooltip;
	                }
	            } else {
	                this.reset_hover();
	            }
	            if(interactions.legend_click !== undefined &&
	              interactions.legend_click !== null) {
	                if(interactions.legend_click === "tooltip") {
	                    this.event_listeners.legend_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                }
	            } else {
	                this.event_listeners.legend_clicked = function() {};
	            }
	            if(interactions.legend_hover !== undefined &&
	              interactions.legend_hover !== null) {
	                if(interactions.legend_hover === "highlight_axes") {
	                    this.event_listeners.legend_mouse_over = _.bind(this.highlight_axes, this);
	                    this.event_listeners.legend_mouse_out = _.bind(this.unhighlight_axes, this);
	                }
	            } else {
	                this.reset_legend_hover();
	            }
	        }
	    },
	
		reset_hover: function() {
		    this.model.set("hovered_point", null);
		    this.hovered_index = null;
		    this.touch();
		},
	
		scatter_hover_handler: function(args) {
		    var data = args.data;
	        var index = args.index;
	
	        this.model.set("hovered_point",
	                       index, {updated_view: this});
		    this.touch();
	    },
	
	    reset_selection: function() {
	        this.model.set("selected", null);
	        this.selected_indices = null;
	        this.touch();
	    },
	
	    scatter_click_handler: function(args) {
	        var data = args.data;
	        var index = args.index;
	        var that = this;
	        var idx = this.model.get("selected");
	        var selected = idx ? utils.deepCopy(idx) : [];
	        // index of bar i. Checking if it is already present in the list.
	        var elem_index = selected.indexOf(index);
	        // Replacement for "Accel" modifier.
	        var accelKey = d3.event.ctrlKey || d3.event.metaKey;
	
	        if(elem_index > -1 && accelKey) {
	            // if the index is already selected and if accel key is
	            // pressed, remove the element from the list
	            selected.splice(elem_index, 1);
	        } else {
	            if(accelKey) {
	                //If accel is pressed and the bar is not already selcted
	                //add the bar to the list of selected bars.
	                selected.push(index);
	            }
	            // updating the array containing the bar indexes selected
	            // and updating the style
	            else {
	                //if accel is not pressed, then clear the selected ones
	                //and set the current element to the selected
	                selected = [];
	                selected.push(index);
	            }
	        }
	        this.model.set("selected",
	                       ((selected.length === 0) ? null : selected),
	                       {updated_view: this});
	        this.touch();
	        if(!d3.event) {
	            d3.event = window.event;
	        }
	        var e = d3.event;
	        if(e.cancelBubble !== undefined) { // IE
	            e.cancelBubble = true;
	        }
	        if(e.stopPropagation) {
	            e.stopPropagation();
	        }
	        e.preventDefault();
		},
	
	    // Hovered Style related functions
	    hovered_style_updated: function(model, style) {
	        this.hovered_style = style;
	        this.clear_style(model.previous("hovered_style"), this.hovered_index);
	        this.style_updated(style, this.hovered_index);
	    },
	
	    unhovered_style_updated: function(model, style) {
	        this.unhovered_style = style;
	        var hov_indices = this.hovered_index;
	        var unhovered_indices = (hov_indices) ?
	            _.range(this.model.mark_data.length).filter(function(index){
	                return hov_indices.indexOf(index) === -1;
	            }) : [];
	        this.clear_style(model.previous("unhovered_style"), unhovered_indices);
	        this.style_updated(style, unhovered_indices);
	    },
	
	
	    draw_legend: function(elem, x_disp, y_disp, inter_x_disp, inter_y_disp) {
	        this.legend_el = elem.selectAll(".legend" + this.uuid)
	          .data([this.model.mark_data[0]]);
	        var colors = this.model.get("colors"),
	            len = colors.length;
	
	        var that = this;
	        var rect_dim = inter_y_disp * 0.8;
	        var el_added = this.legend_el.enter()
	          .append("g")
	            .attr("class", "legend" + this.uuid)
	            .attr("transform", function(d, i) {
	                return "translate(0, " + (i * inter_y_disp + y_disp)  + ")";
	            })
	            .on("mouseover", _.bind(function() {
	               this.event_dispatcher("legend_mouse_over");
	            }, this))
	            .on("mouseout", _.bind(function() {
	               this.event_dispatcher("legend_mouse_out");
	            }, this))
	            .on("click", _.bind(function() {
	                this.event_dispatcher("legend_clicked");
	            }, this));
	
	        this.draw_legend_elements(el_added, rect_dim)
	
	        this.legend_el.append("text")
	          .attr("class","legendtext")
	          .attr("x", rect_dim * 1.2)
	          .attr("y", rect_dim / 2)
	          .attr("dy", "0.35em")
	          .text(function(d, i) {
	              return that.model.get("labels")[i];
	          })
	          .style("fill", function(d, i) {
	              return colors[i % len];
	          });
	
	        var max_length = d3.max(this.model.get("labels"), function(d) {
	            return d.length;
	        });
	
	        this.legend_el.exit().remove();
	        return [1, max_length];
	    },
	
	    draw_legend_elements: function(elements_added, rect_dim) {},
	
	    invert_point: function(pixel) {
	        if(pixel === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            return;
	        }
	
	        var x_scale = this.scales.x;
	        var abs_diff = this.x_pixels.map(function(elem) { return Math.abs(elem - pixel); });
	        var sel_index = abs_diff.indexOf(d3.min(abs_diff));
	
	        this.model.set("selected", [sel_index]);
	        this.touch();
	    },
	
	    selector_changed: function(point_selector, rect_selector) {
	        if(point_selector === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            return [];
	        }
	        var pixels = this.pixel_coords;
	        var indices = _.range(pixels.length);
	        var selected = _.filter(indices, function(index) {
	            return point_selector(pixels[index]);
	        });
	        this.model.set("selected", selected);
	        this.touch();
	    },
	
	    update_selected: function(model, value) {
	        this.selected_indices = value;
	        this.apply_styles();
	    },
	
	    update_hovered: function(model, value) {
	        this.hovered_index = value === null ? value : [value];
	        this.apply_styles();
	    },
	
	    apply_styles: function(style_arr) {
	        if(style_arr === undefined || style_arr == null) {
	            style_arr = [this.selected_style, this.unselected_style,
	                         this.hovered_style, this.unhovered_style];
	        }
	        ScatterBase.__super__.apply_styles.apply(this, [style_arr]);
	
	        var all_indices = _.range(this.model.mark_data.length);
	
	        this.set_style_on_elements(this.hovered_style, this.hovered_index);
	        var unhovered_indices = (!this.hovered_index) ?
	            [] : _.difference(all_indices, this.hovered_index);
	        this.set_style_on_elements(this.unhovered_style, unhovered_indices);
	    },
	
	    clear_style: function(style_dict, indices) {
	        // Function to clear the style of a dict on some or all the elements of the
	        // chart.If indices is null, clears the style on all elements. If
	        // not, clears on only the elements whose indices are mathcing.
	        //
	        // This function is not used right now. But it can be used if we
	        // decide to accommodate more properties than those set by default.
	        // Because those have to cleared specifically.
	        var elements = this.d3el.selectAll(".element");
	        if(indices) {
	            elements = elements.filter(function(d, index) {
	                return indices.indexOf(index) !== -1;
	            });
	        }
	        var clearing_style = {};
	        for(var key in style_dict) {
	            clearing_style[key] = null;
	        }
	        elements.style(clearing_style);
	    },
	
	    set_style_on_elements: function(style, indices) {
	        // If the index array is undefined or of length=0, exit the
	        // function without doing anything
	        if(!indices || indices.length === 0) {
	            return;
	        }
	        // Also, return if the style object itself is blank
	        if(Object.keys(style).length === 0) {
	            return;
	        }
	        var elements = this.d3el.selectAll(".element");
	        elements = elements.filter(function(data, index) {
	            return indices.indexOf(index) !== -1;
	        });
	        elements.style(style);
	    },
	
	    compute_view_padding: function() {
	        //This function computes the padding along the x and y directions.
	        //The value is in pixels.
	        var x_padding = Math.sqrt(this.model.get("default_size")) / 2 + 1.0;
	
	        if(x_padding !== this.x_padding || x_padding !== this.y_padding) {
	            this.x_padding = x_padding;
	            this.y_padding = x_padding;
	            this.trigger("mark_padding_updated");
	        }
	    },
	
	    update_array: function(d, i) {
	        var x_scale = this.scales.x,
	            y_scale = this.scales.y;
	
	        if (!this.model.get("restrict_y")){
	            var x_data = [];
	            this.model.get_typed_field("x").forEach(function(elem) {
	                x_data.push(elem);
	            });
	            x_data[i] = x_scale.scale.invert(d[0]);
	            this.model.set_typed_field("x", x_data);
	        }
	        if (!this.model.get("restrict_x")){
	            var y_data = [];
	            this.model.get_typed_field("y").forEach(function(elem) {
	                y_data.push(elem);
	            });
	            y_data[i] = y_scale.scale.invert(d[1]);
	            this.model.set_typed_field("y", y_data);
	        }
	        this.touch();
	    },
	
	    set_drag_behavior: function() {
	        var elements = this.d3el.selectAll(".object_grp");
	        if (this.model.get("enable_move")) {
	            elements.call(this.drag_listener);
	        } else {
	            elements.on(".drag", null);
	        }
	    },
	
	    set_drag_style: function(d, i, dragged_node) {},
	
	    reset_drag_style: function(d, i, dragged_node) {},
	
	    drag_start: function(d, i, dragged_node) {
	        // d[0] and d[1] will contain the previous position (in pixels)
	        // of the dragged point, for the length of the drag event
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        d[0] = x_scale.scale(d.x) + x_scale.offset;
	        d[1] = y_scale.scale(d.y) + y_scale.offset;
	
	        this.set_drag_style(d, i, dragged_node)
	
	        this.send({
	            event: "drag_start",
	            point: {x : d.x, y: d.y},
	            index: i
	        });
	    },
	
	    on_drag: function(d, i, dragged_node) {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        // If restrict_x is true, then the move is restricted only to the X
	        // direction.
	        var restrict_x = this.model.get("restrict_x"),
	            restrict_y = this.model.get("restrict_y");
	        if (restrict_x && restrict_y) { return; }
	        if (!restrict_y) { d[0] = d3.event.x; }
	        if (!restrict_x) { d[1] = d3.event.y; }
	
	        d3.select(dragged_node)
	          .attr("transform", function() {
	              return "translate(" + d[0] + "," + d[1] + ")";
	          });
	        this.send({
	            event: "drag",
	            origin: {x: d.x, y: d.y},
		        point: {
	                x: x_scale.invert(d[0]),
	                y: y_scale.invert(d[1])
	            },
	            index: i
	        });
	        if(this.model.get("update_on_move")) {
	            // saving on move if flag is set
	            this.update_array(d, i);
	        }
	    },
	
	    drag_ended: function(d, i, dragged_node) {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	
	        this.reset_drag_style(d, i, dragged_node);
	        this.update_array(d, i);
	        this.send({
	            event: "drag_end",
	            point: {
	                x: x_scale.invert(d[0]),
	                y: y_scale.invert(d[1])
	            },
	            index: i
	        });
	    },
	
	    selected_deleter: function() {
	        d3.event.stopPropagation();
	        return;
	    },
	
	    add_element: function() {
	        var mouse_pos = d3.mouse(this.el);
	        var curr_pos = [mouse_pos[0], mouse_pos[1]];
	
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        //add the new point to data
	        var x_data = [];
	        this.model.get_typed_field("x").forEach(function(d) {
	            x_data.push(d);
	        });
	        var y_data = [];
	        this.model.get_typed_field("y").forEach(function(d) {
	            y_data.push(d);
	        });
	        x_data.push(x_scale.scale.invert(curr_pos[0]));
	        y_data.push(y_scale.scale.invert(curr_pos[1]));
	        this.model.set_typed_field("x", x_data);
	        this.model.set_typed_field("y", y_data);
	        this.touch();
	        // adding the point and saving the model automatically triggers a
	        // draw which adds the new point because the data now has a new
	        // point
	    }
	});
	
	module.exports = {
	    ScatterBase: ScatterBase
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var basemodel = __webpack_require__(39);
	
	var LabelModel = basemodel.ScatterBaseModel.extend({
	
	    defaults: function () {
	        return _.extend(basemodel.ScatterBaseModel.prototype.defaults(), {
	            _model_name: "LabelModel",
	            _view_name: "Label",
	
	            x_offset: 0,
	            y_offset: 0,
	            rotate_angle: 0.0,
	            text: [],
	            font_size: 16.0,
	            font_unit: "px",
	            drag_size: 1.0,
	            font_weight: "bold",
	            align: "start",
	        });
	    },
	
	    initialize: function() {
	        // TODO: Normally, color, opacity and size should not require a redraw
	        LabelModel.__super__.initialize.apply(this, arguments);
	        this.on("change:text", this.update_data, this);
	    },
	
	    update_mark_data: function() {
	        LabelModel.__super__.update_mark_data.apply(this);
	        var text = this.get_typed_field("text");
	
	        this.mark_data.forEach(function(d, i){ d.text = text[i]; });
	    },
	
	    update_unique_ids: function() {
	        this.mark_data.forEach(function(data, index){
	                                   data.unique_id = "Label" + index;
	        });
	    },
	});
	
	module.exports = {
	    LabelModel: LabelModel
	};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var ScatterBaseModel = markmodel.MarkModel.extend({
	
	    defaults: function() {
	        return _.extend({}, markmodel.MarkModel.prototype.defaults, {
	        _model_name: "ScatterBaseModel",
	        _view_name: "ScatterBase",
	
	        x: [],
	        y: [],
	        color: null,
	        opacity: null,
	        size: null,
	        rotation: null,
	        hovered_point: null,
	        scales_metadata: {
	            x: { orientation: "horizontal", dimension: "x" },
	            y: { orientation: "vertical", dimension: "y" },
	            color: { dimension: "color" },
	            size: { dimension: "size" },
	            opacity: { dimension: "opacity" },
	            rotation: { dimension: "rotation" }
	        },
	        colors: [],
	        default_opacities: [],
	        enable_move: false,
	        enable_delete: false,
	        restrict_x: false,
	        restrict_y: false,
	        update_on_move: false
	        });
	    },
	
	    initialize: function() {
	        // TODO: Normally, color, opacity and size should not require a redraw
	        ScatterBaseModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["x", "y", "color", "opacity", "size", "rotation"], this.update_data, this);
	        // FIXME: replace this with on("change:preserve_domain"). It is not done here because
	        // on_some_change depends on the GLOBAL backbone on("change") handler which
	        // is called AFTER the specific handlers on("change:foobar") and we make that
	        // assumption.
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.update_data();
	    },
	
	    update_mark_data: function() {
	        var x_data = this.get_typed_field("x"),
	            y_data = this.get_typed_field("y"),
	            scales = this.get("scales"),
	            x_scale = scales.x,
	            y_scale = scales.y,
	            color_scale = scales.color;
	
	        if (x_data.length === 0 || y_data.length === 0) {
	            this.mark_data = [];
	        } else {
	            //FIXME:Temporary fix to avoid misleading NaN error due to X and Y
	            //being of different lengths. In particular, if Y is of a smaller
	            //length, throws an error on the JS side
	            var min_len = Math.min(x_data.length, y_data.length);
	            x_data = x_data.slice(0, min_len);
	            var color = this.get_typed_field("color"),
	                size = this.get_typed_field("size"),
	                opacity = this.get_typed_field("opacity"),
	                rotation = this.get_typed_field("rotation");
	
	            if(color_scale) {
	                if(!this.get("preserve_domain").color) {
	                    color_scale.compute_and_set_domain(color, this.model_id + "_color");
	                } else {
	                    color_scale.del_domain([], this.model_id + "_color");
	                }
	            }
	
	            this.mark_data = x_data.map(function(d, i) {
	                return {
	                    x: d,
	                    y: y_data[i],
	                    color: color[i],
	                    size: size[i],
	                    opacity: opacity[i],
	                    rotation: rotation[i],
	                    index: i
	                };
	            });
	        }
	    },
	
	    update_data: function() {
	        this.dirty = true;
	        this.update_mark_data();
	        this.update_unique_ids();
	        this.update_domains();
	        this.dirty = false;
	        this.trigger("data_updated");
	    },
	
	    update_unique_ids: function() {},
	
	    get_data_dict: function(data, index) {
	        return data;
	    },
	
	    update_domains: function() {
	        if (!this.mark_data) {
	            return;
	        }
	        // color scale needs an issue in DateScaleModel to be fixed. It
	        // should be moved here as soon as that is fixed.
	
	       var scales = this.get("scales");
	       for (var key in scales) {
	            if(scales.hasOwnProperty(key) && key != "color") {
	                var scale = scales[key];
	                if(!this.get("preserve_domain")[key]) {
	                    scale.compute_and_set_domain(this.mark_data.map(function(elem) {
	                        return elem[key];
	                    }), this.model_id + key);
	                } else {
	                    scale.del_domain([], this.model_id + key);
	                }
	            }
	       }
	    }
	});
	
	module.exports = {
	    ScatterBaseModel: ScatterBaseModel
	};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var _ = __webpack_require__(9);
	var d3 = __webpack_require__(8);
	var scalemodel = __webpack_require__(41);
	
	var OrdinalScaleModel = scalemodel.ScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(scalemodel.ScaleModel.prototype.defaults(), {
	            _model_name: "OrdinalScaleModel",
	            _view_name: "OrdinalScale",
	            min: null,
	            max: null,
	        });
	    },
	
	    initialize: function() {
	        OrdinalScaleModel.__super__.initialize.apply(this, arguments);
	    },
	
	    set_init_state: function() {
	        this.type = "ordinal";
	        this.min_from_data = true;
	        this.max_from_data = true;
	    },
	
	    set_listeners: function() {
	        this.on("change:domain", this.domain_changed, this);
	        this.domain_changed();
	        this.on("change:reverse", this.reverse_changed, this);
	        this.reverse_changed();
	    },
	
	    domain_changed: function() {
	        this.ord_domain = this.get("domain");
	        if(this.ord_domain !== null && this.ord_domain.length !== 0) {
	            this.max_from_data = false;
	            this.min_from_data = false;
	            this.domain = this.ord_domain.map(function(d) { return d; });
	            this.trigger("domain_changed");
	        } else {
	            this.max_from_data = true;
	            this.min_from_data = true;
	            this.domain = [];
	            this.update_domain();
	        }
	    },
	
	    reverse_changed: function(model, value, options) {
	        var prev_reverse = (model === undefined) ? false : model.previous("reverse");
	        this.reverse = this.get("reverse");
	
	        // the domain should be reversed only if the previous value of reverse
	        // is different from the current value. During init, domain should be
	        // reversed only if reverse is set to True.
	        var reverse_domain = (prev_reverse + this.reverse) % 2;
	        if(this.domain.length > 0 && reverse_domain === 1) {
	            this.domain.reverse();
	            this.trigger("domain_changed", this.domain);
	        }
	    },
	
	    update_domain: function() {
	        var domain = [];
	        // TODO: check for hasOwnProperty
	        for (var id in this.domains) {
	            domain = _.union(domain, this.domains[id]);
	        }
	        if(this.domain.length !== domain.length ||
	           (_.intersection(this.domain, domain)).length !== domain.length) {
	            this.domain = domain;
	            this.trigger("domain_changed", domain);
	        }
	    },
	
	    compute_and_set_domain: function(data_array, id) {
	        // Takes an array and calculates the domain for the particular
	        // view. If you have the domain already calculated on your side,
	        // call set_domain function.
	        if(!this.min_from_data && !this.max_from_data) {
	            return;
	        }
	        if(data_array.length === 0) {
	           this.set_domain([], id);
	           return;
	        }
	        var domain = _.flatten(data_array);
	        if(this.get("reverse")) {
	            domain.reverse();
	        }
	        this.set_domain(domain, id);
	    }
	});
	
	module.exports = {
	    OrdinalScaleModel: OrdinalScaleModel
	};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var basemodel = __webpack_require__(13);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var ScaleModel = basemodel.BaseModel.extend({
	
	    defaults: function() {
	        return _.extend(basemodel.BaseModel.prototype.defaults(), {
	            _model_name: "ScaleModel",
	             _view_name: "Scale",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	            reverse: false,
	            allow_padding: true
	        });
	    },
	
	    initialize: function() {
	        ScaleModel.__super__.initialize.apply(this, arguments);
	        this.domains = {};
	        this.domain = [];
	        this.set_init_state();
	        this.set_listeners();
	    },
	
	    set_init_state: function() {
	        this.type = "base";
	    },
	
	    set_listeners: function() {
	        // Function to be implementd by inherited classes.
	    },
	
	    set_domain: function(domain, id) {
	        // Call function only if you have computed the domain yourself. If
	        // you want the scale to compute the domain based on the data for
	        // your scale view, then call compute_and_set_domain
	        this.domains[id] = domain;
	        this.update_domain();
	    },
	
	    del_domain: function(domain, id) {
	        if(this.domains[id] !== undefined) {
	            delete this.domains[id];
	            this.update_domain();
	        }
	    }
	});
	
	module.exports = {
	    ScaleModel: ScaleModel
	};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var selector = __webpack_require__(29);
	var utils = __webpack_require__(10);
	var sel_utils = __webpack_require__(43);
	
	var BaseBrushSelector = {
	
	    brush_render: function() {
	        var that = this;
	        var scale_creation_promise = this.create_scales();
	        this.brushing = false;
	        
	        Promise.all([this.mark_views_promise, scale_creation_promise]).then(function() {
	            that.brush = d3.svg.brush()
	              .on("brushstart", _.bind(that.brush_start, that))
	              .on("brush", _.bind(that.brush_move, that))
	              .on("brushend", _.bind(that.brush_end, that));
	            that.set_brush_scale();
	
	            that.d3el.attr("class", "selector brushintsel");
	            that.brushsel = that.d3el.call(that.brush);
	            that.adjust_rectangle();
	            that.color_change();
	            that.create_listeners();
	            that.selected_changed();
	        });
	    },
	
	    color_change: function() {
	         if (this.model.get("color") !== null) {
	            this.brushsel.style("fill", this.model.get("color"));
	        }
	    },
	
	    brush_start: function () {
	        this.model.set("brushing", true);
	        this.touch();
	        this.brushing = true;
	    },
	
	    brush_move: function () {
	        var extent = this.brush.empty() ? [] : this.brush.extent();
	        this.convert_and_save(extent);
	    },
	
	    brush_end: function () {
	        var extent = this.brush.empty() ? [] : this.brush.extent();
	        this.model.set("brushing", false);
	        this.convert_and_save(extent);
	        this.brushing = false;
	    },
	
	    scale_changed: function() {
	        this.brush.clear();
	        this.create_scales();
	        this.set_brush_scale();
	    },
	
	    adjust_rectangle: function() {
	        if (this.model.get("orientation") == "vertical") {
	            this.d3el.selectAll("rect")
	              .attr("x", 0)
	              .attr("width", this.width);
	        } else {
	            this.d3el.selectAll("rect")
	              .attr("y", 0)
	              .attr("height", this.height);
	        }
	    },
	
	    _update_brush: function() {
	        // Programmatically setting the brush does not redraw it. It is
	        // being redrawn below
	        this.brushsel = this.d3el.call(this.brush);
	        this.d3el.call(this.brush.event);
	    },
	
	    update_mark_selected: function(extent_x, extent_y) {
	
	        if(extent_x === undefined || extent_x.length === 0) {
	            // Reset all the selected in marks
	            _.each(this.mark_views, function(mark_view) {
	                return mark_view.selector_changed();
	            });
	            return;
	        } if (extent_y === undefined) {
	            // 1d brush
	            var orient = this.model.get("orientation");
	            var x = (orient == "vertical") ? [] : extent_x,
	                y = (orient == "vertical") ? extent_x : [];
	        } else {
	            // 2d brush
	            var x = extent_x, y = extent_y;
	        }
	        var point_selector = function(p) {
	            return sel_utils.point_in_rectangle(p, x, y);
	        };
	        var rect_selector = function(xy) {
	            return sel_utils.rect_inter_rect(xy[0], xy[1], x, y);
	        };
	
	        _.each(this.mark_views, function(mark_view) {
	            mark_view.selector_changed(point_selector, rect_selector);
	        }, this);
	    },
	}
	
	var BrushSelector = selector.BaseXYSelector.extend(BaseBrushSelector).extend({
	
	    render: function() {
	        BrushSelector.__super__.render.apply(this);
	        this.brush_render();
	        // Put inside promise?
	        // this.is_x_date = (this.x_scale.model.type === "date");
	        // this.is_y_date = (this.y_scale.model.type === "date");
	    },
	
	    create_listeners: function() {
	        BrushSelector.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:color", this.color_change, this);
	        // Move these to BaseXYSelector
	        this.listenTo(this.model, "change:selected_x", this.selected_changed);
	        this.listenTo(this.model, "change:selected_y", this.selected_changed);
	    },
	
	    reset: function() {
	        // FIXME move this to BaseBrushSelector
	        this.brush.clear();
	        this._update_brush();
	        this.model.set("selected_x", {});
	        this.model.set("selected_y", {});
	        this.update_mark_selected();
	        this.touch();
	    },
	
	    convert_and_save: function(extent) {
	        if(extent.length === 0) {
	            this.update_mark_selected([]);
	            return;
	        }
	        var extent_x = [extent[0][0], extent[1][0]];
	        var extent_y = [extent[0][1], extent[1][1]];
	
	        var x_ordinal = (this.x_scale.model.type === "ordinal"),
	            y_ordinal = (this.y_scale.model.type === "ordinal");
	        var pixel_extent_x = x_ordinal ? extent_x : extent_x.map(this.x_scale.scale),
	            pixel_extent_y = y_ordinal ? extent_y : extent_y.map(this.y_scale.scale);
	        
	        extent_x = x_ordinal ? this.x_scale.invert_range(extent_x) : extent_x;
	        extent_y = y_ordinal ? this.y_scale.invert_range(extent_y) : extent_y;
	
	        this.update_mark_selected(pixel_extent_x, pixel_extent_y);
	        this.model.set_typed_field("selected_x", extent_x);
	        this.model.set_typed_field("selected_y", extent_y);
	        this.touch();
	    },
	
	    selected_changed: function(model, value) {
	        if(this.brushing) {
	            return;
	        }
	        //reposition the interval selector and set the selected attribute.
	        var selected_x = this.model.get_typed_field("selected_x"),
	            selected_y = this.model.get_typed_field("selected_y");
	        if(selected_x.length === 0 || selected_y.length === 0) {
	            this.reset();
	        } else if(selected_x.length != 2 || selected_y.length != 2) {
	            // invalid value for selected. Ignoring the value
	            return;
	        } else {
	            var extent = [[selected_x[0], selected_y[0]],
	                          [selected_x[1], selected_y[1]]];
	            this.brush.extent(extent);
	            this._update_brush();
	            var pixel_extent_x = selected_x.map(this.x_scale.scale).sort(
	                function(a, b) { return a - b; });
	            var pixel_extent_y = selected_y.map(this.y_scale.scale).sort(
	                function(a, b) { return a - b; });
	            this.update_mark_selected(pixel_extent_x, pixel_extent_y);
	        }
	    },
	
	    relayout: function() {
	        BrushSelector.__super__.relayout.apply(this);
	        this.d3el.select(".background")
	          .attr("width", this.width)
	          .attr("height", this.height);
	
	        this.set_x_range([this.x_scale]);
	        this.set_y_range([this.y_scale]);
	    },
	
	    adjust_rectangle: function() {
	    },
	
	    set_brush_scale: function() {
	        this.brush.y(this.y_scale.scale)
	          .x(this.x_scale.scale);
	    },
	
	    update_xscale_domain: function() {
	        // Call the base class function to update the scale.
	        BrushSelector.__super__.update_xscale_domain.apply(this);
	        if(this.brush !== undefined && this.brush !== null) {
	            this.brush.x(this.x_scale.scale);
	        }
	        // TODO:If there is a selection, update the visual element.
	
	    },
	
	    update_yscale_domain: function() {
	        // Call the base class function to update the scale.
	        BrushSelector.__super__.update_yscale_domain.apply(this);
	        if(this.brush !== undefined && this.brush !== null) {
	            this.brush.y(this.y_scale.scale);
	        }
	    },
	});
	
	var BrushIntervalSelector = selector.BaseXSelector.extend(BaseBrushSelector).extend({
	
	    render: function() {
	        BrushIntervalSelector.__super__.render.apply(this);
	        this.brush_render();
	    },
	
	    create_listeners: function() {
	        BrushIntervalSelector.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:color", this.change_color, this);
	    },
	
	    reset: function() {
	        this.brush.clear();
	        this._update_brush();
	
	        this.model.set("selected", {});
	        this.update_mark_selected();
	        this.touch();
	    },
	
	    convert_and_save: function(extent) {
	        if(extent.length === 0) {
	            this.update_mark_selected([]);
	            return;
	        }
	        var ordinal = (this.scale.model.type === "ordinal");
	        var pixel_extent = ordinal ? extent : extent.map(this.scale.scale);
	        extent = ordinal ? this.scale.invert_range(extent) : extent;
	
	        this.update_mark_selected(pixel_extent);
	
	        this.model.set_typed_field("selected", extent);
	        this.touch();
	    },
	
	    update_scale_domain: function(ignore_gui_update) {
	        // Call the base class function to update the scale.
	        BrushIntervalSelector.__super__.update_scale_domain.apply(this);
	        if(this.brush !== undefined && this.brush !== null) {
	            this.set_brush_scale();
	        }
	        if(ignore_gui_update !== true) {
	            this.selected_changed();
	        }
	    },
	
	    set_brush_scale: function() {
	        if (this.model.get("orientation") == "vertical") {
	                this.brush.y(this.scale.scale);
	            } else {
	                this.brush.x(this.scale.scale);
	            }
	    },
	
	    selected_changed: function(model, value) {
	        if(this.brushing) {
	            return;
	        }
	        //reposition the interval selector and set the selected attribute.
	        var selected = this.model.get_typed_field("selected");
	        if(selected.length === 0) {
	            this.reset();
	        } else if(selected.length != 2) {
	            // invalid value for selected. Ignoring the value
	            return;
	        } else {
	            var extent = [selected[0], selected[1]];
	            this.brush.extent(extent);
	            this._update_brush();
	            var pixel_extent = extent.map(this.scale.scale).sort(
	                function(a, b) { return a - b; });
	            this.update_mark_selected(pixel_extent);
	        }
	    },
	
	    remove: function() {
	        this.brush.clear();
	        BrushIntervalSelector.__super__.remove.apply(this);
	    },
	
	    relayout: function() {
	        BrushIntervalSelector.__super__.relayout.apply(this);
	
	        this.adjust_rectangle();
	        this.d3el.select(".background")
	          .attr("width", this.width)
	          .attr("height", this.height);
	
	        this.set_range([this.scale]);
	    },
	});
	
	var add_remove_classes = function(selection, add_classes, remove_classes) {
	    //adds the classes present in add_classes and removes the classes in
	    //the list remove_classes
	    //selection attribute should be a d3-selection
	    if(remove_classes) {
	        remove_classes.forEach(function(r_class) {
	            selection.classed(r_class, false);
	        });
	    }
	    if(add_classes) {
	        add_classes.forEach(function(a_class) {
	            selection.classed(a_class, true);
	        });
	    }
	};
	
	var MultiSelector = selector.BaseXSelector.extend(BaseBrushSelector).extend({
	
	    render: function() {
	        MultiSelector.__super__.render.apply(this);
	
	        var that = this;
	        this.names = this.model.get("names");
	        this.curr_index = 0;
	
	        var scale_creation_promise = this.create_scales();
	        Promise.all([this.mark_views_promise, scale_creation_promise]).then(function() {
	            that.d3el.attr("class", "multiselector");
	            that.create_brush();
	            that.selecting_brush = false;
	            that.create_listeners();
	        });
	    },
	
	    create_listeners: function() {
	        MultiSelector.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:names", this.labels_change, this);
	        this.listenTo(this.model, "change:color", this.color_change, this);
	    },
	
	    labels_change: function(model, value) {
	        var prev_names = model.previous("names");
	        this.names = value;
	
	        var data = _.range(this.curr_index + 1);
	        var that = this;
	        var selected = utils.deepCopy(this.model.get("selected"));
	        //TODO: Use do diff?
	        data.forEach(function(elem) {
	            var label = that.get_label(elem);
	            var prev_label = that.get_label(elem, prev_names);
	            if(prev_label !== label) {
	                that.d3el.select(".brush_text_" + elem).text(label);
	                selected[label] = selected[prev_label];
	                delete selected[prev_label];
	            }
	        });
	        this.model.set_typed_field("_selected", selected);
	        this.touch();
	    },
	
	    create_brush: function(event) {
	        // Function to add new brushes.
	        var that = this;
	        var index = this.curr_index;
	
	        var brush = d3.svg.brush()
	          .on("brushstart", function() { that.brush_start(); })
	          .on("brush", function() { that.brush_move(index, this); })
	          .on("brushend", function() { that.brush_end(index, this); });
	
	        var new_brush_g = this.d3el.append("g")
	          .attr("class", "selector brushintsel active");
	
	        new_brush_g.append("text")
	          .text(this.get_label(this.curr_index))
	          .attr("class", "brush_text_" + this.curr_index)
	          .style("text-anchor", "middle")
	          .style("stroke", "yellow")
	          .style("font-size", "16px")
	          .style("display", "none");
	
	        if (this.model.get("orientation") == "vertical") {
	            brush.y(this.scale.scale);
	            new_brush_g.select("text").attr("x", 30);
	        } else {
	            brush.x(this.scale.scale);
	            new_brush_g.select("text").attr("y", 30);
	        }
	        new_brush_g.call(brush);
	
	        this.color_change();
	        this.adjust_rectangle();
	
	        var old_handler = new_brush_g.on("mousedown.brush");
	        new_brush_g.on("mousedown.brush", function() {
	            add_remove_classes(that.d3el.selectAll(".selector"), ["inactive"], ["visible"]);
	            add_remove_classes(d3.select(this), ["active"], ["inactive"]);
	            old_handler.call(this);
	            // Replacement for "Accel" modifier.
	            d3.select(this).on("mousedown.brush", function() {
	                var accelKey = d3.event.ctrlKey || d3.event.metaKey;
	                if(d3.event.shiftKey && accelKey && d3.event.altKey) {
	                    that.reset();
	                } else if(accelKey) {
	                    add_remove_classes(d3.select(this), ["inactive"], ["active"]);
	                    that.create_brush(d3.event);
	                } else if(d3.event.shiftKey && that.selecting_brush === false) {
	                    add_remove_classes(that.d3el.selectAll(".selector"), ["visible"], ["active", "inactive"]);
	                    that.selecting_brush = true;
	                } else {
	                    add_remove_classes(that.d3el.selectAll(".selector"), ["inactive"], ["visible"]);
	                    add_remove_classes(d3.select(this), ["active"], ["inactive"]);
	                    old_handler.call(this);
	                    that.selecting_brush = false;
	                }
	            });
	        });
	        this.curr_index = this.curr_index + 1;
	        /* if(this.curr_index > 1) {
	            // Have to create a duplicate event and re dispatch it for the
	            // event to get triggered on the new brush.
	            // if curr_index === 1, then it is the first brush being
	            // created. So no duplicate event needs to dispatched.
	            var duplicate_event = new event.constructor(event.type, event);
	            new_brush_g.node().dispatchEvent(duplicate_event);
	        } */
	    },
	
	    get_label: function(index, arr) {
	        //arr is optional. If you do not pass anything, this.names is
	        //considered arr.
	        if(arr === undefined || arr === null) {
	            arr = this.names;
	        }
	        return (arr.length > index) ? arr[index] : index;
	    },
	
	    brush_start: function() {
	        this.model.set("brushing", true);
	        this.touch();
	    },
	
	    brush_move: function(item, brush_g) {
	        var brush = d3.event.target;
	        var extent = brush.empty() ? this.scale.scale.domain() : brush.extent();
	        var hide_names = !(this.model.get("show_names"));
	        d3.select(brush_g).select("text")
	          .style("display", ((brush.empty() || hide_names) ? "none" : "inline"));
	        this.set_text_location(brush_g, extent);
	        this.convert_and_save(extent, item);
	    },
	
	    set_text_location: function(brush_g, extent) {
	        var mid = (extent[0] + extent[1]) / 2;
	        if(this.scale.model.type === "date") {
	            mid = new Date((extent[0].getTime() + extent[1].getTime()) / 2);
	        }
	        var orient = (this.model.get("orientation") == "vertical") ? "y" : "x";
	        d3.select(brush_g).select("text")
	          .attr(orient, this.scale.scale(mid));
	    },
	
	    brush_end: function (item, brush_g) {
	        var brush = d3.event.target;
	        var extent = brush.empty() ?
	            this.scale.scale.domain() : brush.extent();
	        this.model.set("brushing", false);
	        this.convert_and_save(extent, item);
	    },
	
	    reset: function() {
	        this.d3el.selectAll(".selector")
	          .remove();
	        this.model.set("_selected", {});
	        this.curr_index = 0;
	        this.touch();
	        this.create_brush();
	    },
	
	    convert_and_save: function(extent, item) {
	        var that = this;
	        var selected = utils.deepCopy(this.model.get("_selected"));
	        selected[this.get_label(item)] = extent;
	        var pixel_extent = extent.map(this.scale.scale);
	        this.update_mark_selected(pixel_extent);
	        this.model.set("_selected", selected);
	        this.touch();
	    },
	
	    scale_changed: function() {
	        this.d3el.selectAll(".selector")
	          .remove();
	        this.curr_index = 0;
	        this.create_scale();
	        this.create_brush();
	    },
	
	    color_change: function() {
	        if (this.model.get("color") !== null) {
	            this.d3el.selectAll(".selector")
	              .style("fill", this.model.get("color"));
	        }
	    },
	
	    relayout: function() {
	        MultiSelector.__super__.relayout.apply(this);
	
	        this.adjust_rectangle();
	        this.d3el.select(".background")
	          .attr("width", this.width)
	          .attr("height", this.height);
	
	        this.set_range([this.scale]);
	    },
	
	    remove: function() {
	        this.model.off("change:names", null, this);
	        MultiSelector.__super__.remove.apply(this);
	    }
	});
	
	
	module.exports = {
	    BrushSelector: BrushSelector,
	    BrushIntervalSelector: BrushIntervalSelector,
	    MultiSelector: MultiSelector
	};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	/* This module contains elementary geometric functions to determine whether
	 * shapes are contained within selectors.
	 */
	
	var lasso = __webpack_require__(44);
	
	function point_in_rectangle(point, x, y) {
	    // Checks whether `point` is within the rectangle of coordinates
	    // (x0, y0) (x1, y0) (x1, y1) (x0, y1)
	    // If one of x or y is undefined, treat them as [-inf, inf]
	    
	    if (x.length == 0 && y.length == 0) { return false; }
	
	    var is_inside = true;
	    x.sort(function(a, b){return a-b});
	    y.sort(function(a, b){return a-b});
	
	    if (x.length != 0) {
	        is_inside = is_inside && x[0] <= point[0] && point[0] <= x[1];
	    }
	    if (y.length != 0) {
	        is_inside = is_inside && y[0] <= point[1] && point[1] <= y[1];
	    } 
	    return is_inside;
	}
	
	function rect_inter_rect(x0, y0, x1, y1) {
	    // Checks whether two rectangles intersect
	    return seg_inter_seg(x0, x1) && seg_inter_seg(y0, y1);
	}
	
	function lasso_inter_rect(x, y, vertices) {
	    // checks whether the lasso intersects the rectangle of coordinates
	    // (x0, y0) (x1, y0) (x1, y1) (x0, y1)
	
	    for (var i = 0; i < vertices.length; i++) {
	        if (point_in_rectangle(vertices[i], x, y)) { return true; }
	    }
	    return false;
	}
	
	function seg_inter_seg(p, q) {
	    // Checks whether the 1d segments [p0, p1] and [q0, q1] intersect
	    // If one of the segments is empty, treat it as [-inf, inf]
	    if (p.length == 0 || q.length == 0) {
	        return (p.length != 0 || q.length != 0);
	    }
	    p.sort(function(a, b){return a-b});
	    q.sort(function(a, b){return a-b});
	    return ((p[0] < q[0] != p[0] < q[1]) || (p[1] < q[0] != p[1] < q[1]) ||
	            (q[0] < p[0] != q[0] < p[1]) || (q[1] < p[0] != q[1] < p[1]));
	}
	
	module.exports = {
	    point_in_lasso: lasso.point_in_lasso,
	    point_in_rectangle: point_in_rectangle,
	    rect_inter_rect: rect_inter_rect,
	    lasso_inter_rect: lasso_inter_rect,
	}

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	/* Based on http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
	 *
	 * This file is licensed under the following license:
	 * 
	 * Copyright (c) 1970-2003, Wm. Randolph Franklin
	 * 
	 * Permission is hereby granted, free of charge, to any person
	 * obtaining a copy of this software and associated documentation
	 * files (the "Software"), to deal in the Software without
	 * restriction, including without limitation the rights to use, copy,
	 * modify, merge, publish, distribute, sublicense, and/or sell copies
	 * of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 * 
	 * 1. Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimers.
	 * 2. Redistributions in binary form must reproduce the above
	 *    copyright notice in the documentation and/or other materials
	 *    provided with the distribution.
	 * 3. The name of W. Randolph Franklin may not be used to endorse or
	 *    promote products derived from this Software without specific prior
	 *    written permission.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */
	
	function point_in_lasso(point, vertices) {
	    // Checks if a point is in lasso
	    var xi, xj, yi, yj, intersect,
	        x = point[0], y = point[1], is_inside = false;
	
	    for (var i = 0, j = vertices.length - 1; i < vertices.length; j = i++) {
	        xi = vertices[i][0],
	        yi = vertices[i][1],
	        xj = vertices[j][0],
	        yj = vertices[j][1],
	        intersect = ((yi > y) != (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
	        if (intersect) is_inside = !is_inside;
	    }
	    return is_inside;
	}
	
	module.exports = {
	    point_in_lasso: point_in_lasso,
	}


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var utils = __webpack_require__(10);
	var baseselector = __webpack_require__(29);
	var sel_utils = __webpack_require__(43);
	
	var LassoSelector = baseselector.BaseXYSelector.extend({
	    render: function() {
	        LassoSelector.__super__.render.apply(this);
	        var scale_creation_promise = this.create_scales();
	        this.line = d3.svg.line();
	        this.all_vertices = {};
	        this.lasso_counter = 0;
	
	        var that = this;
	        Promise.all([this.mark_views_promise, scale_creation_promise]).then(function() {
	            var drag = d3.behavior.drag()
	                .on("dragstart", _.bind(that.drag_start, that))
	                .on("drag", _.bind(that.drag_move, that))
	                .on("dragend", _.bind(that.drag_end, that));
	
	            d3.select(window).on("keydown", _.bind(that.keydown, that));
	
	            that.d3el.attr("class", "lassoselector");
	
	            //container for mouse events
	            that.background = that.d3el.append("rect")
	                .attr("x", 0)
	                .attr("y", 0)
	                .attr("width", that.width)
	                .attr("height", that.height)
	                .attr("visibility", "hidden")
	                .attr("pointer-events", "all")
	                .style("cursor", "crosshair")
	                .call(drag);
	
	            that.create_listeners();
	        });
	    },
	
	    create_listeners: function() {
	        LassoSelector.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:color", this.change_color, this);
	    },
	
	    change_color: function(model, color) {
	        if (color) {
	            this.d3el.selectAll("path").style("stroke", color);
	        }
	    },
	
	    create_new_lasso: function() {
	        var lasso = this.d3el.append("path")
	            .attr("id", "l" + (++this.lasso_counter))
	            .on("click", function() {
	                //toggle the opacity of lassos
	                var lasso = d3.select(this);
	                lasso.classed("selected", !lasso.classed("selected"));
	            });
	        var color = this.model.get("color");
	        if (color) {
	            lasso.style("stroke", color);
	        }
	    },
	
	    drag_start: function() {
	        this.current_vertices = [];
	        this.create_new_lasso();
	    },
	
	    drag_move: function() {
	        this.current_vertices.push(d3.mouse(this.background.node()));
	        this.d3el.select("#l" + this.lasso_counter)
	            .attr("d", this.line(this.current_vertices));
	    },
	
	    drag_end: function() {
	        var lasso_name = "l" + this.lasso_counter;
	        // Close the lasso
	        this.d3el.select("#" + lasso_name)
	            .attr("d", this.line(this.current_vertices) + "Z");
	        // Add the current vertices to the global lasso vertices
	        this.all_vertices[lasso_name] = this.current_vertices;
	        // Update selected for each mark
	        this.update_mark_selected(this.all_vertices)
	    },
	
	    update_mark_selected: function(vertices) {
	
	        if(vertices === undefined || vertices.length === 0) {
	            // Reset all the selected in marks
	            _.each(this.mark_views, function(mark_view) {
	                return mark_view.selector_changed();
	            });
	        }
	        var point_selector = function(p) {
	            for (var l in vertices) {
	                if (sel_utils.point_in_lasso(p, vertices[l])) { return true; }
	            } return false;
	        };
	        var rect_selector = function(xy) {
	            for (var l in vertices) {
	                if (sel_utils.lasso_inter_rect(xy[0], xy[1], vertices[l])) { return true; }
	            } return false;
	        };
	
	        _.each(this.mark_views, function(mark_view) {
	            mark_view.selector_changed(point_selector, rect_selector);
	        }, this);
	    },
	
	    relayout: function() {
	        LassoSelector.__super__.relayout.apply(this);
	        this.background.attr("width", this.width).attr("height", this.height);
	    },
	
	    keydown: function() {
	       // delete key pressed
	       if (d3.event.keyCode === 46) {
	           // Delete selected lassos
	           var lassos_to_delete = this.d3el.selectAll(".selected");
	           // Update the lasso vertices
	           var vertices = this.all_vertices;
	           lassos_to_delete.each(function() {
	               var lasso_name = d3.select(this).attr("id");
	               delete vertices[lasso_name];
	           });
	           lassos_to_delete.remove();
	           this.update_mark_selected(this.all_vertices);
	      }
	    },
	
	    reset: function() {
	        this.lasso_counter = 0;
	        this.all_vertices = {};
	        this.d3el.selectAll("path").remove();
	        this.update_mark_selected();
	    },
	});
	
	
	module.exports = {
	    LassoSelector: LassoSelector
	};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var d3 = __webpack_require__(8);
	var interaction = __webpack_require__(18);
	
	// TODO avoid code duplication for 'x' and 'y'
	
	var PanZoom = interaction.Interaction.extend({
	
	    render: function() {
	        PanZoom.__super__.render.apply(this);
	        var that = this;
	        this.d3el
	          .style({"cursor": "move"})
	          .on("mousedown", function() { that.mousedown(); })
	          .on("mousemove", function() { that.mousemove(); })
	          .on("mouseup", function() { that.mouseup(); })
	          .on("mousewheel", function() { that.mousewheel(); })
	          .on("DOMMouseScroll.zoom", function() { that.mousewheel(); })
	          .on("mousewheel.zoom", null)
	          .on("wheel.zoom", null);
	        this.active = false;
	
	        this.update_scales();
	        this.listenTo(this.model, "change:scales", this.update_scales, this);
	
	        this.set_ranges();
	        this.listenTo(this.parent, "margin_updated", this.set_ranges, this);
	    },
	
	    update_scales: function() {
	        var scales = this.model.get("scales");
	        var that = this;
	        this.scale_promises = widgets.resolvePromisesDict({
	            "x": Promise.all((scales.x || []).map(function(model) {
	                    return that.create_child_view(model);
	                 })),
	            "y": Promise.all((scales.y || []).map(function(model) {
	                    return that.create_child_view(model);
	                 })),
	        });
	        widgets.resolvePromisesDict(this.scale_promises)
	            .then(_.bind(this.set_ranges, this));
	    },
	
	    set_ranges: function() {
	       var that = this;
	       var i;
	       this.scale_promises.then(function(scale_views) {
	           var xscale_views = scale_views.x;
	           for (i=0; i<xscale_views.length; i++) {
	               xscale_views[i].set_range(that.parent.padded_range("x",
	                                                xscale_views[i].model));
	           }
	           var yscale_views = scale_views.y;
	           for (i=0; i<yscale_views.length; i++) {
	               yscale_views[i].set_range(that.parent.padded_range("y",
	                                                yscale_views[i].model));
	           }
	       });
	    },
	
	    mousedown: function () {
	        var scales = this.model.get("scales");
	        this.active = true;
	        this.d3el.style({"cursor": "move"});
	        this.previous_pos = d3.mouse(this.el);
	        // A copy of the original domains is required to avoid additional
	        // drift when Paning.
	        this.domains = {
	            "x": (scales.x || []).map(function(s) {
	                return s.domain.slice(0);
	            }),
	            "y": (scales.y || []).map(function(s) {
	                return s.domain.slice(0);
	            }),
	        };
	    },
	
	    mouseup: function () {
	        this.active = false;
	    },
	
	    mousemove: function() {
	        if (this.active && this.model.get("allow_pan")) {
	            // If memory is set to true, intermediate positions between the
	            // last position of the mouse and the current one will be
	            // interpolated.
	            var mouse_pos = d3.mouse(this.el);
	            if (!("previous_pos" in this)) {
	                this.previous_pos = mouse_pos;
	            }
	            var scales = this.model.get("scales");
	            var that = this;
	            this.scale_promises.then(function(scale_views) {
	                var xscale_views = scale_views.x;
	                var xdomains = that.domains.x;
	                var xdiffs = xscale_views.map(function(view) {
	                    if (view.scale.invert) {
	                        // Categorical scales don't have an inversion.
	                        return view.scale.invert(mouse_pos[0]) -
	                               view.scale.invert(that.previous_pos[0]);
	                    }
	                });
	                var i, domain, min, max;
	                for (i=0; i<xscale_views.length; i++) {
	                    domain = xdomains[i];
	                    min = domain[0] - xdiffs[i];
	                    max = domain[1] - xdiffs[i];
	                    that.set_scale_attribute(scales.x[i], "min", min);
	                    that.set_scale_attribute(scales.x[i], "max", max);
	                    // TODO? Only do in mouseup?
	                    xscale_views[i].touch();
	                }
	
	                var yscale_views = scale_views.y;
	                var ydomains = that.domains.y;
	                var ydiffs = yscale_views.map(function(view) {
	                    if (view.scale.invert) {
	                        // Categorical scales don't have an inversion.
	                        return view.scale.invert(mouse_pos[1]) -
	                               view.scale.invert(that.previous_pos[1]);
	                    }
	                });
	                for (i=0; i<yscale_views.length; i++) {
	                    domain = ydomains[i];
	                    min = domain[0] - ydiffs[i];
	                    max = domain[1] - ydiffs[i];
	                    that.set_scale_attribute(scales.y[i], "min", min);
	                    that.set_scale_attribute(scales.y[i], "max", max);
	                    // TODO? Only do this on mouseup?
	                    yscale_views[i].touch();
	                }
	            });
	        }
	    },
	
	    mousewheel: function() {
	        if (this.model.get("allow_zoom")) {
	            d3.event.preventDefault();
	            // With Firefox, wheelDelta is undefined.
	            var delta = d3.event.wheelDelta || d3.event.detail * (-40);
	            var mouse_pos = d3.mouse(this.el);
	            if (delta) {
	                if (delta > 0) {
	                    this.d3el.style({"cursor": "zoom-in"});
	                } else {
	                    this.d3el.style({"cursor": "zoom-out"});
	                }
	                var scales = this.model.get("scales");
	                var that = this;
	                this.scale_promises.then(function(scale_views) {
	                    var i, domain, min, max;
	                    var xscale_views = scale_views.x;
	                    var xpos = xscale_views.map(function(view) {
	                         return view.scale.invert(mouse_pos[0]);
	                    });
	                    var factor = Math.exp(-delta * 0.001);
	                    for (i=0; i<xscale_views.length; i++) {
	                        domain = scales.x[i].domain;
	                        min = domain[0];
	                        max = domain[1];
	                        that.set_scale_attribute(scales.x[i], "min",
	                                    (1 - factor) * xpos[i] + factor * min);
	                        that.set_scale_attribute(scales.x[i], "max",
	                                    (1 - factor) * xpos[i] + factor * max);
	                        // TODO? Only do in mouseup?
	                        xscale_views[i].touch();
	                    }
	
	                    var yscale_views = scale_views.y;
	                    var ypos = yscale_views.map(function(view) {
	                        return view.scale.invert(mouse_pos[1]);
	                    });
	                    for (i=0; i<yscale_views.length; i++) {
	                        domain = scales.y[i].domain;
	                        min = domain[0];
	                        max = domain[1];
	                        that.set_scale_attribute(scales.y[i], "min",
	                                    (1 - factor) * ypos[i] + factor * min);
	                        that.set_scale_attribute(scales.y[i], "max",
	                                    (1 - factor) * ypos[i] + factor * max);
	                        // TODO? Only do this on mouseup?
	                        yscale_views[i].touch();
	                    }
	                });
	            }
	        }
	    },
	
	    set_scale_attribute: function(scale, attribute_name, value) {
	        // The difference of two dates is an int. So we want to cast it to
	        // a date when setting the attribute for the date scale
	        if(scale.type == "date") {
	            value = (value instanceof Date) ? value : new Date(value);
	            //TODO: Function for setting date can be made the same as for
	            //other scale once the _pack_models is fixes
	            scale.set_date_elem(attribute_name, value);
	        } else {
	            scale.set(attribute_name, value);
	        }
	    }
	});
	
	module.exports = {
	    PanZoom: PanZoom
	};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var utils = __webpack_require__(10);
	var axis = __webpack_require__(6);
	
	var ColorBar = axis.Axis.extend({
	
	    render: function() {
	        this.parent = this.options.parent;
	        this.margin = this.parent.margin;
	        this.vertical = this.model.get("orientation") === "vertical";
	        this.height = this.parent.height - (this.margin.top + this.margin.bottom);
	        this.width = this.parent.width - (this.margin.left + this.margin.right);
	
	        var scale_promise = this.set_scale(this.model.get("scale"));
	        this.side = this.model.get("side");
	        this.x_offset = 100;
	        this.y_offset = 40;
	        this.bar_height = 20;
	        this.d3el.attr("class", "ColorBar")
	            .attr("display", (this.model.get("visible") ? "inline" : "none"))
	            .attr("transform", this.get_topg_transform());
	
	        this.ordinal = false;
	        this.num_ticks = this.model.get("num_ticks");
	        var that = this;
	        scale_promise.then(function() {
	            that.create_listeners();
	            that.tick_format = that.generate_tick_formatter();
	            that.set_scales_range();
	            that.append_axis();
	        });
	    },
	
	    create_listeners: function() {
	        this.listenTo(this.model, "change:scale", function(model, value) {
	            this.update_scale(model.previous("scale"), value);
	            // TODO: rescale_axis does too many things. Decompose
	            this.axis.scale(this.axis_scale.scale); // TODO: this is in redraw_axisline
	            this.rescale_axis();
	        }, this);
	
	        this.listenTo(this.model, "change:tick_format", this.tickformat_changed, this);
	        this.axis_scale.on("domain_changed", this.redraw_axisline, this);
	        this.axis_scale.on("color_scale_range_changed", this.redraw_axis, this);
	        this.axis_scale.on("highlight_axis", this.highlight, this);
	        this.axis_scale.on("unhighlight_axis", this.unhighlight, this);
	
	        this.parent.on("margin_updated", this.parent_margin_updated, this);
	        this.listenTo(this.model, "change:visible", this.update_visibility, this);
	        this.listenTo(this.model, "change:label", this.update_label, this);
	        this.model.on_some_change(["side", "orientation"], this.update_display, this);
	    },
	
	    update_display: function() {
	        this.side = this.model.get("side");
	        this.vertical = this.model.get("orientation") === "vertical";
	        this.rescale_axis();
	        this.d3el.select("#colorBarG" + this.cid)
	            .attr("transform", this.get_colorbar_transform());
	        this.d3el.select("#colorBarG" + this.cid)
	            .select(".g-rect")
	            .attr("transform", this.vertical ? "rotate(-90)" : "");
	        this.redraw_axisline();
	    },
	
	    set_scale: function(model) {
	        // Sets the child scale
	        var that = this;
	        if (this.axis_scale) { this.axis_scale.remove(); }
	        return this.create_child_view(model).then(function(view) {
	            // Trigger the displayed event of the child view.
	            that.displayed.then(function() {
	                view.trigger("displayed");
	            });
	            that.axis_scale = view;
	            // TODO: eventually removes what follows
	            if(that.axis_scale.model.type === "date_color_linear") {
	                that.axis_line_scale = d3.time.scale().nice();
	            } else if(that.axis_scale.model.type === "ordinal") {
	                that.axis_line_scale = d3.scale.ordinal();
	                that.ordinal = true;
	            } else {
	                that.axis_line_scale = d3.scale.linear();
	            }
	        });
	    },
	
	    append_axis: function() {
	        // The label is allocated a space of 100px. If the label
	        // occupies more than 100px then you are out of luck.
	        var that = this;
	        if(this.model.get("label") !== undefined && this.model.get("label") !== null) {
	            this.d3el.append("g")
	                .attr("transform", this.get_label_transform())
	                .attr("class", "axis label_g")
	                .append("text")
	                .append("tspan")
	                .attr("id", "text_elem")
	                .attr("dy", "0.5ex")
	                .text(this.model.get("label"))
	                .attr("class", "axislabel")
	                .style("text-anchor", this.vertical ? "middle" : "end");
	        }
	        var colorBar = this.d3el.append("g")
	            .attr("id","colorBarG" + this.cid);
	
	        this.draw_color_bar();
	        this.set_axisline_domain();
	
	        this.g_axisline = colorBar.append("g")
	            .attr("class", "axis");
	
	        this.axis = d3.svg.axis()
	            .tickFormat(this.tick_format);
	        this.redraw_axisline();
	    },
	
	    draw_color_bar: function() {
	        var colorBar = this.d3el.select("#colorBarG" + this.cid);
	        colorBar.attr("transform", this.get_colorbar_transform());
	        var that = this;
	        colorBar.selectAll(".g-rect")
	            .remove();
	        colorBar.selectAll(".g-defs")
	            .remove();
	
	        this.colors = this.axis_scale.scale.range();
	        var colorSpacing = 100 / (this.colors.length - 1);
	
	        if(this.ordinal) {
	            var bar_width = this.get_color_bar_width() / this.colors.length;
	            var rects = colorBar.append("g")
	                .attr("class", "g-rect axis")
	                .selectAll("rect")
	                .data(this.colors);
	
	            rects.enter()
	                .append("rect")
	                .attr("y", 0)
	                .attr("height", this.bar_height)
	                .attr("width", bar_width)
	                .style("fill", function(d) { return d; });
	
	            if(this.vertical) {
	                rects.attr("x", function(d, i) {
	                    return i * bar_width - (that.height - 2 * that.x_offset);
	                });
	            } else {
	                rects.attr("x", function(d, i) {
	                    return i * bar_width;
	                });
	            }
	        } else {
	            colorBar.append("g")
	                .attr("class", "g-defs")
	                .append("defs")
	                .append("linearGradient")
	                .attr({
	                    id : "colorBarGradient" + this.cid,
	                    x1 : "0%",
	                    y1 : "0%",
	                    x2 : "100%",
	                    y2 : "0%"
	                })
	                .selectAll("stop")
	                .data(this.colors)
	                .enter()
	                .append("stop")
	                .attr({
	                    "offset": function(d,i) {
	                        return colorSpacing * (i) + "%";
	                    },
	                    "stop-color": function(d,i) { return that.colors[i]; },
	                    "stop-opacity": 1
	                });
	
	            colorBar.append("g")
	                .attr("class", "g-rect axis")
	                .append("rect")
	                .attr({
	                    "width": this.get_color_bar_width(),
	                    "height": this.bar_height,
	                    x: (this.vertical) ? -(this.height - 2 * this.x_offset) : 0,
	                    y: 0,
	                    "stroke-width": 1
	                })
	                .style("fill","url(#colorBarGradient" + this.cid + ")");
	        }
	        if(this.vertical) {
	            colorBar.select(".g-rect")
	                .attr("transform", "rotate(-90)");
	        }
	    },
	
	    get_topg_transform: function() {
	        var em = 12;
	        if(this.vertical){
	            if(this.side === "right") {
	                return "translate(" + String(this.get_basic_transform() + this.margin.right / 2 - this.bar_height) + ", 0)";
	            }
	                return "translate(" + String(this.get_basic_transform() - this.margin.left / 2 + this.bar_height) + ", 0)";
	        } else {
	            if(this.side === "top") {
	                return "translate(0, " + String(this.get_basic_transform() - this.margin.top + this.bar_height + 2 * em) + ")";
	            }
	            return "translate(0, " + String(this.get_basic_transform() + this.margin.bottom - this.bar_height - 2 * em) + ")";
	        }
	    },
	
	    get_label_transform: function() {
	        if(this.vertical) {
	            return "translate(" + ((this.side === "right") ?
	                (this.bar_height / 2) : (-this.bar_height / 2)) + ", " + (this.x_offset - 15) + ")";
	        }
	        return "translate(" + (this.x_offset - 5) + ", " + (this.bar_height / 2)+ ")";
	    },
	
	    get_colorbar_transform: function() {
	        if(this.vertical) {
	            return "translate(0, " + String(this.x_offset) + ")" ;
	        }
	        return "translate(" + String(this.x_offset) + ", 0)";
	    },
	
	    set_axisline_scale_range: function() {
	        var range = (this.vertical) ?
	            [this.height - 2 * this.x_offset, 0] : [0, this.width -  2 * this.x_offset];
	        if(this.ordinal) {
	            this.axis_line_scale.rangeRoundBands(range, 0.05);
	        } else {
	            var mid = this.axis_scale.model.mid;
	            if (mid === undefined || mid === null) {
	                this.axis_line_scale.range(range);
	            } else {
	                this.axis_line_scale.range([range[0], (range[0] + range[1]) * 0.5, range[1]]);
	            }
	        }
	    },
	
	    set_scales_range: function() {
	        //Setting the range of the color scale
	        this.axis_scale.set_range();
	        this.set_axisline_scale_range();
	    },
	
	    get_color_bar_width: function() {
	        return (this.vertical) ? (this.height - (2 * this.x_offset)) : (this.width - 2 * this.x_offset);
	    },
	
	    update_label: function(model, value) {
	        this.d3el.select("#text_elem")
	            .text(this.model.get("label"));
	    },
	
	    rescale_axis: function() {
	        // rescale the axis
	        this.set_axisline_scale_range();
	        // shifting the entire g of the color bar first.
	        this.d3el.attr("transform", this.get_topg_transform());
	        var that = this;
	        var bar_width = this.get_color_bar_width() / this.colors.length;
	        if(this.ordinal) {
	            var rectangles = this.d3el.select("#colorBarG" + this.cid)
	                .select(".g-rect")
	                .selectAll("rect")
	                .attr("width", bar_width);
	            if(this.vertical) {
	                rectangles.attr("x", function(d, i) {
	                    return (i * bar_width) - (that.height - 2 * that.x_offset);
	                });
	            } else {
	                rectangles.attr("x", function(d, i) {
	                    return i * bar_width;
	                });
	            }
	        } else {
	            this.d3el.select("#colorBarG" + this.cid)
	                .select(".g-rect")
	                .selectAll("rect")
	                .attr("width", this.get_color_bar_width())
	                .attr("x", (this.vertical) ? -(this.height - 2 * this.x_offset) : 0);
	        }
	        if(this.model.get("label") !== undefined && this.model.get("label") !== null) {
	            this.d3el.select(".label_g")
	                .attr("transform", this.get_label_transform())
	                .select("#text_elem")
	                .style("text-anchor", this.vertical ? "middle" : "end");
	        }
	        this.g_axisline.call(this.axis);
	    },
	
	    redraw_axisline: function() {
	        if (this.axis) {
	            this.set_axisline_domain();
	            // We need to set the range of the axis line scale here again.
	            // Only because, if the domain has changed from a two element
	            // array to a three element one, the range of the axis has to
	            // be changed accordingly.
	            this.set_axisline_scale_range();
	            this.axis.orient(this.side)
	                .scale(this.axis_line_scale);
	            this.set_tick_values();
	
	            var transform;
	            if(this.vertical) {
	                transform = "translate(" + ((this.side === "right") ?
	                    this.bar_height : 0) + ", 0)";
	            } else {
	                transform = "translate(0, " + ((this.side === "top") ?
	                        0 : this.bar_height) + ")";
	            }
	            this.g_axisline.attr("transform", transform)
	                .call(this.axis);
	        }
	    },
	
	    set_axisline_domain: function() {
	        var domain = this.axis_scale.scale.domain();
	        var mid = this.axis_scale.model.mid;
	        if (mid === undefined || mid === null) {
	            this.axis_line_scale.domain([domain[0], domain[domain.length-1]]);
	        } else {
	            this.axis_line_scale.domain([domain[0], mid, domain[domain.length-1]]);
	        }
	    },
	
	    redraw_axis: function() {
	        this.draw_color_bar();
	        this.redraw_axisline();
	    }
	});
	
	module.exports = {
	    ColorAxis: ColorBar
	};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var basemodel = __webpack_require__(13);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var PanZoomModel = basemodel.BaseModel.extend({
	
	    defaults: function() {
	        return _.extend(basemodel.BaseModel.prototype.defaults(), {
	            _model_name: "PanZoomModel",
	            _view_name: "PanZoom",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	            scales: {},
	            allow_pan: true,
	            allow_zoom: true
	        });
	    },
	
	    initialize: function() {
	        PanZoomModel.__super__.initialize.apply(this, arguments);
	        this.on("change:scales", this.snapshot_scales, this);
	        this.snapshot_scales();
	    },
	
	    reset_scales: function() {
	        var that = this;
	        widgets.resolvePromisesDict(this.get("scales")).then(function(scales) {
	            _.each(Object.keys(scales), function(k) {
	                _.each(scales[k], function(s, i) {
	                    s.set_state(that.scales_states[k][i]);
	                }, that);
	            }, that);
	        });
	    },
	
	    snapshot_scales: function() {
	        // Save the state of the scales.
	        var that = this;
	        widgets.resolvePromisesDict(this.get("scales")).then(function(scales) {
	            that.scales_states = Object.keys(scales).reduce(function(obj, key) {
	                obj[key] = scales[key].map(function(s) {
	                    return s.get_state()
	                });
	                return obj;
	            }, {});
	        });
	    }
	}, {
	    serializers: _.extend({
	        scales: { deserialize: widgets.unpack_models },
	    }, basemodel.BaseModel.serializers)
	});
	
	module.exports = {
	    PanZoomModel: PanZoomModel
	};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var _ = __webpack_require__(9);
	var scale = __webpack_require__(32);
	
	var ColorScale = scale.Scale.extend({
	
	    render: function(){
	        this.create_d3_scale()
	        if(this.model.domain.length > 0) {
	            this.scale.domain(this.model.domain);
	        }
	        this.offset = 0;
	        this.create_event_listeners();
	        this.set_range();
	    },
	
	    create_d3_scale: function(){
	        this.scale = d3.scale.linear();
	    },
	
	    create_event_listeners: function() {
	        ColorScale.__super__.create_event_listeners.apply(this);
	        this.listenTo(this.model, "colors_changed", this.set_range, this);
	    },
	
	    set_range: function() {
	        this.scale.range(this.model.color_range);
	        this.trigger("color_scale_range_changed");
	    },
	});
	
	module.exports = {
	    ColorScale: ColorScale,
	};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var mark = __webpack_require__(15);
	var utils = __webpack_require__(10);
	var _ = __webpack_require__(9);
	
	var Pie = mark.Mark.extend({
	    render: function() {
	        var base_creation_promise = Pie.__super__.render.apply(this);
	        this.selected_indices = this.model.get("selected");
	        this.selected_style = this.model.get("selected_style");
	        this.unselected_style = this.model.get("unselected_style");
	
	        this.display_el_classes = ["slice", "text"];
	        var that = this;
	        this.pie_g = this.d3el.append("g").attr("class", "pie");
	        this.pie_g.append("g").attr("class", "slices");
	        this.pie_g.append("g").attr("class", "labels");
	        this.pie_g.append("g").attr("class", "lines");
	
	        var radius = this.model.get("radius");
	        var inner_radius = this.model.get("inner_radius");
	
	        var display_labels = this.model.get("display_labels");
	
	        if(display_labels === "outside") {
	            this.arc = d3.svg.arc()
	                .outerRadius(radius * 0.8)
	                .innerRadius(inner_radius * 0.8);
	
	            this.outer_arc = d3.svg.arc()
	                .innerRadius(radius * 0.9)
	                .outerRadius(radius * 0.9);
	        } else {
	            this.arc = d3.svg.arc()
	                .outerRadius(radius)
	                .innerRadius(inner_radius);
	        }
	
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	
	        this.join_key = function(d) { return d.data.label; };
	
	        return base_creation_promise.then(function() {
	            that.event_listeners = {};
	            that.process_interactions();
	            that.create_listeners();
	            that.compute_view_padding();
	            that.draw();
	        }, null);
	    },
	
	    set_ranges: function() {
	        var x_scale = this.scales.x;
	        if(x_scale) {
	            x_scale.set_range(this.parent.padded_range("x", x_scale.model));
	            this.x_offset = x_scale.offset;
	        }
	        var y_scale = this.scales.y;
	        if(y_scale) {
	            y_scale.set_range(this.parent.padded_range("y", y_scale.model));
	            this.y_offset = y_scale.offset;
	        }
	    },
	
	    set_positional_scales: function() {
	        // If no scale for "x" or "y" is specified, figure scales are used.
	        var x_scale = this.scales.x ? this.scales.x : this.parent.scale_x;
	        var y_scale = this.scales.y ? this.scales.y : this.parent.scale_y;
	
	        var that = this;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if (!that.model.dirty) { that.draw(); }
	        });
	        this.listenTo(y_scale, "domain_changed", function() {
	            if (!that.model.dirty) { that.draw(); }
	        });
	    },
	
	    create_listeners: function() {
	        Pie.__super__.create_listeners.apply(this);
	        this.d3el
	          .on("mouseover", _.bind(function() {
	              this.event_dispatcher("mouse_over");
	          }, this))
	          .on("mousemove", _.bind(function() {
	              this.event_dispatcher("mouse_move");
	          }, this))
	          .on("mouseout", _.bind(function() {
	              this.event_dispatcher("mouse_out");
	          }, this));
	
	        this.listenTo(this.model, "data_updated", function() {
	            //animate on data update
	            var animate = true;
	            this.draw(animate);
	        }, this);
	        this.listenTo(this.model, "change:colors", this.update_colors, this);
	        this.listenTo(this.model, "colors_updated", this.update_colors, this);
	        this.model.on_some_change(["inner_radius", "radius"], function() {
	            this.compute_view_padding();
	            var animate = true;
	            this.update_radii(animate);
	        }, this);
	        this.model.on_some_change(["stroke", "opacities"], this.update_stroke_and_opacities, this);
	        this.model.on_some_change(["x", "y"], this.position_center, this);
	        this.model.on_some_change(["display_labels", "label_color", "font_size", "font_weight"],
	                                  this.update_labels, this);
	        this.model.on_some_change(["start_angle", "end_angle", "sort"], function() {
	            var animate = true;
	            this.draw(animate);
	        }, this);
	
	        this.model.on_some_change(["display_values", "values_format"],
	                                  this.update_values, this);
	
	        this.listenTo(this.model, "labels_updated", this.update_values, this);
	        this.listenTo(this.model, "change:selected", function() {
	            this.selected_indices = this.model.get("selected");
	            this.apply_styles();
	        }, this);
	        this.listenTo(this.model, "change:interactions", this.process_interactions);
	        this.listenTo(this.parent, "bg_clicked", function() {
	            this.event_dispatcher("parent_clicked");
	        });
	    },
	
	    process_interactions: function() {
	        var interactions = this.model.get("interactions");
	        if(_.isEmpty(interactions)) {
	            //set all the event listeners to blank functions
	            this.reset_interactions();
	        } else {
	            if(interactions.click !== undefined &&
	              interactions.click !== null) {
	                if(interactions.click === "tooltip") {
	                    this.event_listeners.element_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                } else if (interactions.click === "select") {
	                    this.event_listeners.parent_clicked = this.reset_selection;
	                    this.event_listeners.element_clicked = this.click_handler;
	                }
	            } else {
	                this.reset_click();
	            }
	            if(interactions.hover !== undefined &&
	              interactions.hover !== null) {
	                if(interactions.hover === "tooltip") {
	                    this.event_listeners.mouse_over = this.refresh_tooltip;
	                    this.event_listeners.mouse_move = this.move_tooltip;
	                    this.event_listeners.mouse_out = this.hide_tooltip;
	                }
	            } else {
	                this.reset_hover();
	            }
	            if(interactions.legend_click !== undefined &&
	              interactions.legend_click !== null) {
	                if(interactions.legend_click === "tooltip") {
	                    this.event_listeners.legend_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                }
	            } else {
	                this.event_listeners.legend_clicked = function() {};
	            }
	            if(interactions.legend_hover !== undefined &&
	              interactions.legend_hover !== null) {
	                if(interactions.legend_hover === "highlight_axes") {
	                    this.event_listeners.legend_mouse_over = _.bind(this.highlight_axes, this);
	                    this.event_listeners.legend_mouse_out = _.bind(this.unhighlight_axes, this);
	                }
	            } else {
	                this.reset_legend_hover();
	            }
	        }
	    },
	
	    relayout: function() {
	        this.set_ranges();
	        this.position_center();
	        this.update_radii();
	    },
	
	    position_center: function(animate) {
	        var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	        var x_scale = this.scales.x ? this.scales.x : this.parent.scale_x;
	        var y_scale = this.scales.y ? this.scales.y : this.parent.scale_y;
	        var x = (x_scale.model.type === "date") ?
	            this.model.get_date_elem("x") : this.model.get("x");
	        var y = (y_scale.model.type === "date") ?
	            this.model.get_date_elem("y") : this.model.get("y");
	        var transform = "translate(" + (x_scale.scale(x) + x_scale.offset) +
	                                ", " + (y_scale.scale(y) + y_scale.offset) + ")";
	        this.pie_g
	            .transition("position_center").duration(animation_duration)
	            .attr("transform", transform);
	    },
	
	    update_radii: function(animate) {
	        var animation_duration = animate === true ?
	            this.parent.model.get("animation_duration") : 0;
	
	        var radius = this.model.get("radius");
	        var inner_radius = this.model.get("inner_radius");
	        var display_labels = this.model.get("display_labels");
	
	        if(display_labels === "inside") {
	            this.arc.outerRadius(radius).innerRadius(inner_radius);
	        } else if(display_labels === "outside") {
	            this.arc.outerRadius(radius * 0.8).innerRadius(inner_radius * 0.8);
	            this.outer_arc.innerRadius(radius * 0.9).outerRadius(radius * 0.9);
	        }
	
	        var slices = this.pie_g.select(".slices");
	        var labels = this.pie_g.select(".labels");
	        var lines = this.pie_g.select(".lines");
	
	        var that = this;
	
	        slices.selectAll("path.slice")
	            .transition("update_radii").duration(animation_duration)
	            .attr("d", this.arc);
	
	        if(display_labels === "inside") {
	            labels.selectAll("text")
	                .transition("update_radii").duration(animation_duration)
	                .attr("transform", function(d) {
	                    return "translate(" + that.arc.centroid(d) + ")";
	                });
	        } else if(display_labels === "outside") {
	            labels.selectAll("text")
	                .transition("update_radii").duration(animation_duration)
	                .attr("transform", function(d) {
	                    var pos = that.outer_arc.centroid(d);
	                    pos[0] = radius * (that.is_mid_angle_left(d) ? -1 : 1);
	                    return "translate(" + pos + ")";
	                });
	
	            lines.selectAll("polyline")
	                .transition("update_radii").duration(animation_duration)
	                .attr("points", function(d) {
	                    var pos = that.outer_arc.centroid(d);
	                    pos[0] = radius * 0.95 * (that.is_mid_angle_left(d) ? -1 : 1);
	                    return [that.arc.centroid(d), that.outer_arc.centroid(d), pos];
	                });
	        }
	    },
	
	    outer_join: function(first, second) {
	        var common_keys = d3.set(first.concat(second).map(function(d) {
	            return d.label;
	        })).values().sort();
	
	        // convert first array to map keyed with label
	        var first_map = {};
	        first.forEach(function(d) { first_map[d.label] = d; });
	
	        // convert second array to map keyed with label
	        var second_map = {};
	        second.forEach(function(d) { second_map[d.label] = d; });
	
	        // create new first array with missing labels filled with 0
	        var new_first = [],
	            new_second = []
	        common_keys.forEach(function(d) {
	            if(d in first_map) {
	                new_first.push(first_map[d]);
	            } else {
	                var missing_d = utils.deepCopy(second_map[d]);
	                missing_d.size = 0;
	                new_first.push(missing_d);
	            }
	
	            if(d in second_map) {
	                new_second.push(second_map[d]);
	            } else {
	                var missing_d = utils.deepCopy(first_map[d]);
	                missing_d.size = 0;
	                new_second.push(missing_d);
	            }
	        });
	
	        return {first: new_first, second: new_second};
	    },
	
	    is_mid_angle_left: function(arc_data) {
	        // decides if the mid angle of the arc is toward left or right (to aid the
	        // placement of label text and polylines)
	        var mid_angle = (arc_data.startAngle + arc_data.endAngle) / 2;
	        return mid_angle > Math.PI || (mid_angle < 0 && mid_angle > -Math.PI);
	    },
	
	    draw: function(animate) {
	        this.set_ranges();
	        this.position_center(animate);
	        var new_data = this.model.mark_data;
	
	        var old_data = this.pie_g.select(".slices").selectAll("path.slice")
	            .data().map(function(d) { return d.data; });
	        if (old_data.length === 0) {
	            old_data = new_data;
	        }
	        var joined = this.outer_join(old_data, new_data);
	        var was = joined.first;
	        var is = joined.second;
	
	        var pie = d3.layout.pie()
	            .startAngle(this.model.get("start_angle") * 2 * Math.PI/360)
	            .endAngle(this.model.get("end_angle") * 2 * Math.PI/360)
	            .value(function(d) { return d.size; });
	
	        if(!this.model.get("sort")) { pie.sort(null); }
	
	        var that = this;
	        var animation_duration = animate === true ?
	            this.parent.model.get("animation_duration") : 0;
	
	        var slices = this.pie_g.select(".slices")
	            .selectAll("path.slice")
	            .data(pie(was), this.join_key);
	
	        slices.enter()
	            .insert("path")
	            .attr("class", "slice")
	            .style("fill", function(d, i) {
	                return that.get_colors(i);
	            })
	            .each(function(d) {
	                this._current = d;
	            });
	
	        slices = this.pie_g.select(".slices")
	            .selectAll("path.slice")
	            .data(pie(is), this.join_key);
	
	        slices.transition("draw").duration(animation_duration)
	            .attrTween("d", function(d) {
	                var interpolate = d3.interpolate(this._current, d);
	                var _this = this;
	                return function(t) {
	                    _this._current = interpolate(t);
	                    return that.arc(_this._current);
	                };
	            });
	
	        slices = this.pie_g.select(".slices")
	            .selectAll("path.slice")
	            .data(pie(new_data), this.join_key);
	
	        slices.exit()
	            .transition("draw")
	            .delay(animation_duration)
	            .duration(0)
	            .remove();
	
	        var labels = this.pie_g.select(".labels")
	            .selectAll("text")
	            .data(pie(was), this.join_key);
	
	        labels.enter()
	            .append("text")
	            .attr("dy", ".35em")
	            .style("opacity", 0)
	            .text(function(d) {
	                return d.data.label;
	            })
	            .each(function(d) {
	                this._current = d;
	            });
	
	        labels = this.pie_g.select(".labels")
	            .selectAll("text")
	            .data(pie(is), this.join_key);
	
	        var label_trans = labels.transition("draw")
	            .duration(animation_duration)
	            .style("opacity", function(d) {
	                return d.data.value === 0 ? 0 : 1;
	            });
	        var display_labels = this.model.get("display_labels");
	
	        if(display_labels === "inside") {
	            label_trans.attr("transform", function(d) {
	                return "translate(" + that.arc.centroid(d) + ")";
	            })
	            .style("text-anchor", "middle");
	        } else if(display_labels === "outside") {
	            label_trans.attrTween("transform", function(d) {
	                var interpolate = d3.interpolate(this._current, d);
	                var _this = this;
	                return function(t) {
	                    var d2 = interpolate(t);
	                    _this._current = d2;
	                    var pos = that.outer_arc.centroid(d2);
	                    pos[0] = that.model.get("radius") *
	                        (that.is_mid_angle_left(d2) ?  -1 : 1);
	                    return "translate(" + pos + ")";
	                };
	            })
	            .styleTween("text-anchor", function(d) {
	                var interpolate = d3.interpolate(this._current, d);
	                return function(t) {
	                    var d2 = interpolate(t);
	                    return that.is_mid_angle_left(d2) ? "end":"start";
	                };
	            });
	        }
	
	        labels = this.pie_g.select(".labels")
	            .selectAll("text")
	            .data(pie(new_data), this.join_key);
	
	        labels.exit()
	            .transition("draw").delay(animation_duration)
	            .remove();
	
	        // for labels which are displayed outside draw the polylines
	        if(display_labels === "outside") {
	            var polylines = this.pie_g.select(".lines")
	                .selectAll("polyline")
	                .data(pie(was), this.join_key);
	
	            polylines.enter()
	                .append("polyline")
	                .style("opacity", 0)
	                .each(function(d) {
	                    this._current = d;
	                });
	
	            polylines = this.pie_g.select(".lines")
	                .selectAll("polyline")
	                .data(pie(is), this.join_key);
	
	            polylines.transition("draw")
	                .duration(animation_duration)
	                .style("opacity", function(d) {
	                    return d.data.value === 0 ? 0 : 0.5;
	                })
	                .attrTween("points", function(d) {
	                    this._current = this._current;
	                    var interpolate = d3.interpolate(this._current, d);
	                    var _this = this;
	                    return function(t) {
	                        var d2 = interpolate(t);
	                        _this._current = d2;
	                        var pos = that.outer_arc.centroid(d2);
	                        pos[0] = that.model.get("radius") * 0.95 *
	                            (that.is_mid_angle_left(d2) ? -1 : 1);
	                        return [that.arc.centroid(d2), that.outer_arc.centroid(d2), pos];
	                    };
	                });
	
	            polylines = this.pie_g.select(".lines")
	                .selectAll("polyline")
	                .data(pie(new_data), this.join_key);
	
	            polylines.exit()
	                .transition("draw").delay(animation_duration)
	                .remove();
	        }
	
	        slices.order();
	
	        slices.on("click", function(d, i) {
	            return that.event_dispatcher("element_clicked", {data: d, index: i});
	        });
	
	        this.update_labels();
	        this.update_values();
	        this.apply_styles();
	    },
	
	    update_stroke_and_opacities: function() {
	        var stroke = this.model.get("stroke");
	        var opacities = this.model.get("opacities");
	        this.pie_g.selectAll("path.slice")
	            .style("stroke", stroke)
	            .style("opacity", function(d, i) { return opacities[i]; });
	    },
	
	    update_colors: function() {
	        var that = this;
	        var color_scale = this.scales.color;
	        this.pie_g.select(".slices")
	          .selectAll("path.slice")
	          .style("fill", function(d, i) {
	              return (d.data.color !== undefined && color_scale !== undefined) ?
	                  color_scale.scale(d.data.color) : that.get_colors(d.data.index);
	          });
	    },
	
	    update_labels: function() {
	        var display_labels = this.model.get("display_labels");
	
	        var labels = this.pie_g.selectAll(".labels text")
	            .style("visibility",  display_labels === "none" ? "hidden" : "visible")
	            .style("font-weight", this.model.get("font_weight"))
	            .style("font-size", this.model.get("font_size"));
	
	        var color = this.model.get("label_color");
	        if(color !== undefined) {
	            labels.style("fill", color);
	        }
	    },
	
	    update_values: function() {
	        var display_values = this.model.get("display_values");
	        var values_format = d3.format(this.model.get("values_format"));
	
	        var labels = this.pie_g.selectAll(".labels text")
	            .text(function(d) {
	                return d.data.label +
	                    (display_values ? ": " + values_format(d.data.size) : "");
	            })
	    },
	
	    clear_style: function(style_dict, indices) {
	        // Function to clear the style of a dict on some or all the elements of the
	        // chart. If indices is null, clears the style on all elements. If
	        // not, clears on only the elements whose indices are matching.
	        var elements = this.pie_g.selectAll("path.slice");
	        if(indices) {
	            elements = elements.filter(function(d, index) {
	                return indices.indexOf(index) !== -1;
	            });
	        }
	        var clearing_style = {};
	        for(var key in style_dict) {
	            clearing_style[key] = null;
	        }
	        elements.style(clearing_style);
	    },
	
	    set_style_on_elements: function(style, indices) {
	        // If the index array is undefined or of length=0, exit the
	        // function without doing anything
	        if(indices === undefined || indices === null || indices.length === 0) {
	            return;
	        }
	        var elements = this.pie_g.selectAll(".slice");
	        elements = elements.filter(function(data, index) {
	            return indices.indexOf(index) !== -1;
	        });
	        elements.style(style);
	    },
	
	    set_default_style: function(indices) {
	        // For all the elements with index in the list indices, the default
	        // style is applied.
	        this.update_colors();
	        this.update_stroke_and_opacities();
	    },
	
	    click_handler: function (args) {
	        var data = args.data;
	        var index = args.index;
	        var that = this;
	        var idx = this.model.get("selected");
	        var selected = idx ? utils.deepCopy(idx) : [];
	            // index of slice i. Checking if it is already present in the list.
	        var elem_index = selected.indexOf(index);
	        // Replacement for "Accel" modifier.
	        var accelKey = d3.event.ctrlKey || d3.event.metaKey;
	        if(elem_index > -1 && accelKey) {
	            // if the index is already selected and if accel key is
	            // pressed, remove the element from the list
	            selected.splice(elem_index, 1);
	        } else {
	            if(d3.event.shiftKey) {
	                //If shift is pressed and the element is already
	                //selected, do not do anything
	                if(elem_index > -1) {
	                    return;
	                }
	                //Add elements before or after the index of the current
	                //slice which has been clicked
	                var min_index = (selected.length !== 0) ?
	                    d3.min(selected) : -1;
	                var max_index = (selected.length !== 0) ?
	                    d3.max(selected) : that.model.mark_data.length;
	                if(index > max_index){
	                    _.range(max_index+1, index).forEach(function(i) {
	                        selected.push(i);
	                    });
	                } else if(index < min_index){
	                    _.range(index+1, min_index).forEach(function(i) {
	                        selected.push(i);
	                    });
	                }
	                } else if(!accelKey) {
	                selected = [];
	            }
	            // updating the array containing the slice indexes selected
	            // and updating the style
	            selected.push(index);
	        }
	        this.model.set("selected",
	            ((selected.length === 0) ? null : selected),
	            {updated_view: this});
	        this.touch();
	        if(!d3.event) {
	            d3.event = window.event;
	        }
	        var e = d3.event;
	        if(e.cancelBubble !== undefined) { // IE
	            e.cancelBubble = true;
	        }
	        if(e.stopPropagation) {
	            e.stopPropagation();
	        }
	        e.preventDefault();
	        this.selected_indices = selected;
	        this.apply_styles();
	    },
	
	    reset_selection: function() {
	        this.model.set("selected", null);
	        this.touch();
	        this.selected_indices = null;
	        this.clear_style(this.selected_style);
	        this.clear_style(this.unselected_style);
	        this.set_default_style();
	    },
	
	    compute_view_padding: function() {
	        var scales = this.model.get("scales");
	        var r = d3.max([this.model.get("radius"), this.model.get("inner_radius")]);
	
	        var x_padding = (scales.x) ? (r+1) : 0;
	        var y_padding = (scales.y) ? (r+1) : 0;
	        if(x_padding !== this.x_padding || y_padding !== this.y_padding) {
	            this.x_padding = x_padding;
	            this.y_padding = y_padding;
	            this.trigger("mark_padding_updated");
	        }
	    }
	});
	
	module.exports = {
	    Pie: Pie
	};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var linearscalemodel = __webpack_require__(52);
	var colorutils = __webpack_require__(33);
	
	var ColorScaleModel = linearscalemodel.LinearScaleModel.extend({
	
	    set_init_state: function() {
	        this.type = "color_linear";
	        this.color_range = [];
	        this.mid = null;
	    },
	
	    set_listeners: function() {
	        ColorScaleModel.__super__.set_listeners.apply(this, arguments);
	        this.on_some_change(["colors", "scheme"], this.colors_changed, this);
	        this.on("change:mid", this.update_domain, this);
	        this.colors_changed();
	    },
	
	    update_domain: function() {
	        // Compute domain min and max
	        var that = this;
	        var min = (!this.min_from_data) ?
	            this.min : d3.min(_.map(this.domains, function(d) {
	                return d.length > 0 ? d[0] : that.global_max;
	            }));
	        var max = (!this.max_from_data) ?
	            this.max : d3.max(_.map(this.domains, function(d) {
	                return d.length > 0 ? d[d.length-1] : that.global_min;
	            }));
	        var prev_mid = this.mid;
	        this.mid = this.get("mid");
	
	        // If the min/mid/max has changed, or the number of colors has changed,
	        // update the domain
	        var prev_domain = this.domain;
	        var prev_length = prev_domain.length;
	        var n_colors = this.color_range.length;
	
	        if(min != prev_domain[0] || max != prev_domain[prev_length-1] ||
	           n_colors != prev_length || this.mid != prev_mid) {
	
	            this.domain = this.create_domain(min, this.mid, max, n_colors);
	            this.trigger("domain_changed", this.domain);
	        }
	    },
	
	    create_domain: function(min, mid, max, n_colors) {
	        // Domain ranges from min to max, with the same number of
	        // elements as the color range
	        var scale = d3.scale.linear()
	
	        if (mid === undefined || mid === null){
	            scale.domain([0, n_colors - 1]).range([min, max]);
	        } else {
	            var mid_index = n_colors / 2;
	            scale.domain([0, mid_index, n_colors - 1]).range([min, mid, max]);
	        }
	
	        var domain = [];
	        for (i = 0; i < n_colors; i++) {
	            var j = this.reverse ? n_colors-1-i : i;
	            domain.push(scale(j));
	        }
	        return domain;
	    },
	
	    colors_changed: function() {
	        var colors = this.get("colors");
	        this.color_range = colors.length > 0 ? colors : 
	            colorutils.get_linear_scale_range(this.get("scheme"));
	        // If the number of colors has changed, the domain must be updated
	        this.update_domain();
	        // Update the range of the views. For a color scale the range doesn't depend
	        // on the view, so ideally we could get rid of this
	        this.trigger("colors_changed");
	    }
	});
	
	module.exports = {
	    ColorScaleModel: ColorScaleModel
	};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var scalemodel = __webpack_require__(41);
	
	var LinearScaleModel = scalemodel.ScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(scalemodel.ScaleModel.prototype.defaults(), {
	            _model_name: "LinearScaleModel",
	            _view_name: "LinearScale",
	            min: null,
	            max: null,
	            min_range: 0.6,
	            mid_range: 0.8
	        });
	    },
	
	    initialize: function() {
	        LinearScaleModel.__super__.initialize.apply(this, arguments);
	    },
	
	    set_init_state: function() {
	        this.type = "linear";
	        this.global_min = Number.NEGATIVE_INFINITY;
	        this.global_max = Number.POSITIVE_INFINITY;
	    },
	
	    set_listeners: function() {
	        this.on("change:reverse", this.reverse_changed, this);
	        this.reverse_changed();
	        this.on_some_change(["min", "max"], this.min_max_changed, this);
	        this.min_max_changed();
	        this.on_some_change(["min_range", "mid_range", "stabilized"], this.update_domain, this);
	    },
	
	    min_max_changed: function() {
	        this.min = this.get("min");
	        this.max = this.get("max");
	        this.min_from_data = (this.min === null);
	        this.max_from_data = (this.max === null);
	        this.update_domain();
	    },
	
	    reverse_changed: function(model, value, options) {
	        var prev_reverse = (model === undefined) ? false : model.previous("reverse");
	        this.reverse = this.get("reverse");
	
	        // the domain should be reversed only if the previous value of reverse
	        // is different from the current value. During init, domain should be
	        // reversed only if reverse is set to True.
	        var reverse_domain = (prev_reverse + this.reverse) % 2;
	        if(this.domain.length > 0 && reverse_domain === 1) {
	            this.domain.reverse();
	            this.trigger("domain_changed", this.domain);
	        }
	    },
	
	    update_domain: function() {
	        var that = this;
	        var min = (!this.min_from_data) ?
	            this.min : d3.min(_.map(this.domains, function(d) {
	                return d.length > 0 ? d[0] : that.global_max;
	            }));
	        var max = (!this.max_from_data) ?
	            this.max : d3.max(_.map(this.domains, function(d) {
	                return d.length > 1 ? d[1] : that.global_min;
	            }));
	        var mid = (min + max) * 0.5,
	            new_width = (max - min) * 0.5 / this.get("mid_range");
	            prev_domain = this.domain,
	            min_index = (this.reverse) ? 1 : 0,
	            prev_min = prev_domain[min_index],
	            prev_max = prev_domain[1 - min_index],
	            prev_mid = (prev_max + prev_min) * 0.5,
	            min_width = (prev_max - prev_min) * 0.5 * this.get("min_range");
	
	        var stabilized = this.get("stabilized");
	
	        // If the scale is stabilized, only update if the new min/max is without
	        // a certain range, else update as soon as the new min/max is different.
	        var update_domain = stabilized ?
	            (!(min >= prev_min) || !(min <= prev_mid-min_width) ||
	             !(max <= prev_max) || !(max >= prev_mid+min_width)) :
	            (min !== prev_min || max !== prev_max);
	
	        if (update_domain) {
	            var new_min = stabilized ? mid - new_width : min,
	                new_max = stabilized ? mid + new_width : max;
	            this.domain = (this.reverse) ? [new_max, new_min] : [new_min, new_max];
	            this.trigger("domain_changed", this.domain);
	        }
	    },
	
	    compute_and_set_domain: function(data_array, id) {
	        // Takes an array and calculates the domain for the particular
	        // view. If you have the domain already calculated on your side,
	        // call set_domain function.
	        if(data_array.length === 0) {
	           this.set_domain([], id);
	           return;
	        }
	        var data = data_array[0] instanceof Array ?
	            data_array : [data_array];
	        var min = d3.min(data.map(function(d) { return d3.min(d); }));
	        var max = d3.max(data.map(function(d) { return d3.max(d); }));
	        this.set_domain([min, max], id);
	    }
	});
	
	module.exports = {
	    LinearScaleModel: LinearScaleModel,
	};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var PieModel = markmodel.MarkModel.extend({
	
	    defaults: function() {
	        return _.extend(markmodel.MarkModel.prototype.defaults(), {
	            _model_name: "PieModel",
	            _view_name: "Pie",
	
	            sizes: [],
	            color: null,
	            x: 0.5,
	            y: 0.5,
	            scales_metadata: {
	                color: { dimension: "color" }
	            },
	            sort: false,
	            colors: d3.scale.category10().range(),
	            stroke: null,
	            opacities: [],
	            radius: 180,
	            inner_radius: 0.1,
	            start_angle: 0.0,
	            end_angle: 360.0
	        });
	    },
	
	    initialize: function() {
	        PieModel.__super__.initialize.apply(this, arguments);
	        this.on("change:sizes", this.update_data, this);
	        this.on("change:color", function() {
	            this.update_color();
	            this.trigger("colors_updated");
	        }, this);
	        this.on("change:labels", this.update_labels, this);
	
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.update_data();
	        this.update_color();
	        this.update_labels();
	        this.update_domains();
	    },
	
	    update_data: function() {
	        var sizes = this.get_typed_field("sizes");
	        var color = this.get_typed_field("color");
	        var labels = this.get("labels");
	        this.mark_data = sizes.map(function(d, i) {
	            return {
	                size: d,
	                color: color[i],
	                // since labels are used as join keys create default labels
	                // for missing labels. Using == to check for *both* undefined and null
	                // jshint eqnull: true
	                label: labels[i] == null ? 'S' + (i + 1) : labels[i],
	                index: i
	            };
	        });
	        this.update_color();
	        this.update_domains();
	        this.trigger("data_updated");
	    },
	
	    update_labels: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        var labels = this.get("labels");
	        this.mark_data.forEach(function(data, index) {
	            // since labels are used as join keys create default labels
	            // for missing labels. Using == to check for *both* undefined and null
	            // jshint eqnull: true
	            data.label = labels[index] == null ?
	                         'S' + (index + 1) :
	                         labels[index];
	        });
	        this.trigger("labels_updated");
	    },
	
	    update_color: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        var color = this.get_typed_field("color");
	        var color_scale = this.get("scales").color;
	        if(color_scale) {
	            if(!this.get("preserve_domain").color) {
	                color_scale.compute_and_set_domain(color, this.model_id + "_color");
	            } else {
	                color_scale.del_domain([], this.model_id + "_color");
	            }
	        }
	    },
	
	    update_domains: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        var scales = this.get("scales");
	        var x_scale = scales.x;
	        var y_scale = scales.y;
	
	        if(x_scale) {
	            var x = (x_scale.type === "date") ?
	                this.get_date_elem("x") : this.get("x");
	            if(!this.get("preserve_domain").x) {
	                x_scale.compute_and_set_domain([x], this.model_id + "_x");
	            } else {
	                x_scale.del_domain([], this.model_id + "_x");
	            }
	        }
	        if(y_scale) {
	            if(!this.get("preserve_domain").y) {
	                y_scale.compute_and_set_domain([this.get("y")], this.model_id + "_y");
	            } else {
	                y_scale.del_domain([], this.model_id + "_y");
	            }
	        }
	    },
	
	    get_data_dict: function(data, index) {
	        return data.data;
	    }
	});
	
	module.exports = {
	    PieModel: PieModel
	};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var colorscale = __webpack_require__(49);
	
	var DateColorScale = colorscale.ColorScale.extend({
	
	    create_d3_scale: function(){
	        this.scale = d3.time.scale();
	    }
	});
	
	module.exports = {
	    DateColorScale: DateColorScale
	};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var scale = __webpack_require__(32);
	
	var LinearScale = scale.Scale.extend({
	
	    render: function() {
	        this.scale = d3.scale.linear();
	        if(this.model.domain.length > 0)
	            this.scale.domain(this.model.domain);
	        this.offset = 0;
	        this.create_event_listeners();
	    },
	
	    expand_domain: function(old_range, new_range) {
	        // If you have a current range and then a new range and want to
	        // expand the domain to expand to the new range but keep it
	        // consistent with the previous one, this is the function you use.
	
	        // The following code is required to make a copy of the actual
	        // state of the scale. Referring to the model domain and then
	        // setting the range to be the old range in case it is not.
	        var unpadded_scale = this.scale.copy();
	
	        // To handle the case for a clamped scale for which we have to
	        // expand the domain, the copy should be unclamped.
	        unpadded_scale.clamp(false);
	        unpadded_scale.domain(this.model.domain);
	        unpadded_scale.range(old_range);
	        this.scale.domain(new_range.map(function(limit) {
	            return unpadded_scale.invert(limit);
	        }));
	    },
	
	    invert: function(pixel) {
	        return this.scale.invert(pixel);
	    },
	
	    invert_range: function(pixels) {
	        //Pixels is a non-decreasing array of pixel values
	        var that = this;
	        return pixels.map(function(pix) { return that.invert(pix); });
	    }
	});
	
	module.exports = {
	    LinearScale: LinearScale
	};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var colorscale = __webpack_require__(51);
	
	var DateColorScaleModel = colorscale.ColorScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(colorscale.ColorScaleModel.prototype.defaults(), {
	            _model_name: "DateColorScaleModel",
	            _view_name: "DateColorScale"
	        });
	    },
	
	    set_init_state: function() {
	        this.type = "date_color_linear";
	        this.color_range = [];
	        this.mid = null;
	        this.global_min = (new Date()).setTime(0);
	        this.global_max = new Date();
	    },
	
	    min_max_changed: function() {
	        this.min = this.get_date_elem("min");
	        this.max = this.get_date_elem("max");
	        this.min_from_data = (this.min === null);
	        this.max_from_data = (this.max === null);
	        this.update_domain();
	    }
	});
	
	module.exports = {
	    DateColorScaleModel: DateColorScaleModel
	};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var linearscale = __webpack_require__(55);
	
	var DateScale = linearscale.LinearScale.extend({
	    render: function() {
	        this.scale = d3.time.scale();
	        if(this.model.domain.length > 0)
	            this.scale.domain(this.model.domain);
	        this.offset = 0;
	        this.create_event_listeners();
	    },
	});
	
	module.exports = {
	    DateScale: DateScale,
	};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var _ = __webpack_require__(9);
	var d3 = __webpack_require__(8);
	var mark = __webpack_require__(15);
	var markers = __webpack_require__(59);
	var utils = __webpack_require__(10);
	
	var bqSymbol = markers.symbol;
	
	var Lines = mark.Mark.extend({
	
	    render: function() {
	        var base_render_promise = Lines.__super__.render.apply(this);
	        var that = this;
	        this.dot = bqSymbol().size(this.model.get("marker_size"));
	        if (this.model.get("marker")) {
	            this.dot.type(this.model.get("marker"));
	        }
	
	        // TODO: create_listeners is put inside the promise success handler
	        // because some of the functions depend on child scales being
	        // created. Make sure none of the event handler functions make that
	        // assumption.
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	
	        this.display_el_classes = ["line", "legendtext", "dot"];
	        return base_render_promise.then(function() {
	            that.event_listeners = {};
	            that.process_interactions();
	            that.create_listeners();
	            that.compute_view_padding();
	            that.draw();
	        });
	    },
	
	    set_ranges: function() {
	        var x_scale = this.scales.x;
	        if(x_scale) {
	            x_scale.set_range(this.parent.padded_range("x", x_scale.model));
	        }
	        var y_scale = this.scales.y;
	        if(y_scale) {
	            y_scale.set_range(this.parent.padded_range("y", y_scale.model));
	        }
	    },
	
	    set_positional_scales: function() {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.update_line_xy(); }
	        });
	        this.listenTo(y_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.update_line_xy(); }
	        });
	    },
	
	    initialize_additional_scales: function() {
	        var color_scale = this.scales.color;
	        if(color_scale) {
	            this.listenTo(color_scale, "domain_changed", function() {
	                this.update_style();
	            });
	            color_scale.on("color_scale_range_changed", this.update_style, this);
	        }
	    },
	
	    create_listeners: function() {
	        Lines.__super__.create_listeners.apply(this);
	        this.d3el.on("mouseover", _.bind(function() { this.event_dispatcher("mouse_over"); }, this))
	            .on("mousemove", _.bind(function() { this.event_dispatcher("mouse_move"); }, this))
	            .on("mouseout", _.bind(function() { this.event_dispatcher("mouse_out"); }, this));
	
	        this.listenTo(this.model, "change:tooltip", this.create_tooltip, this);
	
	        // FIXME: multiple calls to update_path_style. Use on_some_change.
	        this.listenTo(this.model, "change:interpolation", this.update_path_style, this);
	        this.listenTo(this.model, "change:close_path", this.update_path_style, this);
	
	        // FIXME: multiple calls to update_style. Use on_some_change.
	        this.listenTo(this.model, "change:colors", this.update_style, this);
	        this.listenTo(this.model, "change:opacities", this.update_style, this);
	        this.listenTo(this.model, "change:fill_opacities", this.update_style, this);
	        this.listenTo(this.model, "change:fill_colors", this.update_style, this);
	
	        this.listenTo(this.model, "change:fill", this.update_fill, this);
	
	        this.listenTo(this.model, "data_updated", function() {
	            var animate = true;
	            this.draw(animate);
	        }, this);
	        this.listenTo(this.model, "labels_updated", this.update_labels, this);
	        this.listenTo(this.model, "change:stroke_width", this.update_stroke_width, this);
	        this.listenTo(this.model, "change:labels_visibility", this.update_legend_labels, this);
	        this.listenTo(this.model, "change:curves_subset", this.update_curves_subset, this);
	        this.listenTo(this.model, "change:line_style", this.update_line_style, this);
	        this.listenTo(this.model, "change:interactions", this.process_interactions);
	        this.listenTo(this.parent, "bg_clicked", function() {
	            this.event_dispatcher("parent_clicked");
	        });
	
	        this.listenTo(this.model, "change:marker", this.update_marker, this);
	        this.listenTo(this.model, "change:marker_size", this.update_marker_size, this);
	    },
	
	    update_legend_labels: function() {
	        if(this.model.get("labels_visibility") === "none") {
	            this.d3el.selectAll(".legend")
	              .attr("display", "none");
	            this.d3el.selectAll(".curve_label")
	              .attr("display", "none");
	        } else if(this.model.get("labels_visibility") === "label") {
	            this.d3el.selectAll(".legend")
	              .attr("display", "none");
	            this.d3el.selectAll(".curve_label")
	              .attr("display", "inline");
	        } else {
	            this.d3el.selectAll(".legend")
	              .attr("display", "inline");
	            this.d3el.selectAll(".curve_label")
	              .attr("display", "none");
	        }
	    },
	
	    update_labels: function() {
	        var curves_sel = this.d3el.selectAll(".curve")
	          .data(this.model.mark_data)
	          .select(".curve_label")
	          .text(function(d) { return d.name; });
	    },
	
	    get_line_style: function() {
	        switch (this.model.get("line_style")) {
	            case "solid":
	                return "none";
	            case "dashed":
	                return "10,10";
	            case "dotted":
	                return "2,10";
	            case "dash_dotted":
	                return "10,5,2,5";
	        }
	    },
	
	    // Updating the style of the curve, stroke, colors, dashed etc...
	    // Could be fused in a single function for increased readability
	    // and to avoid code repetition
	    update_line_style: function() {
	        this.d3el.selectAll(".curve").select(".line")
	          .style("stroke-dasharray", _.bind(this.get_line_style, this));
	        if (this.legend_el) {
	            this.legend_el.select("path")
	              .style("stroke-dasharray", _.bind(this.get_line_style, this));
	        }
	    },
	
	    update_stroke_width: function(model, stroke_width) {
	        this.compute_view_padding();
	        this.d3el.selectAll(".curve").select(".line")
	          .style("stroke-width", stroke_width);
	        if (this.legend_el) {
	            this.legend_el.select("path")
	              .style("stroke-width", stroke_width);
	        }
	    },
	
	    update_style: function() {
	        var that = this,
	            fill = this.model.get("fill"),
	            fill_color = this.model.get("fill_colors"),
	            opacities = this.model.get("opacities"),
	            fill_opacities = this.model.get("fill_opacities");
	        // update curve colors
	        var curves = this.d3el.selectAll(".curve")
	        curves.select(".line")
	            .style("opacity", function(d, i) { return opacities[i]; })
	            .style("stroke", function(d, i) {
	                return that.get_element_color(d, i) || fill_color[i];
	            })
	            .style("fill", function(d, i) {
	                return fill === "inside" ? that.get_fill_color(d, i) : "";
	            });
	        curves.select(".area")
	            .style("fill", function(d, i) { return that.get_fill_color(d, i); })
	            .style("opacity", function(d, i) { return fill_opacities[i]; });
	        this.update_marker_style();
	        // update legend style
	        if (this.legend_el){
	            this.legend_el.select(".line")
	                .style("stroke", function(d, i) {
	                    return that.get_element_color(d, i) || fill_color[i];
	                })
	                .style("opacity", function(d, i) { return opacities[i]; })
	                .style("fill", function(d, i) {
	                    return that.model.get("fill") === "none" ?
	                        "" : that.get_fill_color(d, i);
	                })
	            this.legend_el.select(".dot")
	                .style("stroke", function(d, i) {
	                    return that.get_element_color(d, i) || fill_color[i];
	                })
	                .style("opacity", function(d, i) { return opacities[i]; })
	                .style("fill", function(d, i) {
	                    return that.get_element_color(d, i) || fill_color[i];
	                });
	            this.legend_el.select("text")
	              .style("fill", function(d, i) {
	                  return that.get_element_color(d, i) || fill_color[i];
	              })
	              .style("opacity", function(d, i) {
	                  return opacities[i];
	              });
	        }
	        this.update_stroke_width(this.model, this.model.get("stroke_width"));
	        this.update_line_style();
	    },
	
	    path_closure: function() {
	        return this.model.get("close_path") ? "Z" : "";
	    },
	
	    update_path_style: function() {
	        var interpolation = this.model.get("interpolation");
	        this.line.interpolate(interpolation);
	        this.area.interpolate(interpolation);
	        var that = this;
	        this.d3el.selectAll(".curve").select(".line")
	          .attr("d", function(d) {
	              return that.line(d.values) + that.path_closure();
	          });
	        this.d3el.selectAll(".curve").select(".area")
	          .transition("update_path_style")
	          .duration(0) //FIXME
	          .attr("d", function(d) { return that.area(d.values); });
	        if (this.legend_el) {
	            this.legend_line.interpolate(interpolation);
	            this.legend_el.selectAll("path")
	              .attr("d", this.legend_line(this.legend_path_data) + this.path_closure());
	        }
	    },
	
	    relayout: function() {
	        this.set_ranges();
	        this.update_line_xy();
	    },
	
	    selector_changed: function(point_selector, rect_selector) {
	        if(point_selector === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            return [];
	        }
	        var pixels = this.pixel_coords;
	        var indices = _.range(pixels.length);
	        var selected = _.filter(indices, function(index) {
	            return point_selector(pixels[index]);
	        });
	        this.model.set("selected", selected);
	        this.touch();
	    },
	
	    invert_point: function(pixel) {
	        if(pixel === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            return;
	        }
	
	        var x_scale = this.scales.x;
	        var index = Math.min(this.bisect(this.x_pixels, pixel),
	          Math.max((this.x_pixels.length - 1), 0));
	        this.model.set("selected", [index]);
	        this.touch();
	    },
	
	    update_multi_range: function(brush_extent) {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        var x_start = brush_extent[0];
	        var x_end = brush_extent[1];
	
	        var data = this.model.x_data[0] instanceof Array ?
	            this.model.x_data[0] : this.model.x_data;
	        var idx_start = this.bisect(data, x_start);
	        var idx_end = Math.min(this.bisect(data, x_end),
	            Math.max((data.length - 1), 0));
	
	        this.selector_model.set("selected", [idx_start, idx_end]);
	        this.selector.touch();
	    },
	
	    draw_legend: function(elem, x_disp, y_disp, inter_x_disp, inter_y_disp) {
	        var curve_labels = this.model.get_labels();
	        var legend_data = this.model.mark_data.map(function(d) {
	            return {index: d.index, name: d.name, color: d.color};
	        });
	        this.legend_el = elem.selectAll(".legend" + this.uuid)
	          .data(legend_data);
	
	        var that = this,
	            rect_dim = inter_y_disp * 0.8,
	            fill_colors = this.model.get("fill_colors"),
	            opacities = this.model.get("opacities");
	
	        this.legend_line = d3.svg.line()
	            .interpolate(this.model.get("interpolation"))
	            .x(function(d) { return d[0]; })
	            .y(function(d) { return d[1]; });
	
	        this.legend_path_data = [[0, rect_dim],
	                                 [rect_dim / 2, 0],
	                                 [rect_dim, rect_dim / 2]];
	
	        var legend = this.legend_el.enter()
	          .append("g")
	            .attr("class", "legend" + this.uuid)
	            .attr("transform", function(d, i) {
	                return "translate(0, " + (i * inter_y_disp + y_disp)  + ")";
	            })
	            .on("mouseover", _.bind(function() {
	               this.event_dispatcher("legend_mouse_over");
	            }, this))
	            .on("mouseout", _.bind(function() {
	               this.event_dispatcher("legend_mouse_out");
	            }, this))
	            .on("click", _.bind(function() {
	               this.event_dispatcher("legend_clicked");
	            }, this));
	
	        legend.append("path")
	            .attr("class", "line")
	            .attr("fill", "none")
	            .attr("d", this.legend_line(this.legend_path_data) + this.path_closure())
	            .style("stroke", function(d, i) {
	                return that.get_element_color(d, i) || fill_colors[i];
	            })
	            .style("fill", function(d, i) {
	                return that.model.get("fill") === "none" ?
	                    "" : that.get_fill_color(d, i);
	            })
	            .style("opacity", function(d, i) { return opacities[i]; })
	            .style("stroke-width", this.model.get("stroke_width"))
	            .style("stroke-dasharray", _.bind(this.get_line_style, this));
	
	        if (this.model.get("marker")) {
	            legend.append("path")
	                .attr("class", "dot")
	                .attr("transform", "translate(" + rect_dim / 2 + ",0)")
	                .attr("d", that.dot.size(25))
	                .style("fill", function(d, i) { return that.get_element_color(d, i); });
	        }
	
	        this.legend_el.append("text")
	          .attr("class", "legendtext")
	          .attr("x", rect_dim * 1.2)
	          .attr("y", rect_dim / 2)
	          .attr("dy", "0.35em")
	          .text(function(d, i) { return curve_labels[i]; })
	          .style("fill", function(d, i) {
	              return that.get_element_color(d, i) || fill_colors[i];
	          })
	          .style("opacity", function(d, i) { return opacities[i]; });
	
	        var max_length = d3.max(curve_labels, function(d) {
	            return d.length;
	        });
	        this.legend_el.exit().remove();
	        return [this.model.mark_data.length, max_length];
	    },
	
	    update_curves_subset: function() {
	        var display_labels = this.model.get("labels_visibility") === "label";
	        // Show a subset of the curves
	        var curves_subset = this.model.get("curves_subset");
	        if (curves_subset.length > 0) {
	            this.d3el.selectAll(".curve")
	              .attr("display", function(d, i) {
	                  return curves_subset.indexOf(i) !== -1 ?
	                      "inline" : "none";
	              })
	              .select(".curve_label")
	              .attr("display", function(d, i) {
	                  return (curves_subset.indexOf(i) !== -1 && display_labels) ?
	                      "inline" : "none";
	              });
	            if (this.legend_el) {
	                this.legend_el
	                  .attr("display", function(d, i) {
	                      return curves_subset.indexOf(i) !== -1 ?
	                          "inline" : "none";
	                  });
	            }
	            this.d3el.selectAll(".curve")
	
	        } else { //make all curves visible
	            this.d3el.selectAll(".curve")
	              .attr("display", "inline")
	              .select(".curve_label")
	              .attr("display", function(d) {
	                  return display_labels ? "inline" : "none";
	              });
	            if (this.legend_el) {
	                this.legend_el.attr("display", "inline");
	            }
	        }
	    },
	
	    update_fill: function() {
	        var fill = this.model.get("fill"),
	            area = (fill === "top" || fill === "bottom" || fill === "between");
	
	        var y_scale = this.scales.y;
	
	        this.area.defined(function(d) { return area && d.y !== null && isFinite(y_scale.scale(d.y)); });
	        if (fill == "bottom") {
	            this.area.y0(this.parent.plotarea_height);
	        } else if (fill == "top") {
	            this.area.y0(0)
	        } else if (fill == "between") {
	            this.area.y0(function(d) { return y_scale.scale(d.y0) + y_scale.offset; })
	        }
	        var that = this;
	        this.d3el.selectAll(".curve").select(".area")
	          .attr("d", function(d) {
	              return that.area(d.values);
	          })
	        this.d3el.selectAll(".curve").select(".line")
	          .style("fill", function(d, i) {
	              return fill === "inside" ? that.get_fill_color(d, i) : "";
	          })
	        // update legend fill
	        if (this.legend_el) {
	           this.legend_el.select("path")
	             .style("fill", function(d, i) {
	                 return fill === "none" ? "" : that.get_fill_color(d, i);
	             })
	        }
	    },
	
	    get_element_color: function(data, index) {
	        var color_scale = this.scales.color;
	        if(color_scale && data.color !== undefined && data.color !== null) {
	            return color_scale.scale(data.color);
	        }
	        return this.get_colors(index);
	    },
	
	    get_fill_color: function(data, index) {
	        var fill_colors = this.model.get("fill_colors");
	        var that = this;
	        return fill_colors.length === 0 ?
	            that.get_element_color(data, index) : fill_colors[index];
	    },
	
	    update_line_xy: function(animate) {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	
	        this.line
	          .x(function(d) { return x_scale.scale(d.x) + x_scale.offset; })
	          .y(function(d) { return y_scale.scale(d.y) + y_scale.offset; })
	
	        var fill = this.model.get("fill");
	        this.area
	          .x(function(d) { return x_scale.scale(d.x) + x_scale.offset; })
	          .y1(function(d) { return y_scale.scale(d.y) + y_scale.offset; })
	        
	        if (fill == "bottom") {
	            this.area.y0(this.parent.plotarea_height);
	        } else if (fill == "top") {
	            this.area.y0(0)
	        } else if (fill == "between") {
	            this.area.y0(function(d) { return y_scale.scale(d.y0) + y_scale.offset; })
	        }
	
	        var that = this;
	        var curves_sel = this.d3el.selectAll(".curve");
	
	        curves_sel.select(".line")
	          .transition("update_line_xy")
	          .duration(animation_duration)
	          .attr("d", function(d) {
	              return that.line(d.values) + that.path_closure();
	          });
	
	        curves_sel.select(".area")
	          .transition("update_line_xy")
	          .duration(animation_duration)
	          .attr("d", function(d, i) {
	            return that.area(d.values);
	        });
	
	
	        curves_sel.select(".curve_label")
	          .transition("update_line_xy")
	          .duration(animation_duration)
	          .attr("transform", function(d) {
	              var last_xy = d.values[d.values.length - 1];
	              return "translate(" + x_scale.scale(last_xy.x) +
	                              "," + y_scale.scale(last_xy.y) + ")";
	          });
	
	        this.update_dots_xy(animate);
	        this.x_pixels = (this.model.mark_data.length > 0) ? this.model.mark_data[0].values.map(function(el)
	                                                                    { return x_scale.scale(el.x) + x_scale.offset; })
	                                                          : [];
	        this.y_pixels = (this.model.mark_data.length > 0) ? this.model.mark_data[0].values.map(function(el)
	                                                                    { return y_scale.scale(el.y) + y_scale.offset; })
	                                                          : [];
	        this.pixel_coords = (this.model.mark_data.length > 0) ?
	            this.model.mark_data[0].values.map(function(el) {
	                return [x_scale.scale(el.x) + x_scale.offset, y_scale.scale(el.y) + y_scale.offset];
	            }) : [];
	    },
	
	    draw: function(animate) {
	        this.set_ranges();
	        var curves_sel = this.d3el.selectAll(".curve")
	          .data(this.model.mark_data);
	
	        var y_scale = this.scales.y;
	
	        var new_curves = curves_sel.enter().append("g")
	          .attr("class", "curve");
	        new_curves.append("path")
	          .attr("class", "line")
	          .attr("fill", "none");
	        new_curves.append("path")
	          .attr("class", "area");
	        new_curves.append("text")
	          .attr("class", "curve_label")
	          .attr("x", 3)
	          .attr("dy", ".35em")
	          .attr("display", this.model.get("labels_visibility") !== "label" ?
	                "none" : "inline")
	          .text(function(d) { return d.name; });
	
	        var fill = this.model.get("fill"),
	            area = (fill === "top" || fill === "bottom" || fill === "between");
	        var that = this;
	        curves_sel.select(".line")
	          .attr("id", function(d, i) { return "curve" + (i+1); })
	          .on("click", _.bind(function() {
	              this.event_dispatcher("element_clicked");
	          }, this));
	
	        this.draw_dots();
	
	        this.line = d3.svg.line()
	          .interpolate(this.model.get("interpolation"))
	          .defined(function(d) { return d.y !== null && isFinite(y_scale.scale(d.y)); });
	
	        this.area = d3.svg.area()
	          .interpolate(this.model.get("interpolation"))
	          .defined(function(d) { return area && d.y !== null && isFinite(y_scale.scale(d.y)); });
	
	        // Having a transition on exit is complicated. Please refer to
	        // Scatter.js for detailed explanation.
	        curves_sel.exit().remove();
	        this.update_line_xy(animate);
	        this.update_style();
	
	        // alter the display only if a few of the curves are visible
	        this.update_curves_subset();
	    },
	
	    draw_dots: function() {
	        if (this.model.get("marker")) {
	            var that = this;
	            var dots = this.d3el.selectAll(".curve").selectAll(".dot")
	                .data(function(d, i) {
	                    return d.values.map(function(e) {
	                        return {x: e.x, y: e.y, sub_index: e.sub_index}; });
	                });
	            dots.enter().append("path").attr("class", "dot");
	            dots.exit().remove();
	        }
	    },
	
	    update_dots_xy: function(animate) {
	        if (this.model.get("marker")) {
	            var that = this;
	            var x_scale = this.scales.x, y_scale = this.scales.y;
	            var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	            var dots = this.d3el.selectAll(".curve").selectAll(".dot");
	
	            dots.transition("update_dots_xy").duration(animation_duration)
	                .attr("transform", function(d) { return "translate(" + (x_scale.scale(d.x) + x_scale.offset) +
	                        "," + (y_scale.scale(d.y) + y_scale.offset) + ")";
	                })
	                .attr("d", this.dot.size(this.model.get("marker_size"))
	                               .type(this.model.get("marker")));
	        }
	    },
	
	    compute_view_padding: function() {
	        //This function sets the padding for the view through the variables
	        //x_padding and y_padding which are view specific paddings in pixel
	        var x_padding;
	        if (this.model.get("marker")) {
	            var marker_padding = Math.sqrt(this.model.get("marker_size")) / 2 + 1.0;
	            var line_padding = this.model.get("stroke_width") / 2.0;
	            x_padding = Math.max(marker_padding, line_padding);
	        } else {
	            x_padding = this.model.get("stroke_width") / 2.0;
	        }
	
	        var y_padding = x_padding;
	        if(x_padding !== this.x_padding || y_padding !== this.y_padding) {
	            this.x_padding = x_padding;
	            this.y_padding = y_padding;
	            this.trigger("mark_padding_updated");
	        }
	    },
	
	    update_marker_style: function() {
	        var that = this;
	        var fill_color = this.model.get("fill_colors");
	        var opacities = this.model.get("opacities");
	        this.d3el.selectAll(".curve").each(function(d, i) {
	            var curve = d3.select(this);
	            curve.selectAll(".dot")
	                .style("opacity", opacities[i])
	                .style("fill", that.get_element_color(d, i) || fill_color[i]);
	        });
	    },
	
	    update_marker: function(model, marker) {
	        if (marker) {
	            this.draw_dots();
	            this.update_dots_xy();
	            this.update_marker_style();
	            if (this.legend_el) {
	                this.legend_el.select(".dot").attr("d", this.dot.type(marker).size(25));
	            }
	        } else {
	            this.d3el.selectAll(".dot").remove();
	            if (this.legend_el) {
	                this.legend_el.select(".dot").attr("d", this.dot.size(0));
	            }
	        }
	    },
	
	    update_marker_size: function(model, marker_size) {
	        this.compute_view_padding();
	        this.d3el.selectAll(".dot").attr("d", this.dot.size(marker_size));
	    },
	
	    process_interactions: function() {
	        var interactions = this.model.get("interactions");
	        if(_.isEmpty(interactions)) {
	            //set all the event listeners to blank functions
	            this.reset_interactions();
	        } else {
	            if(interactions.click !== undefined &&
	              interactions.click !== null) {
	                if(interactions.click === "tooltip") {
	                    this.event_listeners.element_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                }
	            } else {
	                this.reset_click();
	            }
	            if(interactions.hover !== undefined &&
	              interactions.hover !== null) {
	                if(interactions.hover === "tooltip") {
	                    this.event_listeners.mouse_over = this.refresh_tooltip;
	                    this.event_listeners.mouse_move = this.move_tooltip;
	                    this.event_listeners.mouse_out = this.hide_tooltip;
	                }
	            } else {
	                this.reset_hover();
	            }
	            if(interactions.legend_hover !== undefined &&
	              interactions.legend_hover !== null) {
	                if(interactions.legend_hover === "highlight_axes") {
	                    this.event_listeners.legend_mouse_over = _.bind(this.highlight_axes, this);
	                    this.event_listeners.legend_mouse_out = _.bind(this.unhighlight_axes, this);
	                }
	            } else {
	                this.reset_legend_hover();
	            }
	        }
	    }
	});
	
	module.exports = {
	    Lines: Lines
	};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	
	var pi = Math.PI,
	    radian = pi / 180,
	    sqrt3 = Math.sqrt(3),
	    tan30 = Math.tan(pi / 6);
	
	var circleSymbol = function(size) {
	    var r = Math.sqrt(size / pi);
	    return "M0," + r +
	        "A" + r + "," + r + " 0 1,1 0," + (-r) +
	        "A" + r + "," + r + " 0 1,1 0," + r +
	        "Z";
	};
	
	var bqSymbolTypes = d3.map({
	    "circle": circleSymbol,
	    "cross": function(size,e) {
	        var r = Math.sqrt(size / 5) / 2;
	        return "M" + -3 * r + "," + -r +
	            "H" + -r +
	            "V" + -3 * r +
	            "H" + r +
	            "V" + -r +
	            "H" + 3 * r +
	            "V" + r +
	            "H" + r +
	            "V" + 3 * r +
	            "H" + -r +
	            "V" + r +
	            "H" + -3 * r +
	            "Z";
	    },
	    "diamond": function(size, s) {
	        var ry = Math.sqrt(size / (2 * tan30)),
	            rx = ry * tan30;
	        return "M0," + -ry +
	            "L" + rx + ",0" +
	            " 0," + ry +
	            " " + -rx + ",0" +
	            "Z";
	    },
	    "square": function(size, s) {
	        var r = Math.sqrt(size) / 2;
	        return "M" + -r + "," + -r +
	            "L" + r + "," + -r +
	            " " + r + "," + r +
	            " " + -r + "," + r +
	            "Z";
	    },
	    "triangle-down": function(size, s) {
	        var rx = Math.sqrt(size / sqrt3),
	            ry = rx * sqrt3 / 2;
	        return "M0," + ry +
	            "L" + rx +"," + -ry +
	            " " + -rx + "," + -ry +
	            "Z";
	    },
	    "triangle-up": function(size, s) {
	        var rx = Math.sqrt(size / sqrt3),
	            ry = rx * sqrt3 / 2;
	        return "M0," + -ry +
	            "L" + rx +"," + ry +
	            " " + -rx + "," + ry +
	            "Z";
	    },
	    "arrow": function(size, skew) {
	        var angle = 60 + (5 - 60) * skew,
	            s = Math.tan(angle * radian),
	            ry = Math.sqrt(size / s),
	            rx = ry * s / 2;
	        return "M0," + -ry +
	            "L" + rx +"," + ry +
	            " " + -rx + "," + ry +
	            "Z";
	    },
	    "ellipse": function(size, skew) {
	        var s = Math.pow(10, skew),
	            rx = Math.sqrt(size / (pi * s)),
	            ry = rx * s;
	        return "M0," + ry +
	            "A" + rx + "," + ry + " 0 1,1 0," + (-ry) +
	            "A" + rx + "," + ry + " 0 1,1 0," + ry +
	            "Z";
	    },
	    "rectangle": function(size, skew) {
	        var s = Math.pow(10, skew),
	            rx = Math.sqrt(size / s) / 2,
	            ry = rx * s;
	        return "M" + -rx + "," + -ry +
	            "L" + rx + "," + -ry +
	            " " + rx + "," + ry +
	            " " + -rx + "," + ry +
	            "Z";
	    },
	});
	
	function symbolSize() {
	    return 64;
	}
	
	function symbolType() {
	    return "circle";
	}
	
	function symbolSkew() {
	    return 0.5;
	}
	
	var bqSymbol = function() {
	    var type = symbolType,
	        size = symbolSize;
	        skew = symbolSkew;
	
	    function symbol(d,i) {
	        return (bqSymbolTypes.get(type.call(this,d,i)) || circleSymbol)
	            (size.call(this,d,i), skew.call(this, d, i));
	    }
	
	    symbol.type = function(x) {
	        if (!arguments.length) return type;
	        type = d3.functor(x);
	        return symbol;
	    };
	
	    // size of symbol in square pixels
	    symbol.size = function(x) {
	        if (!arguments.length) return size;
	        size = d3.functor(x);
	        return symbol;
	    };
	
	    // skew of symbol, in [0, 1]
	    symbol.skew = function(x) {
	        if (!arguments.length) return skew;
	        skew = d3.functor(x);
	        return symbol;
	    };
	
	    return symbol;
	};
	
	module.exports = {
	    symbol: bqSymbol,
	    types: bqSymbolTypes.keys()
	};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var scatterbase = __webpack_require__(37);
	var markers = __webpack_require__(59);
	var d3 = __webpack_require__(8);
	
	var bqSymbol = markers.symbol;
	
	
	var Scatter = scatterbase.ScatterBase.extend({
	
	    render: function() {
	
	        this.dot = bqSymbol()
	          .type(this.model.get("marker"))
	          .size(this.model.get("default_size"))
	          .skew(this.model.get("default_skew"));
	
	        return Scatter.__super__.render.apply(this);
	    },
	
	    create_listeners: function() {
	        Scatter.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:colors", this.update_colors, this);
	        this.listenTo(this.model, "change:stroke", this.update_stroke, this);
	        this.listenTo(this.model, "change:stroke_width", this.update_stroke_width, this);
	        this.listenTo(this.model, "change:default_opacities", this.update_default_opacities, this);
	        this.listenTo(this.model, "change:default_skew", this.update_default_skew, this);
	        this.listenTo(this.model, "change:default_rotation", this.update_xy_position, this);
	        this.listenTo(this.model, "change:marker", this.update_marker, this);
	        this.listenTo(this.model, "change:default_size", this.update_default_size, this);
	        this.listenTo(this.model, "change:fill", this.update_fill, this);
	        this.listenTo(this.model, "change:display_names", this.update_names, this);
	    },
	
	    update_colors: function(model, new_colors) {
	        if(!this.model.dirty) {
	            var that = this,
	                stroke = this.model.get("stroke"),
	                len = new_colors.length;
	            this.d3el.selectAll(".dot")
	            .style("fill", this.model.get("fill") ?
	                function(d, i) {
	                    return that.get_element_color(d, i);
	                } : "none")
	            .style("stroke", stroke ? stroke : function(d, i) {
	                return that.get_element_color(d, i);
	            });
	
	            if (this.legend_el) {
	                this.legend_el.select("path")
	                .style("fill", function(d, i) {
	                    return new_colors[i % len];
	                })
	                .style("stroke", stroke ? stroke : function(d, i) {
	                        return new_colors[i % len];
	                    }
	                );
	                this.legend_el.select("text")
	                .style("fill", this.model.get("fill") ? function(d, i) {
	                    return new_colors[i % len];
	                } : "none");
	            }
	        }
	    },
	
	    update_fill: function(model, fill) {
	        var that = this,
	            colors = this.model.get("colors"),
	            len = colors.length;
	        this.d3el.selectAll(".dot").style("fill", fill  ? function(d, i) {
	            return that.get_element_color(d, i);
	        } : "none");
	        if (this.legend_el) {
	            this.legend_el.selectAll("path")
	                .style("fill", fill  ? function(d, i) {
	                    return colors[i % len];
	                } : "none");
	        }
	    },
	
	    update_stroke_width: function() {
	        var stroke_width = this.model.get("stroke_width");
	
	        this.d3el.selectAll(".dot")
	          .style("stroke-width", stroke_width);
	
	        if (this.legend_el) {
	            this.legend_el.selectAll("path")
	              .style("stroke-width", stroke_width);
	        }
	    },
	
	    update_stroke: function(model, fill) {
	        var that = this,
	            stroke = this.model.get("stroke");
	        this.d3el.selectAll(".dot")
	            .style("stroke", stroke ? stroke : function(d, i) {
	                return that.get_element_color(d, i);
	            });
	
	        if (this.legend_el) {
	            this.legend_el.selectAll("path")
	                .style("stroke", stroke);
	        }
	    },
	
	    update_default_opacities: function(animate) {
	        if (!this.model.dirty) {
	            var default_opacities = this.model.get("default_opacities");
	            var colors = this.model.get("colors");
	            var len = colors.length;
	            var len_opac = default_opacities.length;
	            var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	
	            // update opacity scale range?
	            var that = this;
	            this.d3el.selectAll(".dot")
	                .transition("update_default_opacities")
	                .duration(animation_duration)
	                .style("opacity", function(d, i) {
	                    return that.get_element_opacity(d, i);
	                });
	            if (this.legend_el) {
	                this.legend_el.select("path")
	                .style("opacity", function(d, i) {
	                    return default_opacities[i % len_opac];
	                })
	                .style("fill", function(d, i) {
	                    return colors[i % len];
	                });
	            }
	        }
	    },
	
	    update_marker: function(model, marker) {
	        if (!this.model.dirty) {
	            this.d3el.selectAll(".dot")
	                .transition("update_marker")
	                .duration(this.parent.model.get("animation_duration"))
	                .attr("d", this.dot.type(marker));
	            this.legend_el.select("path")
	                .attr("d", this.dot.type(marker));
	        }
	    },
	
	    update_default_skew: function(animate) {
	        if (!this.model.dirty) {
	            var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	            var that = this;
	            this.d3el.selectAll(".dot")
	                .transition("update_default_skew")
	                .duration(animation_duration)
	                .attr("d", this.dot.skew(function(d) {
	                    return that.get_element_skew(d);
	                }));
	        }
	    },
	
	    update_default_size: function(animate) {
	        this.compute_view_padding();
	        // update size scale range?
	        if (!this.model.dirty) {
	            var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	            var that = this;
	            this.d3el.selectAll(".dot")
	                .transition("update_default_size")
	                .duration(animation_duration)
	                .attr("d", this.dot.size(function(d) {
	                    return that.get_element_size(d);
	                }));
	            // Label positions also need to change
	            this.update_names(animate);
	        }
	    },
	
	    update_names: function(animate) {
	        var that = this,
	            names = this.model.get_typed_field("names"),
	            show_names = this.model.get("display_names") && names.length !== 0,
	            animation_duration = animate ? this.parent.model.get("animation_duration") : 0;
	
	        this.d3el.selectAll(".object_grp").select("text")
	            .text(function(d) { return d.name; })
	            .transition("update_names")
	            .duration(animation_duration)
	            .attr("transform", function(d) {
	                var text_loc = Math.sqrt(that.get_element_size(d)) / 2.0;
	                return "translate(" + (text_loc) + "," + (-text_loc) + ")";})
	            .attr("display", function(d) {
	                return (show_names) ? "inline": "none";
	            });
	    },
	
	    color_scale_updated: function(animate) {
	        var that = this,
	            fill = this.model.get("fill"),
	            stroke = this.model.get("stroke");
	            var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	
	        this.d3el.selectAll(".object_grp")
	          .select("path")
	          .transition("color_scale_updated")
	          .duration(animation_duration)
	          .style("fill", fill ?
	              function(d, i) {
	                  return that.get_element_color(d, i);
	              } : "none")
	          .style("stroke", stroke ? stroke : function(d, i) {
	                  return that.get_element_color(d, i);
	              });
	    },
	
	    draw_elements: function(animate, elements_added) {
	        var that = this;
	
	        var animation_duration = animate === true ? this.parent.model.get("animation_duration") : 0;
	        var elements = this.d3el.selectAll(".object_grp")
	
	        elements_added.append("path").attr("class", "dot element");
	        elements_added.append("text").attr("class", "dot_text");
	        elements.select("path").transition("draw_elements")
	            .duration(animation_duration)
	            .attr("d", this.dot
	                .size(function(d) { return that.get_element_size(d); })
	                .skew(function(d) { return that.get_element_skew(d); }));
	
	        this.update_names(animate);
	        this.apply_styles();
	    },
	
	    draw_legend_elements: function(elements_added, rect_dim) {
	        var colors = this.model.get("colors"),
	            len = colors.length,
	            stroke = this.model.get("stroke");
	
	        elements_added.append("path")
	          .attr("transform", function(d, i) {
	              return "translate( " + rect_dim / 2 + ", " + rect_dim / 2 + ")";
	          })
	          .attr("d", this.dot.size(64))
	          .style("fill", this.model.get("fill")  ?
	                function(d, i) {
	                    return colors[i % len];
	                } : "none")
	          .style("stroke", stroke ? stroke :
	                function(d, i) {
	                    return colors[i % len];
	                }
	          );
	    },
	
	    set_default_style: function(indices) {
	        // For all the elements with index in the list indices, the default
	        // style is applied.
	        if(!indices || indices.length === 0) {
	            return;
	        }
	        var elements = this.d3el.selectAll(".element").filter(function(data, index) {
	            return indices.indexOf(index) !== -1;
	        });
	        var fill = this.model.get("fill"),
	            stroke = this.model.get("stroke"),
	            stroke_width = this.model.get("stroke_width"),
	            that = this;
	        elements
	          .style("fill", fill ? function(d, i) {
	             return that.get_element_color(d, i);
	          } : "none")
	          .style("stroke", stroke ? stroke : function(d, i) {
	              return that.get_element_color(d, i);
	          }).style("opacity", function(d, i) {
	              return that.get_element_opacity(d, i);
	          }).style("stroke-width", stroke_width);
	    },
	
	    set_drag_style: function(d, i, dragged_node) {
	        d3.select(dragged_node)
	          .select("path")
	          .classed("drag_scatter", true)
	          .transition("set_drag_style")
	          .attr("d", this.dot.size(5 * this.model.get("default_size")));
	
	        var drag_color = this.model.get("drag_color");
	        if (drag_color) {
	            d3.select(dragged_node)
	              .select("path")
	              .style("fill", drag_color)
	              .style("stroke", drag_color);
	        }
	    },
	
	    reset_drag_style: function(d, i, dragged_node) {
	        var stroke = this.model.get("stroke"),
	            original_color = this.get_element_color(d, i);
	
	        d3.select(dragged_node)
	          .select("path")
	          .classed("drag_scatter", false)
	          .transition("reset_drag_style")
	          .attr("d", this.dot.size(this.get_element_size(d)));
	
	        if (this.model.get("drag_color")) {
	            d3.select(dragged_node)
	              .select("path")
	              .style("fill", original_color)
	              .style("stroke", stroke ? stroke : original_color);
	        }
	    },
	});
	
	module.exports = {
	    Scatter: Scatter
	};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var linearscalemodel = __webpack_require__(52);
	
	var DateScaleModel = linearscalemodel.LinearScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(linearscalemodel.LinearScaleModel.prototype.defaults(), {
	            _model_name: "DateScaleModel",
	            _view_name: "DateScale",
	
	            // min: null,
	            // max: null,
	            // mid: null
	        });
	    },
	
	    initialize: function() {
	        DateScaleModel.__super__.initialize.apply(this, arguments);
	    },
	
	    set_init_state: function() {
	        this.type = "date";
	        this.global_min = (new Date()).setTime(0);
	        this.global_max = new Date();
	    },
	
	    min_max_changed: function() {
	        this.min = this.get_date_elem("min");
	        this.max = this.get_date_elem("max");
	        this.min_from_data = (this.min === null);
	        this.max_from_data = (this.max === null);
	        this.update_domain();
	    }
	});
	
	
	module.exports = {
	    DateScaleModel: DateScaleModel
	};
	


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var LinesModel = markmodel.MarkModel.extend({
	
	    defaults: function () {
	        return _.extend(markmodel.MarkModel.prototype.defaults(), {
	            _model_name: "LinesModel",
	            _view_name: "Lines",
	            x: [],
	            y: [],
	            color: null,
	            scales_metadata: {
	                x: { orientation: "horizontal", dimension: "x" },
	                y: { orientation: "vertical", dimension: "y" },
	                color: { dimension: "color" }
	            },
	            colors: d3.scale.category10().range(),
	            fill_colors: d3.scale.category10().range(),
	            stroke_width: 2.0,
	            labels_visibility: "none",
	            curves_subset: [],
	            line_style: "solid",
	            interpolation: "linear",
	            close_path: false,
	            fill: "none",
	            marker: null,
	            marker_size: 64,
	            opacities: [],
	            fill_opacities: []
	        });
	    },
	
	    initialize: function() {
	        LinesModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["x", "y", "color"], this.update_data, this);
	        this.on("change:labels", this.update_labels, this);
	        // FIXME: replace this with on("change:preserve_domain"). It is not done here because
	        // on_some_change depends on the GLOBAL backbone on("change") handler which
	        // is called AFTER the specific handlers on("change:foobar") and we make that
	        // assumption.
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.update_data();
	        this.update_domains();
	    },
	
	    update_data: function() {
	        this.dirty = true;
	        // Handling data updates
	        var that = this;
	        this.x_data = this.get_typed_field("x");
	        this.y_data = this.get_typed_field("y");
	        this.color_data = this.get_typed_field("color");
	
	        var scales = this.get("scales");
	        var x_scale = scales.x, y_scale = scales.y;
	        var curve_labels = this.get("labels");
	        if (this.x_data.length === 0 || this.y_data.length === 0) {
	            this.mark_data = [];
	        } else {
	            this.x_data = this.x_data[0] instanceof Array ?
	                this.x_data : [this.x_data];
	            this.y_data = this.y_data[0] instanceof Array ?
	                this.y_data : [this.y_data];
	            curve_labels = this.get_labels();
	
	            var y_length = this.y_data.length;
	
	            if (this.x_data.length == 1 && y_length > 1) {
	                // same x for all y
	                this.mark_data = curve_labels.map(function(name, i) {
	                    return {
	                        name: name,
	                        values: that.y_data[i].map(function(d, j) {
	                            return {x: that.x_data[0][j], y: d,
	                                    y0: that.y_data[Math.min(i + 1, y_length - 1)][j],
	                                    sub_index: j};
	                        }),
	                        color: that.color_data[i],
	                        index: i,
	                    };
	                });
	            } else {
	                this.mark_data = curve_labels.map(function(name, i) {
	                    var xy_data = d3.zip(that.x_data[i], that.y_data[i]);
	                    return {
	                        name: name,
	                        values: xy_data.map(function(d, j) {
	                            return {x: d[0], y: d[1],
	                                    y0: that.y_data[Math.min(i + 1, y_length - 1)][j],
	                                    sub_index: j};
	                        }),
	                        color: that.color_data[i],
	                        index: i,
	                    };
	                });
	            }
	        }
	        this.update_domains();
	        this.dirty = false;
	        this.trigger("data_updated");
	    },
	
	    update_labels: function() {
	        // update the names in mark_data
	        var labels = this.get_labels();
	        this.mark_data.forEach(function(element, i) {
	            element.name = labels[i];
	        });
	        this.trigger("labels_updated");
	    },
	
	    get_labels: function() {
	        // Function to set the labels appropriately.
	        // Setting the labels to the value sent and filling in the
	        // remaining values.
	        var curve_labels = this.get("labels");
	        var data_length = (this.x_data.length == 1) ?
	            (this.y_data.length) : Math.min(this.x_data.length, this.y_data.length);
	        if(curve_labels.length > data_length) {
	            curve_labels = curve_labels.slice(0, data_length);
	        }
	        else if(curve_labels.length < data_length) {
	            _.range(curve_labels.length, data_length).forEach(function(index) {
	                curve_labels[index] = "C" + (index+1);
	            });
	        }
	        return curve_labels;
	    },
	
	    update_domains: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        var scales = this.get("scales");
	        var x_scale = scales.x, y_scale = scales.y;
	        var color_scale = scales.color;
	
	        if(!this.get("preserve_domain").x) {
	            x_scale.compute_and_set_domain(this.mark_data.map(function(elem) {
	                return elem.values.map(function(d) { return d.x; });
	            }), this.model_id + "_x");
	        } else {
	            x_scale.del_domain([], this.model_id + "_x");
	        }
	
	        if(!this.get("preserve_domain").y) {
	            y_scale.compute_and_set_domain(this.mark_data.map(function(elem) {
	                return elem.values.map(function(d) { return d.y; });
	            }), this.model_id + "_y");
	        } else {
	            y_scale.del_domain([], this.model_id + "_y");
	        }
	        if(color_scale !== null && color_scale !== undefined) {
	            if(!this.get("preserve_domain").color) {
	                color_scale.compute_and_set_domain(this.mark_data.map(function(elem) {
	                    return elem.color;
	                }), this.model_id + "_color");
	            } else {
	                color_scale.del_domain([], this.model_id + "_color");
	            }
	        }
	    },
	
	    get_data_dict: function(data, index) {
	        return data;
	    },
	});
	
	var FlexLineModel = LinesModel.extend({
	
	    defaults: function() {
	        return _.extend(LinesModel.prototype.defaults(), {
	            _model_name: "FlexLineModel",
	            _view_name: "FlexLine",
	
	            x: [],
	            y: [],
	            color: null,
	            scales_metadata: {
	                x: { orientation: "horizontal", dimension: "x" },
	                y: { orientation: "vertical", dimension: "y" },
	                color: { dimension: "color" }
	            },
	            colors: d3.scale.category10().range(),
	            fill_colors: d3.scale.category10().range(),
	            stroke_width: 2.0,
	            labels_visibility: "none",
	            curves_subset: [],
	            line_style: "solid",
	            interpolation: "linear",
	            close_path: false,
	            fill: "none",
	            marker: null,
	            marker_size: 64,
	            opacities: [],
	            fill_opacities: [],
	        });
	    },
	
	    update_data: function() {
	        this.dirty = true;
	        // Handling data updates
	        var that = this;
	        this.x_data = this.get_typed_field("x");
	        this.y_data = this.get_typed_field("y");
	
	        var scales = this.get("scales");
	        var x_scale = scales.x, y_scale = scales.y;
	        var curve_labels = this.get("labels");
	        if (this.x_data.length === 0 || this.y_data.length === 0) {
	            this.mark_data = [];
	            this.data_len = 0;
	        } else {
	            this.x_data = this.x_data[0] instanceof Array ?
	                this.x_data : [this.x_data];
	            this.y_data = this.y_data[0] instanceof Array ?
	                this.y_data : [this.y_data];
	            curve_labels = this.get_labels();
	            var color_data = this.get_typed_field("color");
	            var width_data = this.get_typed_field("width");
	            this.data_len = Math.min(this.x_data[0].length, this.y_data[0].length);
	
	            this.mark_data = [{
	                name: curve_labels[0],
	                values: _.range(this.data_len - 1).map(function(val, index) {
	                    return {
	                        x1: that.x_data[0][index],
	                        y1: that.y_data[0][index],
	                        x2: that.x_data[0][index + 1],
	                        y2: that.y_data[0][index + 1],
	                        color: color_data[index],
	                        size: width_data[index]
	                    };
	                })
	            }];
	        }
	
	        this.update_domains();
	        this.dirty = false;
	        this.trigger("data_updated");
	    },
	
	    update_domains: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        var scales = this.get("scales");
	        var x_scale = scales.x, y_scale = scales.y;
	        var color_scale = scales.color;
	        var width_scale = scales.width;
	
	        if(!this.get("preserve_domain").x) {
	            x_scale.compute_and_set_domain(this.x_data[0].slice(0, this.data_len), this.model_id + "_x");
	        } else {
	            x_scale.del_domain([], this.model_id + "_x");
	        }
	
	        if(!this.get("preserve_domain").y) {
	            y_scale.compute_and_set_domain(this.y_data[0].slice(0, this.data_len), this.model_id + "_y");
	        } else {
	            y_scale.del_domain([], this.model_id + "_y");
	        }
	
	        if(color_scale !== null && color_scale !== undefined) {
	            if(!this.get("preserve_domain").color) {
	                color_scale.compute_and_set_domain(this.mark_data.map(function(elem) {
	                    return elem.values.map(function(d) {
	                        return d.color;
	                    });
	                }), this.model_id + "_color");
	            } else {
	                color_scale.del_domain([], this.model_id + "_color");
	            }
	        }
	        if(width_scale !== null && width_scale !== undefined) {
	            if(!this.get("preserve_domain").width) {
	                width_scale.compute_and_set_domain(this.mark_data.map(function(elem) {
	                    return elem.values.map(function(d) {
	                        return d.size;
	                    });
	                }), this.model_id + "_width");
	            } else {
	                width_scale.del_domain([], this.model_id + "_width");
	            }
	        }
	    }
	});
	
	module.exports = {
	    LinesModel: LinesModel,
	    FlexLineModel: FlexLineModel
	};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var basemodel = __webpack_require__(39);
	
	var ScatterModel = basemodel.ScatterBaseModel.extend({
	
	    defaults: function() {
	        return _.extend(basemodel.ScatterBaseModel.prototype.defaults(), {
	            _model_name: "ScatterModel",
	            _view_name: "Scatter",
	            skew: null,
	            marker: "circle",
	            stroke: null,
	            stroke_width: 1.5,
	            default_skew: 0.5,
	            default_size: 64,
	            names: [],
	            display_names: true,
	            fill: true,
	            drag_color: null,
	            drag_size: 5.0,
	            names_unique: true,
	        });
	    },
	
	    initialize: function() {
	        // TODO: Normally, color, opacity and size should not require a redraw
	        ScatterModel.__super__.initialize.apply(this, arguments);
	        this.on("change:skew", this.update_data, this);
	        this.on_some_change(["names", "names_unique"], function() {
	            this.update_unique_ids();
	            this.trigger("data_updated");
	        }, this);
	    },
	
	    update_mark_data: function() {
	        ScatterModel.__super__.update_mark_data.apply(this);
	        var skew = this.get_typed_field("skew");
	
	        this.mark_data.forEach(function(d, i){ d.skew = skew[i]; });
	    },
	
	    update_unique_ids: function() {
	        var names = this.get_typed_field("names");
	        var show_labels = (names.length !== 0);
	        names = (show_labels) ? names : this.mark_data.map(function(data, index) {
	            return "Dot" + index;
	        });
	        var unique_ids = [];
	        if(this.get("names_unique")) {
	            unique_ids = names.slice(0);
	        } else {
	            unique_ids = _.range(this.mark_data.length);
	        }
	
	        this.mark_data.forEach(function(data, index){
	            data.name = names[index];
	            data.unique_id = unique_ids[index];
	        });
	    },
	});
	
	module.exports = {
	    ScatterModel: ScatterModel
	};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var _ = __webpack_require__(9);
	var d3 = __webpack_require__(8);
	var baseselector = __webpack_require__(29);
	var mark = __webpack_require__(15);
	var sel_utils = __webpack_require__(43);
	
	var FastIntervalSelector = baseselector.BaseXSelector.extend({
	
	    render: function() {
	        FastIntervalSelector.__super__.render.apply(this);
	        this.freeze_but_move = true;
	        this.freeze_dont_move = false;
	        this.active = false;
	        this.dirty = false;
	        this.size = this.model.get("size");
	
	        this.width = this.parent.width - this.parent.margin.left - this.parent.margin.right;
	        this.height = this.parent.height - this.parent.margin.top - this.parent.margin.bottom;
	
	        var that = this;
	        var scale_creation_promise = this.create_scales();
	        Promise.all([this.mark_views_promise, scale_creation_promise]).then(function() {
	            //container for mouse events
	            that.background = that.d3el.append("rect")
	              .attr("x", 0)
	              .attr("y", 0)
	              .attr("width", that.width)
	              .attr("height", that.height)
	              .attr("class", "selector selectormouse")
	              .attr("pointer-events", "all")
	              .attr("visibility", "hidden");
	
	            that.background.on("mousemove", _.bind(that.mousemove, that))
	              .on("click", _.bind(that.click, that))
	              .on("dblclick", _.bind(that.dblclick, that));
	
	            that.rect = that.d3el.append("rect")
	              .attr("class", "selector intsel")
	              .attr("x", 0)
	              .attr("y", 0)
	              .attr("width", that.size)
	              .attr("height", that.height)
	              .attr("pointer-events", "none")
	              .attr("display", "none");
	
	            that.color_change();
	            that.selected_changed();
	            that.create_listeners();
	        });
	    },
	
	    create_listeners: function() {
	        FastIntervalSelector.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:color", this.color_change, this);
	    },
	
	    color_change: function() {
	        if(this.model.get("color") !== null) {
	            this.rect.style("fill", this.model.get("color"));
	        }
	    },
	
	    click: function () {
	        this.active = true;
	        this.rect.style("display", "inline");
	        this.freeze_but_move = this.model.get("size") ?
	            true : !this.freeze_but_move;
	    },
	
	    dblclick: function () {
	        this.freeze_dont_move = !this.freeze_dont_move;
	    },
	
	    mousemove: function() {
	        if (this.freeze_dont_move || !this.active) {
	            return;
	        }
	        this.dirty = true;
	        var mouse_pos = d3.mouse(this.background.node());
	        var int_len = this.size > 0 ?
	            this.size : parseInt(this.rect.attr("width"));
	        var vert_factor = (this.height - mouse_pos[1]) / this.height;
	        var interval_size = this.freeze_but_move ?
	            int_len : Math.round(vert_factor * this.width);
	
	        var start;
	        if (mouse_pos[0] - interval_size / 2 < 0) {
	            start = 0;
	        } else if ((mouse_pos[0] + interval_size / 2) > this.width) {
	            start = this.width - interval_size;
	        } else {
	            start = mouse_pos[0] - interval_size / 2;
	        }
	
	        //update the interval location and size
	        this.rect.attr("x", start);
	        this.rect.attr("width", interval_size);
	        var pixel_extent = [start, start + interval_size];
	        this.model.set_typed_field("selected",
	                                   this.scale.invert_range(pixel_extent));
	        this.update_mark_selected(pixel_extent);
	        this.touch();
	        this.dirty = false;
	    },
	
	    update_mark_selected: function(extent_x, extent_y) {
	
	        if(extent_x === undefined || extent_x.length === 0) {
	            // Reset all the selected in marks
	            _.each(this.mark_views, function(mark_view) {
	                return mark_view.selector_changed();
	            });
	        } if (extent_y === undefined) {
	            // 1d brush
	            var orient = this.model.get("orientation");
	            var x = (orient == "vertical") ? [] : extent_x,
	                y = (orient == "vertical") ? extent_x : [];
	        } else {
	            // 2d brush
	            var x = extent_x, y = extent_y;
	        }
	        var point_selector = function(p) {
	            return sel_utils.point_in_rectangle(p, x, y);
	        };
	        var rect_selector = function(xy) {
	            return sel_utils.rect_inter_rect(xy[0], xy[1], x, y);
	        };
	
	        _.each(this.mark_views, function(mark_view) {
	            mark_view.selector_changed(point_selector, rect_selector);
	        }, this);
	    },
	
	    scale_changed: function() {
	        this.reset();
	        this.create_scale();
	    },
	
	    relayout: function() {
	        FastIntervalSelector.__super__.relayout.apply(this);
	
	        this.adjust_rectangle();
	        this.background
	          .attr("width", this.width)
	          .attr("height", this.height);
	
	        this.set_range([this.scale]);
	    },
	
	    reset: function() {
	        this.rect.attr("x", 0)
	          .attr("width", 0);
	        this.model.set_typed_field("selected", {});
	        this.update_mark_selected();
	        this.touch();
	    },
	
	    update_scale_domain: function(ignore_gui_update) {
	        // Call the base class function to update the scale.
	        FastIntervalSelector.__super__.update_scale_domain.apply(this);
	        if(ignore_gui_update !== true) {
	            this.selected_changed();
	        }
	    },
	
	    selected_changed: function(model, value) {
	        //TODO: should the size get overridden if it was set previously and
	        //then selected was changed from the python side?
	        if(this.dirty) {
	            //this change was most probably triggered from the js side and
	            //should be ignored.
	            return;
	        }
	        //reposition the interval selector and set the selected attribute.
	        var selected = this.model.get_typed_field("selected");
	        if(selected.length === 0) {
	            this.reset();
	        } else if (selected.length != 2) {
	            // invalid value for selected. Ignoring the value
	            return;
	        } else {
	            var pixels = selected.map(this.scale.scale);
	            pixels = pixels.sort(function(a, b) { return a - b; });
	
	            this.rect.attr({
	                x: pixels[0],
	                width: (pixels[1] - pixels[0])
	            }).style("display", "inline");
	            this.active = true;
	            this.update_mark_selected(pixels)
	        }
	    },
	
	    adjust_rectangle: function() {
	        if (this.model.get("orientation") == "vertical") {
	            this.d3el.selectAll("rect")
	              .attr("x", 0)
	              .attr("width", this.width);
	        } else {
	            this.d3el.selectAll("rect")
	              .attr("y", 0)
	              .attr("height", this.height);
	        }
	    },
	});
	
	module.exports = {
	    FastIntervalSelector: FastIntervalSelector
	};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var linearscale = __webpack_require__(55);
	
	var LogScale = linearscale.LinearScale.extend({
	    render: function() {
	        this.scale = d3.scale.log();
	        if(this.model.domain.length > 0) {
	            this.scale.domain(this.model.domain);
	        }
	        this.offset = 0;
	        this.create_event_listeners();
	    }
	});
	
	module.exports = {
	    LogScale: LogScale
	};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var popperreference = __webpack_require__(67);
	var popper = __webpack_require__(68);
	
	if (popper.__esModule) {
	    popper = popper.default;
	}
	
	var Figure = widgets.DOMWidgetView.extend({
	
	    initialize : function() {
	        // Internet Explorer does not support classList for svg elements
	        this.el.classList.add("bqplot");
	        this.el.classList.add("figure");
	        this.el.classList.add("jupyter-widgets");
	
	        var svg = document.createElementNS(d3.ns.prefix.svg, "svg");
	        this.el.appendChild(svg);
	        this.svg = d3.select(svg);
	        Figure.__super__.initialize.apply(this, arguments);
	    },
	
	    _get_height_width: function(suggested_height, suggested_width) {
	        //Calculates the height and width of the figure from the suggested_height
	        //and suggested_width. Looks at the min_aspect_ratio and max_aspect_ratio
	        //to determine the final height and width.
	
	        var max_ratio = this.model.get("max_aspect_ratio");
	        var min_ratio = this.model.get("min_aspect_ratio");
	
	        var return_value = {};
	        var width_undefined = (suggested_width === undefined || isNaN(suggested_width) || suggested_width <= 0);
	        var height_undefined = (suggested_height === undefined || isNaN(suggested_height) || suggested_width <= 0);
	
	        if (width_undefined && height_undefined) {
	            // Same as the defaults in bqplot.less
	            suggested_height = 480;
	            suggested_width = 640;
	        } else if (height_undefined) {
	            suggested_height = suggested_width / min_ratio;
	        } else if (width_undefined) {
	            suggested_width = suggested_height * min_ratio;
	        }
	
	        var ratio = suggested_width / suggested_height;
	        if (ratio <= max_ratio && ratio >= min_ratio) {
	            // If the available width and height are within bounds in terms
	            // of aspect ration, use all the space available.
	            return_value["width"] = suggested_width;
	            return_value["height"] = suggested_height;
	        } else if (ratio > max_ratio) {
	            // The available space is too oblong horizontally.
	            // Use all vertical space and compute width based on maximum
	            // aspect ratio.
	            return_value["height"] = suggested_height;
	            return_value["width"] = suggested_height * max_ratio;
	         } else { // ratio < min_ratio
	            // The available space is too oblong vertically.
	            // Use all horizontal space and compute height based on minimum
	            // aspect ratio.
	            return_value["width"] = suggested_width;
	            return_value["height"] = suggested_width / min_ratio;
	        }
	        return return_value;
	    },
	
	    render : function() {
	        var min_width = String(this.model.get("layout").get("min_width"));
	        var min_height = String(this.model.get("layout").get("min_height"));
	
	        var impl_dimensions = this._get_height_width(min_height.slice(0, -2), min_width.slice(0, -2));
	        this.width = impl_dimensions["width"];
	        this.height = impl_dimensions["height"];
	
	        this.id = widgets.uuid();
	
	        // Dictionary which contains the mapping for each of the marks id
	        // to it's padding. Dictionary is required to not recompute
	        // everything when a mark is removed.
	        this.x_pad_dict = {};
	        this.y_pad_dict = {};
	
	        // this is the net padding in pixel to be applied to the x and y.
	        // If there is no restriction on the plottable area of the figure,
	        // then these two variables are the maximum of the values in the
	        // corresponding variables x_pad_dict, y_pad_dict.
	        this.x_padding_arr = {};
	        this.y_padding_arr = {};
	
	        this.figure_padding_x = this.model.get("padding_x");
	        this.figure_padding_y = this.model.get("padding_y");
	        this.clip_id = "clip_path_" + this.id;
	        this.margin = this.model.get("fig_margin");
	
	        this.update_plotarea_dimensions();
	        // this.fig is the top <g> element to be impacted by a rescaling / change of margins
	
	        this.fig = this.svg.append("g")
	            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
	        this.tooltip_div = d3.select(document.createElement("div"))
	            .attr("class", "tooltip_div");
	        this.popper_reference = new popperreference.PositionReference({x: 0, y: 0, width: 20, height: 20});
	        this.popper = new popper(this.popper_reference, this.tooltip_div.node(), {
	            placement: 'auto',
	        });
	
	        this.bg = this.fig.append("rect")
	          .attr("class", "plotarea_background")
	          .attr("x", 0).attr("y", 0)
	          .attr("width", this.plotarea_width)
	          .attr("height", this.plotarea_height)
	          .on("click", function() { that.trigger("bg_clicked"); })
	          .style("pointer-events", "inherit")
	          .style(this.model.get("background_style"));
	
	        this.fig_axes = this.fig.append("g");
	        this.fig_marks = this.fig.append("g");
	        this.interaction = this.fig.append("g");
	
	        /*
	         * The following is the structure of the DOM element constructed
	         *
	        <div class="bqplot figure jupyter-widgets">
	            <svg>
	                <g class="svg-figure" transform="margin translation">
	                    <g class="svg-axes"></g>
	                    <g class="svg-marks"></g>
	                    <g class="svg-interaction"></g>
	                </g>
	            </svg>
	        </div>
	        */
	
	        this.clip_path = this.svg.append("svg:defs")
	          .append("svg:clipPath")
	          .attr("id", this.clip_id)
	          .append("rect")
	          .attr("x", 0)
	          .attr("y", 0)
	          .attr("width", this.plotarea_width)
	          .attr("height", this.plotarea_height);
	
	        this.title = this.fig.append("text")
	          .attr("class", "mainheading")
	          .attr({x: (0.5 * (this.plotarea_width)), y: -(this.margin.top / 2.0), dy: "1em"})
	          .text(this.model.get("title"))
	          .style(this.model.get("title_style"));
	
	        // TODO: remove the save png event mechanism.
	        this.model.on("save_png", this.save_png, this);
	        this.model.on("save_svg", this.save_svg, this);
	
	        var figure_scale_promise = this.create_figure_scales();
	        var that = this;
	        figure_scale_promise.then(function() {
	            that.mark_views = new widgets.ViewList(that.add_mark, that.remove_mark, that);
	            that.mark_views.update(that.model.get("marks"));
	            Promise.all(that.mark_views.views).then(function(views) {
	                that.replace_dummy_nodes(views);
	                that.update_marks(views);
	                that.update_legend();
	                // Update Interaction layer
	                // This has to be done after the marks are created
	                that.set_interaction(that.model.get("interaction"));
	            });
	
	            that.axis_views = new widgets.ViewList(that.add_axis, null, that);
	            that.axis_views.update(that.model.get("axes"));
	
	            // TODO: move to the model
	            that.model.on_some_change(["fig_margin", "min_aspect_ration", "max_aspect_ratio", "preserve_aspect"], that.relayout, that);
	            that.model.on_some_change(["padding_x", "padding_y"], function() {
	                this.figure_padding_x = this.model.get("padding_x");
	                this.figure_padding_y = this.model.get("padding_y");
	                this.trigger("margin_updated");
	            }, that);
	            that.model.on("change:axes", function(model, value, options) {
	                this.axis_views.update(value);
	            }, that);
	            that.model.on("change:marks", function(model, value, options) {
	                this.mark_views.update(value);
	                Promise.all(this.mark_views.views).then(function(views) {
	                    that.replace_dummy_nodes(views);
	                    that.update_marks(views);
	                    that.update_legend();
	                });
	            }, that);
	            that.model.on("change:legend_location", that.update_legend, that);
	            that.model.on("change:title", that.update_title, that);
	
	            that.model.on("change:interaction", function(model, value) {
	                this.set_interaction(value);
	            }, that);
	
	            that.displayed.then(function(args) {
	                document.body.appendChild(that.tooltip_div.node());
	                that.create_listeners();
	                if(args === undefined || args.add_to_dom_only !== true) {
	                    //do not relayout if it is only being added to the DOM
	                    //and not displayed.
	                    that.relayout();
	                }
	                // In the classic notebook, we should relayout the figure on
	                // resize of the main window.
	                window.addEventListener('resize', function() {
	                    that.relayout();
	                })
	            });
	        });
	    },
	
	    replace_dummy_nodes: function(views) {
	        _.each(views, function(view) {
	            if (view.dummy_node !== null) {
	                view.dummy_node.parentNode.replaceChild(view.el, view.dummy_node);
	                view.dummy_node = null;
	                this.displayed.then(function() {
	                    view.trigger("displayed");
	                });
	            }
	        }, this);
	    },
	
	    create_listeners: function() {
	        this.listenTo(this.model, "change:title_style", this.title_style_updated, this);
	        this.listenTo(this.model, "change:background_style", this.background_style_updated, this);
	        this.listenTo(this.model, "change:layout", this.change_layout, this);
	        this.listenTo(this.model, "change:legend_style", this.legend_style_updated, this);
	        this.listenTo(this.model, "change:legend_text", this.legend_text_updated, this);
	    },
	
	    title_style_updated: function() {
	        this.title.style(this.model.get("title_style"));
	    },
	
	    background_style_updated: function() {
	        this.bg.style(this.model.get("background_style"));
	    },
	
	    legend_style_updated: function() {
	        this.fig_marks.selectAll(".g_legend").selectAll(".axis").selectAll("rect")
	            .style(this.model.get("legend_style"));
	    },
	
	    legend_text_updated: function() {
	        this.fig_marks.selectAll(".g_legend").selectAll("text.legendtext")
	            .style(this.model.get("legend_text"));
	    },
	
	    create_figure_scales: function() {
	        // Creates the absolute scales for the figure: default domain is [0,1], range is [0,width] and [0,height].
	        // See the scale_x and scale_y attributes of the python Figure
	        var that = this;
	        var x_scale_promise = this.create_child_view(this.model.get("scale_x"))
	            .then(function(view) {
	                that.scale_x = view;
	                that.scale_x.scale.clamp(true);
	                that.scale_x.set_range([0, that.plotarea_width]);
	            });
	
	        var y_scale_promise = this.create_child_view(this.model.get("scale_y"))
	            .then(function(view) {
	                that.scale_y = view;
	                that.scale_y.scale.clamp(true);
	                that.scale_y.set_range([that.plotarea_height, 0]);
	            });
	        return Promise.all([x_scale_promise, y_scale_promise]);
	    },
	
	    padded_range: function(direction, scale_model) {
	        // Functions to be called by mark which respects padding.
	        // Typically all marks do this. Axis do not do this.
	        // Also, if a mark does not set the domain, it can potentially call
	        // the unpadded ranges.
	        var scale_padding, fig_padding;
	        if(!scale_model.get("allow_padding")) {
	            return this.range(direction);
	        }
	        var scale_id = scale_model.model_id;
	
	        if(direction==="x") {
	            scale_padding = (this.x_padding_arr[scale_id] !== undefined) ?
	                this.x_padding_arr[scale_id] : 0;
	            fig_padding = (this.plotarea_width) * this.figure_padding_x;
	            return [(fig_padding + scale_padding), (this.plotarea_width - fig_padding - scale_padding)];
	        } else if(direction==="y") {
	            scale_padding = (this.y_padding_arr[scale_id] !== undefined) ?
	                this.y_padding_arr[scale_id] : 0;
	            fig_padding = (this.plotarea_height) * this.figure_padding_y;
	            return [this.plotarea_height - scale_padding - fig_padding, scale_padding + fig_padding];
	        }
	    },
	
	    range: function(direction) {
	        if(direction==="x") {
	            return [0, this.plotarea_width];
	        } else if(direction==="y") {
	            return [this.plotarea_height, 0];
	        }
	    },
	
	    get_mark_plotarea_height: function(scale_model) {
	        if(!(scale_model.get("allow_padding"))) {
	            return this.plotarea_height;
	        }
	        var scale_id = scale_model.model_id;
	        var scale_padding = (this.y_padding_arr[scale_id] !== undefined) ?
	            this.y_padding_arr[scale_id] : 0;
	        return (this.plotarea_height) * (1 - this.figure_padding_y) - scale_padding - scale_padding;
	    },
	
	    get_mark_plotarea_width: function (scale_model) {
	        if(!(scale_model.get("allow_padding"))) {
	            return this.plotarea_width;
	        }
	
	        var scale_id = scale_model.model_id;
	        var scale_padding = (this.x_padding_arr[scale_id] !== undefined) ?
	            this.x_padding_arr[scale_id] : 0;
	        return (this.plotarea_width) * (1 - this.figure_padding_x) - scale_padding - scale_padding;
	    },
	
	    add_axis: function(model) {
	        // Called when an axis is added to the axes list.
	        var that = this;
	        return this.create_child_view(model)
	          .then(function(view) {
	            that.fig_axes.node().appendChild(view.el);
	            that.displayed.then(function() {
	                view.trigger("displayed");
	            });
	            return view;
	        });
	    },
	
	    remove_from_padding_dict: function(dict, mark_view, scale_model) {
	        if(scale_model === undefined || scale_model === null) {
	            return;
	        }
	        var scale_id = scale_model.model_id;
	        if(dict[scale_id] !== undefined) {
	            delete dict[scale_id][mark_view.model.model_id + "_" + mark_view.cid];
	            if(Object.keys(dict[scale_id]).length === 0) {
	                delete dict[scale_id];
	            }
	        }
	    },
	
	    update_padding_dict: function(dict, mark_view, scale_model, value) {
	        var scale_id = scale_model.model_id;
	        if(!(dict[scale_id])) {
	            dict[scale_id]= {};
	        }
	        dict[scale_id][mark_view.model.model_id + "_" + mark_view.cid] = value;
	    },
	
	    mark_scales_updated: function(view) {
	        var model = view.model;
	        var prev_scale_models = model.previous("scales");
	        this.remove_from_padding_dict(this.x_pad_dict, view, prev_scale_models[model.get_key_for_orientation("horizontal")]);
	        this.remove_from_padding_dict(this.y_pad_dict, view, prev_scale_models[model.get_key_for_orientation("vertical")]);
	
	        var scale_models = model.get("scales");
	        this.update_padding_dict(this.x_pad_dict, view, scale_models[model.get_key_for_orientation("horizontal")], view.x_padding);
	        this.update_padding_dict(this.y_pad_dict, view, scale_models[model.get_key_for_orientation("vertical")], view.y_padding);
	
	        this.update_paddings();
	    },
	
	    mark_padding_updated: function(view) {
	        var model = view.model;
	        var scale_models = model.get("scales");
	
	        this.update_padding_dict(this.x_pad_dict, view, scale_models[model.get_key_for_orientation("horizontal")], view.x_padding);
	        this.update_padding_dict(this.y_pad_dict, view, scale_models[model.get_key_for_orientation("vertical")], view.y_padding);
	
	        this.update_paddings();
	    },
	
	    update_marks: function(mark_views) {
	        this.update_paddings();
	    },
	
	    remove_mark: function(view) {
	       // Called when a mark is removed from the mark list.
	        var model = view.model;
	        model.off("redraw_legend", null, this);
	        model.off("data_updated", null, this);
	        model.off("scales_updated", null, this);
	        model.off("mark_padding_updated", null, this);
	
	        var scale_models = model.get("scales");
	        this.remove_from_padding_dict(this.x_pad_dict, view, scale_models[model.get_key_for_orientation("horizontal")]);
	        this.remove_from_padding_dict(this.y_pad_dict, view, scale_models[model.get_key_for_orientation("vertical")]);
	        view.remove();
	    },
	
	    add_mark: function(model) {
	        var that = this;
	        model.state_change.then(function() {
	            model.on("data_updated redraw_legend", that.update_legend, that);
	        });
	
	        var dummy_node = that.fig_marks.node().appendChild(document.createElementNS(d3.ns.prefix.svg, "g"));
	
	        return that.create_child_view(model, {clip_id: that.clip_id}).then(function(view) {
	            view.dummy_node = dummy_node;
	            view.on("mark_padding_updated", function() {
	                that.mark_padding_updated(view);
	            }, that);
	            view.on("mark_scales_updated", function() {
	                that.mark_scales_updated(view);
	            }, that);
	            var child_x_scale = view.model.get("scales")[view.model.get_key_for_dimension("x")];
	            var child_y_scale = view.model.get("scales")[view.model.get_key_for_dimension("y")];
	            if(child_x_scale === undefined) {
	                child_x_scale = that.scale_x.model;
	            }
	            if(child_y_scale === undefined) {
	                child_y_scale = that.scale_y.model;
	            }
	            that.update_padding_dict(that.x_pad_dict, view, child_x_scale, view.x_padding);
	            that.update_padding_dict(that.y_pad_dict, view, child_y_scale, view.y_padding);
	
	            return view;
	        });
	    },
	
	    update_paddings: function() {
	        // Iterate over the paddings of the marks for each scale and store
	        // the maximum padding for each scale on the X and Y in
	        // x_padding_arr and y_padding_arr
	        var max = 0; // ok padding cannot be negative
	
	        this.x_padding_arr = {};
	        this.y_padding_arr = {};
	
	        var that = this;
	        _.forEach(this.x_pad_dict, function(dict, scale_id) {
	            max = 0;
	            _.forEach(dict, function(value, key) {
	                max = Math.max(max, value);
	            });
	            that.x_padding_arr[scale_id] = max;
	        });
	
	        _.forEach(this.y_pad_dict, function(dict, scale_id) {
	            max = 0;
	            _.forEach(dict, function(value, key) {
	                max = Math.max(max, value);
	            });
	            that.y_padding_arr[scale_id] = max;
	        });
	        // This is for the figure to relayout everything to account for the
	        // updated margins.
	        this.trigger("margin_updated");
	
	    },
	
	    update_plotarea_dimensions: function() {
	        this.plotarea_width = this.width - this.margin.left - this.margin.right;
	        this.plotarea_height = this.height - this.margin.top - this.margin.bottom;
	    },
	
	    processPhosphorMessage: function(msg) {
	        Figure.__super__.processPhosphorMessage.apply(this, arguments);
	        switch (msg.type) {
	        case 'resize':
	        case 'after-show':
	            this.relayout();
	            break;
	        }
	    },
	
	    relayout: function() {
	
	        var that = this;
	
	        var impl_dimensions = this._get_height_width(this.el.clientHeight, this.el.clientWidth);
	        that.width = impl_dimensions["width"];
	        that.height = impl_dimensions["height"];
	
	        window.requestAnimationFrame(function () {
	            // update ranges
	            that.margin = that.model.get("fig_margin");
	            that.update_plotarea_dimensions();
	
	            if (that.scale_x !== undefined && that.scale_x !== null) {
	                that.scale_x.set_range([0, that.plotarea_width]);
	            }
	
	
	            if (that.scale_y !== undefined && that.scale_y !== null) {
	                that.scale_y.set_range([that.plotarea_height, 0]);
	            }
	
	            // transform figure
	            that.fig.attr("transform", "translate(" + that.margin.left + "," +
	                                                      that.margin.top + ")");
	            that.title.attr({
	                x: (0.5 * (that.plotarea_width)),
	                y: -(that.margin.top / 2.0),
	                dy: "1em"
	            });
	
	            that.bg
	                .attr("width", that.plotarea_width)
	                .attr("height", that.plotarea_height);
	
	
	            that.clip_path.attr("width", that.plotarea_width)
	                .attr("height", that.plotarea_height);
	
	            that.trigger("margin_updated");
	            that.update_legend();
	        });
	
	    },
	
	    update_legend: function() {
	        this.fig_marks.selectAll(".g_legend").remove();
	
	        var num_series = this.model.get("marks").length;
	        var legend_disp = 30 + num_series * 7;
	        var legend_height = 14;
	        var legend_width = 24;
	        var legend_location = this.model.get("legend_location");
	
	        var legend_g = this.fig_marks.append("g")
	          .attr("class", "g_legend");
	
	        var that = this;
	        var count = 1;
	        var max_label_len = 1;
	
	        if(this.mark_views !== undefined && this.mark_views !== null) {
	            Promise.all(this.mark_views.views).then(function(views) {
	                views.forEach(function(mark_view) {
	                    if(mark_view.model.get("display_legend")) {
	                        var child_count = mark_view.draw_legend(legend_g, 0, count * (legend_height + 2), 0, legend_height + 2);
	                        count = count + child_count[0];
	                        max_label_len = (child_count[1]) ?
	                            Math.max(max_label_len, child_count[1]) : max_label_len;
	                    }
	                });
	
	                var coords = that.get_legend_coords(legend_location, legend_width, (count + 1) * (legend_height + 2), 0);
	                if(count !== 1) {
	                    legend_g.insert("g", ":first-child")
	                      .attr("class", "axis")
	                    .append("rect")
	                      .attr({"y": (legend_height + 2) / 2.0,
	                             "x": (-0.5 * (legend_height + 2))})
	                      .attr("width", (max_label_len + 2) + "em")
	                      .attr("height", (count * (legend_height + 2)));
	
	                }
	                max_label_len = (legend_location === "top-right" ||
	                                 legend_location === "right" ||
	                                 legend_location === "bottom-right") ? -(max_label_len + 2) : 1;
	                var em = 16;
	                legend_g.attr("transform", "translate(" + String(coords[0] + max_label_len * em) + " " +
	                                                          String(coords[1]) + ") ");
	
	                legend_g.selectAll("text.legendtext").style(that.model.get("legend_text"));
	
	                legend_g.selectAll(".axis").selectAll("rect").style(that.model.get("legend_style"));
	
	            });
	        }
	    },
	
	    get_legend_coords: function(legend_location, width, height, disp) {
	        var x_start = 0;
	        var y_start = 0;
	        var fig_width = this.plotarea_width;
	        var fig_height = this.plotarea_height;
	
	        switch (legend_location){
	            case "top":
	                x_start = fig_width * 0.5 - width;
	                y_start = 0;
	                break;
	            case "top-right":
	                x_start = fig_width - disp;
	                y_start = 0;
	                break;
	            case "right":
	                x_start = fig_width - disp;
	                y_start = fig_height* 0.5 - height;
	                break;
	            case "bottom-right":
	                x_start = fig_width - disp;
	                y_start = fig_height - height;
	                break;
	            case "bottom":
	                x_start = fig_width * 0.5 - width;
	                y_start = fig_height - height;
	                break;
	            case "bottom-left":
	                x_start = 0;
	                y_start = fig_height - height;
	                break;
	            case "left":
	                x_start = 0;
	                y_start = fig_height * 0.5 - height;
	                break;
	            default:
	                x_start = 0;
	                y_start = 0;
	        }
	        return [x_start, y_start];
	    },
	
	    set_interaction: function(model) {
	        if (model) {
	            // Sets the child interaction
	            var that = this;
	            model.state_change.then(function() {
	                // Sets the child interaction
	                that.create_child_view(model).then(function(view) {
	                    if (that.interaction_view) {
	                        that.interaction_view.remove();
	                    }
	                    that.interaction_view = view;
	                    that.interaction.node().appendChild(view.el);
	                    that.displayed.then(function() {
	                        view.trigger("displayed");
	                    });
	                });
	            });
	        } else {
	            if (this.interaction_view) {
	                this.interaction_view.remove();
	            }
	        }
	    },
	
	    update_title: function(model, title) {
	        this.title.text(this.model.get("title"));
	    },
	
	    remove: function() {
	        if(this.mark_views !== undefined && this.mark_views !== null) {
	            this.mark_views.remove();
	        }
	        if(this.axis_views !== undefined && this.axis_views !== null) {
	            this.axis_views.remove();
	        }
	        if(this.tooltip_div !== undefined) {
	            this.tooltip_div.remove();
	        }
	        return Figure.__super__.remove.apply(this, arguments);
	    },
	
	    get_svg: function() {
	        // Returns the outer html of the figure svg
	
	        var  replaceAll = function (find, replace, str) {
	            return str.replace(new RegExp(find, "g"), replace);
	        };
	
	        var get_css = function(node, regs) {
	            /**
	             * Gathers all the css rules applied to elements of the svg
	             * node. Removes the parent element selectors specified in
	             * argument `regs`.
	             */
	            var css = "";
	            var sheets = document.styleSheets;
	            var selector;
	            for (var i = 0; i < sheets.length; i++) {
	                var rules = sheets[i].cssRules;
	                if (rules) {
	                    for (var j = 0; j < rules.length; j++) {
	                        var rule = rules[j];
	                        if (typeof(rule.style) !== "undefined") {
	                            var match = null;
	                            try {
	                                match = node.querySelectorAll(rule.selectorText);
	                            } catch (err) {
	                                console.warn("Invalid CSS selector '" +
	                                             rule.selectorText + "'", err);
	                            }
	                            if (match) {
	                                var elems = node.querySelectorAll(rule.selectorText);
	                                if (elems.length > 0) {
	                                    selector = rule.selectorText;
	                                    for (var r = 0; r < regs.length; r++) {
	                                        selector = replaceAll(regs[r], "", selector);
	                                    }
	                                    css += selector + " { " + rule.style.cssText + " }\n";
	                                }
	                            } else if (rule.cssText.match(/^@font-face/)) {
	                                css += rule.cssText + "\n";
	                            }
	                        }
	                    }
	                }
	            }
	            // TODO: this is terrible. The previous loop over style sheets
	            // does not catch document's top-level properties.
	            css += "svg { font-size: 10px; }\n";
	            return css;
	        };
	
	        var svg2svg = function(node) {
	            // Creates a standalone SVG string from an inline SVG element
	            // containing all the computed style attributes.
	            var svg = node.cloneNode(true);
	            svg.setAttribute("version", "1.1");
	            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
	            svg.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
	            svg.style.background = window.getComputedStyle(document.body).background;
	            var s = document.createElement("style");
	            s.setAttribute("type", "text/css");
	            s.innerHTML = "<![CDATA[\n" +
	                get_css(node, ["\.theme-dark", "\.theme-light", ".bqplot > "]) + "\n]]>";
	            var defs = document.createElement("defs");
	            defs.appendChild(s);
	            svg.insertBefore(defs, svg.firstChild);
	            // Getting the outer HTML
	            return svg.outerHTML;
	        };
	        // Create standalone SVG string
	        var svg = svg2svg(this.svg.node());
	        return svg;
	    },
	
	
	    save_png: function(filename) {
	
	        var xml = this.get_svg();
	
	        // Render a SVG data into a canvas and download as PNG.
	        var image = new Image();
	        var that = this;
	        image.onload = function() {
	            var canvas = document.createElement("canvas");
	            canvas.classList.add('bqplot');
	            canvas.width = that.width;
	            canvas.height = that.height;
	            var context = canvas.getContext("2d");
	            context.drawImage(image, 0, 0);
	            var a = document.createElement("a");
	            a.download = filename || "bqplot.png";
	            a.href = canvas.toDataURL("bqplot/png");
	            document.body.appendChild(a);
	            a.click();
	            document.body.removeChild(a);
	        };
	        image.src = "data:image/svg+xml;base64," + btoa(xml);
	    },
	
	
	    save_svg: function(filename) {
	
	        var xml = this.get_svg();
	
	        var a = document.createElement("a");
	        a.download = filename || "bqplot.svg";
	        a.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(xml);
	        document.body.appendChild(a);
	        a.click();
	        document.body.removeChild(a);
	    },
	});
	
	
	module.exports = {
	    Figure: Figure
	};


/***/ }),
/* 67 */
/***/ (function(module, exports) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	/* Generated from this typescript code:
	class ElementReference {
	    constructor(elt) {
	        this.elt = elt;
	    }
	    getBoundingClientRect() {
	        return this.elt.getBoundingClientRect();
	    }
	    get clientWidth() {
	        return this.elt.clientWidth;
	    }
	    get clientHeight() {
	        return this.elt.clientHeight;
	    }
	
	    elt: HTMLElement;
	}
	*/
	
	/**
	 * A delegate reference for the popper js library
	 */
	var ElementReference = (function () {
	    function ElementReference(elt) {
	        this.elt = elt;
	    }
	    ElementReference.prototype.getBoundingClientRect = function () {
	        return this.elt.getBoundingClientRect();
	    };
	    Object.defineProperty(ElementReference.prototype, "clientWidth", {
	        get: function () {
	            return this.elt.clientWidth;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ElementReference.prototype, "clientHeight", {
	        get: function () {
	            return this.elt.clientHeight;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ElementReference;
	}());
	
	
	
	/* Generated from the Typescript code:
	
	class PositionReference {
	    constructor({ x, y, width, height }) {
	        this.x = x;
	        this.y = y;
	        this.width = width;
	        this.height = height;
	    }
	    getBoundingClientRect() {
	        let halfwidth = this.width / 2;
	        let halfheight = this.height / 2;
	        return {
	            left: this.x - halfwidth,
	            right: this.x + halfwidth,
	            top: this.y - halfheight,
	            bottom: this.y + halfheight,
	            width: this.width,
	            height: this.height
	        }
	    }
	    get clientWidth() { return this.width; }
	    get clientHeight() { return this.height; }
	
	    x: number;
	    y: number;
	    width: number;
	    height: number;
	}
	*/
	
	/**
	 * A reference for a specific position.
	 */
	var PositionReference = (function () {
	    function PositionReference(_a) {
	        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
	        this.x = x;
	        this.y = y;
	        this.width = width;
	        this.height = height;
	    }
	    PositionReference.prototype.getBoundingClientRect = function () {
	        var halfwidth = this.width / 2;
	        var halfheight = this.height / 2;
	        return {
	            left: this.x - halfwidth,
	            right: this.x + halfwidth,
	            top: this.y - halfheight,
	            bottom: this.y + halfheight,
	            width: this.width,
	            height: this.height
	        };
	    };
	    Object.defineProperty(PositionReference.prototype, "clientWidth", {
	        get: function () { return this.width; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PositionReference.prototype, "clientHeight", {
	        get: function () { return this.height; },
	        enumerable: true,
	        configurable: true
	    });
	    return PositionReference;
	}());
	
	
	module.exports = {
	    ElementReference: ElementReference,
	    PositionReference: PositionReference
	};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**!
	 * @fileOverview Kickass library to create and place poppers near their reference elements.
	 * @version 1.12.9
	 * @license
	 * Copyright (c) 2016 Federico Zivolo and contributors
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */
	(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.Popper = factory());
	}(this, (function () { 'use strict';
	
	var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
	var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
	var timeoutDuration = 0;
	for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
	  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
	    timeoutDuration = 1;
	    break;
	  }
	}
	
	function microtaskDebounce(fn) {
	  var called = false;
	  return function () {
	    if (called) {
	      return;
	    }
	    called = true;
	    window.Promise.resolve().then(function () {
	      called = false;
	      fn();
	    });
	  };
	}
	
	function taskDebounce(fn) {
	  var scheduled = false;
	  return function () {
	    if (!scheduled) {
	      scheduled = true;
	      setTimeout(function () {
	        scheduled = false;
	        fn();
	      }, timeoutDuration);
	    }
	  };
	}
	
	var supportsMicroTasks = isBrowser && window.Promise;
	
	/**
	* Create a debounced version of a method, that's asynchronously deferred
	* but called in the minimum time possible.
	*
	* @method
	* @memberof Popper.Utils
	* @argument {Function} fn
	* @returns {Function}
	*/
	var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
	
	/**
	 * Check if the given variable is a function
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Any} functionToCheck - variable to check
	 * @returns {Boolean} answer to: is a function?
	 */
	function isFunction(functionToCheck) {
	  var getType = {};
	  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	}
	
	/**
	 * Get CSS computed property of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Eement} element
	 * @argument {String} property
	 */
	function getStyleComputedProperty(element, property) {
	  if (element.nodeType !== 1) {
	    return [];
	  }
	  // NOTE: 1 DOM access here
	  var css = getComputedStyle(element, null);
	  return property ? css[property] : css;
	}
	
	/**
	 * Returns the parentNode or the host of the element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} parent
	 */
	function getParentNode(element) {
	  if (element.nodeName === 'HTML') {
	    return element;
	  }
	  return element.parentNode || element.host;
	}
	
	/**
	 * Returns the scrolling parent of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} scroll parent
	 */
	function getScrollParent(element) {
	  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
	  if (!element) {
	    return document.body;
	  }
	
	  switch (element.nodeName) {
	    case 'HTML':
	    case 'BODY':
	      return element.ownerDocument.body;
	    case '#document':
	      return element.body;
	  }
	
	  // Firefox want us to check `-x` and `-y` variations as well
	
	  var _getStyleComputedProp = getStyleComputedProperty(element),
	      overflow = _getStyleComputedProp.overflow,
	      overflowX = _getStyleComputedProp.overflowX,
	      overflowY = _getStyleComputedProp.overflowY;
	
	  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
	    return element;
	  }
	
	  return getScrollParent(getParentNode(element));
	}
	
	/**
	 * Returns the offset parent of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} offset parent
	 */
	function getOffsetParent(element) {
	  // NOTE: 1 DOM access here
	  var offsetParent = element && element.offsetParent;
	  var nodeName = offsetParent && offsetParent.nodeName;
	
	  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
	    if (element) {
	      return element.ownerDocument.documentElement;
	    }
	
	    return document.documentElement;
	  }
	
	  // .offsetParent will return the closest TD or TABLE in case
	  // no offsetParent is present, I hate this job...
	  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
	    return getOffsetParent(offsetParent);
	  }
	
	  return offsetParent;
	}
	
	function isOffsetContainer(element) {
	  var nodeName = element.nodeName;
	
	  if (nodeName === 'BODY') {
	    return false;
	  }
	  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
	}
	
	/**
	 * Finds the root node (document, shadowDOM root) of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} node
	 * @returns {Element} root node
	 */
	function getRoot(node) {
	  if (node.parentNode !== null) {
	    return getRoot(node.parentNode);
	  }
	
	  return node;
	}
	
	/**
	 * Finds the offset parent common to the two provided nodes
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element1
	 * @argument {Element} element2
	 * @returns {Element} common offset parent
	 */
	function findCommonOffsetParent(element1, element2) {
	  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
	  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
	    return document.documentElement;
	  }
	
	  // Here we make sure to give as "start" the element that comes first in the DOM
	  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
	  var start = order ? element1 : element2;
	  var end = order ? element2 : element1;
	
	  // Get common ancestor container
	  var range = document.createRange();
	  range.setStart(start, 0);
	  range.setEnd(end, 0);
	  var commonAncestorContainer = range.commonAncestorContainer;
	
	  // Both nodes are inside #document
	
	  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
	    if (isOffsetContainer(commonAncestorContainer)) {
	      return commonAncestorContainer;
	    }
	
	    return getOffsetParent(commonAncestorContainer);
	  }
	
	  // one of the nodes is inside shadowDOM, find which one
	  var element1root = getRoot(element1);
	  if (element1root.host) {
	    return findCommonOffsetParent(element1root.host, element2);
	  } else {
	    return findCommonOffsetParent(element1, getRoot(element2).host);
	  }
	}
	
	/**
	 * Gets the scroll value of the given element in the given side (top and left)
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @argument {String} side `top` or `left`
	 * @returns {number} amount of scrolled pixels
	 */
	function getScroll(element) {
	  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
	
	  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
	  var nodeName = element.nodeName;
	
	  if (nodeName === 'BODY' || nodeName === 'HTML') {
	    var html = element.ownerDocument.documentElement;
	    var scrollingElement = element.ownerDocument.scrollingElement || html;
	    return scrollingElement[upperSide];
	  }
	
	  return element[upperSide];
	}
	
	/*
	 * Sum or subtract the element scroll values (left and top) from a given rect object
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} rect - Rect object you want to change
	 * @param {HTMLElement} element - The element from the function reads the scroll values
	 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
	 * @return {Object} rect - The modifier rect object
	 */
	function includeScroll(rect, element) {
	  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	  var scrollTop = getScroll(element, 'top');
	  var scrollLeft = getScroll(element, 'left');
	  var modifier = subtract ? -1 : 1;
	  rect.top += scrollTop * modifier;
	  rect.bottom += scrollTop * modifier;
	  rect.left += scrollLeft * modifier;
	  rect.right += scrollLeft * modifier;
	  return rect;
	}
	
	/*
	 * Helper to detect borders of a given element
	 * @method
	 * @memberof Popper.Utils
	 * @param {CSSStyleDeclaration} styles
	 * Result of `getStyleComputedProperty` on the given element
	 * @param {String} axis - `x` or `y`
	 * @return {number} borders - The borders size of the given axis
	 */
	
	function getBordersSize(styles, axis) {
	  var sideA = axis === 'x' ? 'Left' : 'Top';
	  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
	
	  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
	}
	
	/**
	 * Tells if you are running Internet Explorer 10
	 * @method
	 * @memberof Popper.Utils
	 * @returns {Boolean} isIE10
	 */
	var isIE10 = undefined;
	
	var isIE10$1 = function () {
	  if (isIE10 === undefined) {
	    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;
	  }
	  return isIE10;
	};
	
	function getSize(axis, body, html, computedStyle) {
	  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);
	}
	
	function getWindowSizes() {
	  var body = document.body;
	  var html = document.documentElement;
	  var computedStyle = isIE10$1() && getComputedStyle(html);
	
	  return {
	    height: getSize('Height', body, html, computedStyle),
	    width: getSize('Width', body, html, computedStyle)
	  };
	}
	
	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	
	
	
	
	var defineProperty = function (obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};
	
	/**
	 * Given element offsets, generate an output similar to getBoundingClientRect
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Object} offsets
	 * @returns {Object} ClientRect like output
	 */
	function getClientRect(offsets) {
	  return _extends({}, offsets, {
	    right: offsets.left + offsets.width,
	    bottom: offsets.top + offsets.height
	  });
	}
	
	/**
	 * Get bounding client rect of given element
	 * @method
	 * @memberof Popper.Utils
	 * @param {HTMLElement} element
	 * @return {Object} client rect
	 */
	function getBoundingClientRect(element) {
	  var rect = {};
	
	  // IE10 10 FIX: Please, don't ask, the element isn't
	  // considered in DOM in some circumstances...
	  // This isn't reproducible in IE10 compatibility mode of IE11
	  if (isIE10$1()) {
	    try {
	      rect = element.getBoundingClientRect();
	      var scrollTop = getScroll(element, 'top');
	      var scrollLeft = getScroll(element, 'left');
	      rect.top += scrollTop;
	      rect.left += scrollLeft;
	      rect.bottom += scrollTop;
	      rect.right += scrollLeft;
	    } catch (err) {}
	  } else {
	    rect = element.getBoundingClientRect();
	  }
	
	  var result = {
	    left: rect.left,
	    top: rect.top,
	    width: rect.right - rect.left,
	    height: rect.bottom - rect.top
	  };
	
	  // subtract scrollbar size from sizes
	  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};
	  var width = sizes.width || element.clientWidth || result.right - result.left;
	  var height = sizes.height || element.clientHeight || result.bottom - result.top;
	
	  var horizScrollbar = element.offsetWidth - width;
	  var vertScrollbar = element.offsetHeight - height;
	
	  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
	  // we make this check conditional for performance reasons
	  if (horizScrollbar || vertScrollbar) {
	    var styles = getStyleComputedProperty(element);
	    horizScrollbar -= getBordersSize(styles, 'x');
	    vertScrollbar -= getBordersSize(styles, 'y');
	
	    result.width -= horizScrollbar;
	    result.height -= vertScrollbar;
	  }
	
	  return getClientRect(result);
	}
	
	function getOffsetRectRelativeToArbitraryNode(children, parent) {
	  var isIE10 = isIE10$1();
	  var isHTML = parent.nodeName === 'HTML';
	  var childrenRect = getBoundingClientRect(children);
	  var parentRect = getBoundingClientRect(parent);
	  var scrollParent = getScrollParent(children);
	
	  var styles = getStyleComputedProperty(parent);
	  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
	  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);
	
	  var offsets = getClientRect({
	    top: childrenRect.top - parentRect.top - borderTopWidth,
	    left: childrenRect.left - parentRect.left - borderLeftWidth,
	    width: childrenRect.width,
	    height: childrenRect.height
	  });
	  offsets.marginTop = 0;
	  offsets.marginLeft = 0;
	
	  // Subtract margins of documentElement in case it's being used as parent
	  // we do this only on HTML because it's the only element that behaves
	  // differently when margins are applied to it. The margins are included in
	  // the box of the documentElement, in the other cases not.
	  if (!isIE10 && isHTML) {
	    var marginTop = parseFloat(styles.marginTop, 10);
	    var marginLeft = parseFloat(styles.marginLeft, 10);
	
	    offsets.top -= borderTopWidth - marginTop;
	    offsets.bottom -= borderTopWidth - marginTop;
	    offsets.left -= borderLeftWidth - marginLeft;
	    offsets.right -= borderLeftWidth - marginLeft;
	
	    // Attach marginTop and marginLeft because in some circumstances we may need them
	    offsets.marginTop = marginTop;
	    offsets.marginLeft = marginLeft;
	  }
	
	  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
	    offsets = includeScroll(offsets, parent);
	  }
	
	  return offsets;
	}
	
	function getViewportOffsetRectRelativeToArtbitraryNode(element) {
	  var html = element.ownerDocument.documentElement;
	  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
	  var width = Math.max(html.clientWidth, window.innerWidth || 0);
	  var height = Math.max(html.clientHeight, window.innerHeight || 0);
	
	  var scrollTop = getScroll(html);
	  var scrollLeft = getScroll(html, 'left');
	
	  var offset = {
	    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
	    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
	    width: width,
	    height: height
	  };
	
	  return getClientRect(offset);
	}
	
	/**
	 * Check if the given element is fixed or is inside a fixed parent
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @argument {Element} customContainer
	 * @returns {Boolean} answer to "isFixed?"
	 */
	function isFixed(element) {
	  var nodeName = element.nodeName;
	  if (nodeName === 'BODY' || nodeName === 'HTML') {
	    return false;
	  }
	  if (getStyleComputedProperty(element, 'position') === 'fixed') {
	    return true;
	  }
	  return isFixed(getParentNode(element));
	}
	
	/**
	 * Computed the boundaries limits and return them
	 * @method
	 * @memberof Popper.Utils
	 * @param {HTMLElement} popper
	 * @param {HTMLElement} reference
	 * @param {number} padding
	 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
	 * @returns {Object} Coordinates of the boundaries
	 */
	function getBoundaries(popper, reference, padding, boundariesElement) {
	  // NOTE: 1 DOM access here
	  var boundaries = { top: 0, left: 0 };
	  var offsetParent = findCommonOffsetParent(popper, reference);
	
	  // Handle viewport case
	  if (boundariesElement === 'viewport') {
	    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);
	  } else {
	    // Handle other cases based on DOM element used as boundaries
	    var boundariesNode = void 0;
	    if (boundariesElement === 'scrollParent') {
	      boundariesNode = getScrollParent(getParentNode(reference));
	      if (boundariesNode.nodeName === 'BODY') {
	        boundariesNode = popper.ownerDocument.documentElement;
	      }
	    } else if (boundariesElement === 'window') {
	      boundariesNode = popper.ownerDocument.documentElement;
	    } else {
	      boundariesNode = boundariesElement;
	    }
	
	    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);
	
	    // In case of HTML, we need a different computation
	    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
	      var _getWindowSizes = getWindowSizes(),
	          height = _getWindowSizes.height,
	          width = _getWindowSizes.width;
	
	      boundaries.top += offsets.top - offsets.marginTop;
	      boundaries.bottom = height + offsets.top;
	      boundaries.left += offsets.left - offsets.marginLeft;
	      boundaries.right = width + offsets.left;
	    } else {
	      // for all the other DOM elements, this one is good
	      boundaries = offsets;
	    }
	  }
	
	  // Add paddings
	  boundaries.left += padding;
	  boundaries.top += padding;
	  boundaries.right -= padding;
	  boundaries.bottom -= padding;
	
	  return boundaries;
	}
	
	function getArea(_ref) {
	  var width = _ref.width,
	      height = _ref.height;
	
	  return width * height;
	}
	
	/**
	 * Utility used to transform the `auto` placement to the placement with more
	 * available space.
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
	  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
	
	  if (placement.indexOf('auto') === -1) {
	    return placement;
	  }
	
	  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
	
	  var rects = {
	    top: {
	      width: boundaries.width,
	      height: refRect.top - boundaries.top
	    },
	    right: {
	      width: boundaries.right - refRect.right,
	      height: boundaries.height
	    },
	    bottom: {
	      width: boundaries.width,
	      height: boundaries.bottom - refRect.bottom
	    },
	    left: {
	      width: refRect.left - boundaries.left,
	      height: boundaries.height
	    }
	  };
	
	  var sortedAreas = Object.keys(rects).map(function (key) {
	    return _extends({
	      key: key
	    }, rects[key], {
	      area: getArea(rects[key])
	    });
	  }).sort(function (a, b) {
	    return b.area - a.area;
	  });
	
	  var filteredAreas = sortedAreas.filter(function (_ref2) {
	    var width = _ref2.width,
	        height = _ref2.height;
	    return width >= popper.clientWidth && height >= popper.clientHeight;
	  });
	
	  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
	
	  var variation = placement.split('-')[1];
	
	  return computedPlacement + (variation ? '-' + variation : '');
	}
	
	/**
	 * Get offsets to the reference element
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} state
	 * @param {Element} popper - the popper element
	 * @param {Element} reference - the reference element (the popper will be relative to this)
	 * @returns {Object} An object containing the offsets which will be applied to the popper
	 */
	function getReferenceOffsets(state, popper, reference) {
	  var commonOffsetParent = findCommonOffsetParent(popper, reference);
	  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);
	}
	
	/**
	 * Get the outer sizes of the given element (offset size + margins)
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Object} object containing width and height properties
	 */
	function getOuterSizes(element) {
	  var styles = getComputedStyle(element);
	  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
	  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
	  var result = {
	    width: element.offsetWidth + y,
	    height: element.offsetHeight + x
	  };
	  return result;
	}
	
	/**
	 * Get the opposite placement of the given one
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement
	 * @returns {String} flipped placement
	 */
	function getOppositePlacement(placement) {
	  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
	  return placement.replace(/left|right|bottom|top/g, function (matched) {
	    return hash[matched];
	  });
	}
	
	/**
	 * Get offsets to the popper
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} position - CSS position the Popper will get applied
	 * @param {HTMLElement} popper - the popper element
	 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
	 * @param {String} placement - one of the valid placement options
	 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
	 */
	function getPopperOffsets(popper, referenceOffsets, placement) {
	  placement = placement.split('-')[0];
	
	  // Get popper node sizes
	  var popperRect = getOuterSizes(popper);
	
	  // Add position, width and height to our offsets object
	  var popperOffsets = {
	    width: popperRect.width,
	    height: popperRect.height
	  };
	
	  // depending by the popper placement we have to compute its offsets slightly differently
	  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
	  var mainSide = isHoriz ? 'top' : 'left';
	  var secondarySide = isHoriz ? 'left' : 'top';
	  var measurement = isHoriz ? 'height' : 'width';
	  var secondaryMeasurement = !isHoriz ? 'height' : 'width';
	
	  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
	  if (placement === secondarySide) {
	    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
	  } else {
	    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
	  }
	
	  return popperOffsets;
	}
	
	/**
	 * Mimics the `find` method of Array
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Array} arr
	 * @argument prop
	 * @argument value
	 * @returns index or -1
	 */
	function find(arr, check) {
	  // use native find if supported
	  if (Array.prototype.find) {
	    return arr.find(check);
	  }
	
	  // use `filter` to obtain the same behavior of `find`
	  return arr.filter(check)[0];
	}
	
	/**
	 * Return the index of the matching object
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Array} arr
	 * @argument prop
	 * @argument value
	 * @returns index or -1
	 */
	function findIndex(arr, prop, value) {
	  // use native findIndex if supported
	  if (Array.prototype.findIndex) {
	    return arr.findIndex(function (cur) {
	      return cur[prop] === value;
	    });
	  }
	
	  // use `find` + `indexOf` if `findIndex` isn't supported
	  var match = find(arr, function (obj) {
	    return obj[prop] === value;
	  });
	  return arr.indexOf(match);
	}
	
	/**
	 * Loop trough the list of modifiers and run them in order,
	 * each of them will then edit the data object.
	 * @method
	 * @memberof Popper.Utils
	 * @param {dataObject} data
	 * @param {Array} modifiers
	 * @param {String} ends - Optional modifier name used as stopper
	 * @returns {dataObject}
	 */
	function runModifiers(modifiers, data, ends) {
	  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
	
	  modifiersToRun.forEach(function (modifier) {
	    if (modifier['function']) {
	      // eslint-disable-line dot-notation
	      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
	    }
	    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
	    if (modifier.enabled && isFunction(fn)) {
	      // Add properties to offsets to make them a complete clientRect object
	      // we do this before each modifier to make sure the previous one doesn't
	      // mess with these values
	      data.offsets.popper = getClientRect(data.offsets.popper);
	      data.offsets.reference = getClientRect(data.offsets.reference);
	
	      data = fn(data, modifier);
	    }
	  });
	
	  return data;
	}
	
	/**
	 * Updates the position of the popper, computing the new offsets and applying
	 * the new style.<br />
	 * Prefer `scheduleUpdate` over `update` because of performance reasons.
	 * @method
	 * @memberof Popper
	 */
	function update() {
	  // if popper is destroyed, don't perform any further update
	  if (this.state.isDestroyed) {
	    return;
	  }
	
	  var data = {
	    instance: this,
	    styles: {},
	    arrowStyles: {},
	    attributes: {},
	    flipped: false,
	    offsets: {}
	  };
	
	  // compute reference element offsets
	  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);
	
	  // compute auto placement, store placement inside the data object,
	  // modifiers will be able to edit `placement` if needed
	  // and refer to originalPlacement to know the original value
	  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
	
	  // store the computed placement inside `originalPlacement`
	  data.originalPlacement = data.placement;
	
	  // compute the popper offsets
	  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
	  data.offsets.popper.position = 'absolute';
	
	  // run the modifiers
	  data = runModifiers(this.modifiers, data);
	
	  // the first `update` will call `onCreate` callback
	  // the other ones will call `onUpdate` callback
	  if (!this.state.isCreated) {
	    this.state.isCreated = true;
	    this.options.onCreate(data);
	  } else {
	    this.options.onUpdate(data);
	  }
	}
	
	/**
	 * Helper used to know if the given modifier is enabled.
	 * @method
	 * @memberof Popper.Utils
	 * @returns {Boolean}
	 */
	function isModifierEnabled(modifiers, modifierName) {
	  return modifiers.some(function (_ref) {
	    var name = _ref.name,
	        enabled = _ref.enabled;
	    return enabled && name === modifierName;
	  });
	}
	
	/**
	 * Get the prefixed supported property name
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} property (camelCase)
	 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
	 */
	function getSupportedPropertyName(property) {
	  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
	  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
	
	  for (var i = 0; i < prefixes.length - 1; i++) {
	    var prefix = prefixes[i];
	    var toCheck = prefix ? '' + prefix + upperProp : property;
	    if (typeof document.body.style[toCheck] !== 'undefined') {
	      return toCheck;
	    }
	  }
	  return null;
	}
	
	/**
	 * Destroy the popper
	 * @method
	 * @memberof Popper
	 */
	function destroy() {
	  this.state.isDestroyed = true;
	
	  // touch DOM only if `applyStyle` modifier is enabled
	  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
	    this.popper.removeAttribute('x-placement');
	    this.popper.style.left = '';
	    this.popper.style.position = '';
	    this.popper.style.top = '';
	    this.popper.style[getSupportedPropertyName('transform')] = '';
	  }
	
	  this.disableEventListeners();
	
	  // remove the popper if user explicity asked for the deletion on destroy
	  // do not use `remove` because IE11 doesn't support it
	  if (this.options.removeOnDestroy) {
	    this.popper.parentNode.removeChild(this.popper);
	  }
	  return this;
	}
	
	/**
	 * Get the window associated with the element
	 * @argument {Element} element
	 * @returns {Window}
	 */
	function getWindow(element) {
	  var ownerDocument = element.ownerDocument;
	  return ownerDocument ? ownerDocument.defaultView : window;
	}
	
	function attachToScrollParents(scrollParent, event, callback, scrollParents) {
	  var isBody = scrollParent.nodeName === 'BODY';
	  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
	  target.addEventListener(event, callback, { passive: true });
	
	  if (!isBody) {
	    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
	  }
	  scrollParents.push(target);
	}
	
	/**
	 * Setup needed event listeners used to update the popper position
	 * @method
	 * @memberof Popper.Utils
	 * @private
	 */
	function setupEventListeners(reference, options, state, updateBound) {
	  // Resize event listener on window
	  state.updateBound = updateBound;
	  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });
	
	  // Scroll event listener on scroll parents
	  var scrollElement = getScrollParent(reference);
	  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
	  state.scrollElement = scrollElement;
	  state.eventsEnabled = true;
	
	  return state;
	}
	
	/**
	 * It will add resize/scroll events and start recalculating
	 * position of the popper element when they are triggered.
	 * @method
	 * @memberof Popper
	 */
	function enableEventListeners() {
	  if (!this.state.eventsEnabled) {
	    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
	  }
	}
	
	/**
	 * Remove event listeners used to update the popper position
	 * @method
	 * @memberof Popper.Utils
	 * @private
	 */
	function removeEventListeners(reference, state) {
	  // Remove resize event listener on window
	  getWindow(reference).removeEventListener('resize', state.updateBound);
	
	  // Remove scroll event listener on scroll parents
	  state.scrollParents.forEach(function (target) {
	    target.removeEventListener('scroll', state.updateBound);
	  });
	
	  // Reset state
	  state.updateBound = null;
	  state.scrollParents = [];
	  state.scrollElement = null;
	  state.eventsEnabled = false;
	  return state;
	}
	
	/**
	 * It will remove resize/scroll events and won't recalculate popper position
	 * when they are triggered. It also won't trigger onUpdate callback anymore,
	 * unless you call `update` method manually.
	 * @method
	 * @memberof Popper
	 */
	function disableEventListeners() {
	  if (this.state.eventsEnabled) {
	    cancelAnimationFrame(this.scheduleUpdate);
	    this.state = removeEventListeners(this.reference, this.state);
	  }
	}
	
	/**
	 * Tells if a given input is a number
	 * @method
	 * @memberof Popper.Utils
	 * @param {*} input to check
	 * @return {Boolean}
	 */
	function isNumeric(n) {
	  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
	}
	
	/**
	 * Set the style to the given popper
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element - Element to apply the style to
	 * @argument {Object} styles
	 * Object with a list of properties and values which will be applied to the element
	 */
	function setStyles(element, styles) {
	  Object.keys(styles).forEach(function (prop) {
	    var unit = '';
	    // add unit if the value is numeric and is one of the following
	    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
	      unit = 'px';
	    }
	    element.style[prop] = styles[prop] + unit;
	  });
	}
	
	/**
	 * Set the attributes to the given popper
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element - Element to apply the attributes to
	 * @argument {Object} styles
	 * Object with a list of properties and values which will be applied to the element
	 */
	function setAttributes(element, attributes) {
	  Object.keys(attributes).forEach(function (prop) {
	    var value = attributes[prop];
	    if (value !== false) {
	      element.setAttribute(prop, attributes[prop]);
	    } else {
	      element.removeAttribute(prop);
	    }
	  });
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} data.styles - List of style properties - values to apply to popper element
	 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The same data object
	 */
	function applyStyle(data) {
	  // any property present in `data.styles` will be applied to the popper,
	  // in this way we can make the 3rd party modifiers add custom styles to it
	  // Be aware, modifiers could override the properties defined in the previous
	  // lines of this modifier!
	  setStyles(data.instance.popper, data.styles);
	
	  // any property present in `data.attributes` will be applied to the popper,
	  // they will be set as HTML attributes of the element
	  setAttributes(data.instance.popper, data.attributes);
	
	  // if arrowElement is defined and arrowStyles has some properties
	  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
	    setStyles(data.arrowElement, data.arrowStyles);
	  }
	
	  return data;
	}
	
	/**
	 * Set the x-placement attribute before everything else because it could be used
	 * to add margins to the popper margins needs to be calculated to get the
	 * correct popper offsets.
	 * @method
	 * @memberof Popper.modifiers
	 * @param {HTMLElement} reference - The reference element used to position the popper
	 * @param {HTMLElement} popper - The HTML element used as popper.
	 * @param {Object} options - Popper.js options
	 */
	function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
	  // compute reference element offsets
	  var referenceOffsets = getReferenceOffsets(state, popper, reference);
	
	  // compute auto placement, store placement inside the data object,
	  // modifiers will be able to edit `placement` if needed
	  // and refer to originalPlacement to know the original value
	  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
	
	  popper.setAttribute('x-placement', placement);
	
	  // Apply `position` to popper before anything else because
	  // without the position applied we can't guarantee correct computations
	  setStyles(popper, { position: 'absolute' });
	
	  return options;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function computeStyle(data, options) {
	  var x = options.x,
	      y = options.y;
	  var popper = data.offsets.popper;
	
	  // Remove this legacy support in Popper.js v2
	
	  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
	    return modifier.name === 'applyStyle';
	  }).gpuAcceleration;
	  if (legacyGpuAccelerationOption !== undefined) {
	    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
	  }
	  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
	
	  var offsetParent = getOffsetParent(data.instance.popper);
	  var offsetParentRect = getBoundingClientRect(offsetParent);
	
	  // Styles
	  var styles = {
	    position: popper.position
	  };
	
	  // floor sides to avoid blurry text
	  var offsets = {
	    left: Math.floor(popper.left),
	    top: Math.floor(popper.top),
	    bottom: Math.floor(popper.bottom),
	    right: Math.floor(popper.right)
	  };
	
	  var sideA = x === 'bottom' ? 'top' : 'bottom';
	  var sideB = y === 'right' ? 'left' : 'right';
	
	  // if gpuAcceleration is set to `true` and transform is supported,
	  //  we use `translate3d` to apply the position to the popper we
	  // automatically use the supported prefixed version if needed
	  var prefixedProperty = getSupportedPropertyName('transform');
	
	  // now, let's make a step back and look at this code closely (wtf?)
	  // If the content of the popper grows once it's been positioned, it
	  // may happen that the popper gets misplaced because of the new content
	  // overflowing its reference element
	  // To avoid this problem, we provide two options (x and y), which allow
	  // the consumer to define the offset origin.
	  // If we position a popper on top of a reference element, we can set
	  // `x` to `top` to make the popper grow towards its top instead of
	  // its bottom.
	  var left = void 0,
	      top = void 0;
	  if (sideA === 'bottom') {
	    top = -offsetParentRect.height + offsets.bottom;
	  } else {
	    top = offsets.top;
	  }
	  if (sideB === 'right') {
	    left = -offsetParentRect.width + offsets.right;
	  } else {
	    left = offsets.left;
	  }
	  if (gpuAcceleration && prefixedProperty) {
	    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
	    styles[sideA] = 0;
	    styles[sideB] = 0;
	    styles.willChange = 'transform';
	  } else {
	    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
	    var invertTop = sideA === 'bottom' ? -1 : 1;
	    var invertLeft = sideB === 'right' ? -1 : 1;
	    styles[sideA] = top * invertTop;
	    styles[sideB] = left * invertLeft;
	    styles.willChange = sideA + ', ' + sideB;
	  }
	
	  // Attributes
	  var attributes = {
	    'x-placement': data.placement
	  };
	
	  // Update `data` attributes, styles and arrowStyles
	  data.attributes = _extends({}, attributes, data.attributes);
	  data.styles = _extends({}, styles, data.styles);
	  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
	
	  return data;
	}
	
	/**
	 * Helper used to know if the given modifier depends from another one.<br />
	 * It checks if the needed modifier is listed and enabled.
	 * @method
	 * @memberof Popper.Utils
	 * @param {Array} modifiers - list of modifiers
	 * @param {String} requestingName - name of requesting modifier
	 * @param {String} requestedName - name of requested modifier
	 * @returns {Boolean}
	 */
	function isModifierRequired(modifiers, requestingName, requestedName) {
	  var requesting = find(modifiers, function (_ref) {
	    var name = _ref.name;
	    return name === requestingName;
	  });
	
	  var isRequired = !!requesting && modifiers.some(function (modifier) {
	    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
	  });
	
	  if (!isRequired) {
	    var _requesting = '`' + requestingName + '`';
	    var requested = '`' + requestedName + '`';
	    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
	  }
	  return isRequired;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function arrow(data, options) {
	  var _data$offsets$arrow;
	
	  // arrow depends on keepTogether in order to work
	  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
	    return data;
	  }
	
	  var arrowElement = options.element;
	
	  // if arrowElement is a string, suppose it's a CSS selector
	  if (typeof arrowElement === 'string') {
	    arrowElement = data.instance.popper.querySelector(arrowElement);
	
	    // if arrowElement is not found, don't run the modifier
	    if (!arrowElement) {
	      return data;
	    }
	  } else {
	    // if the arrowElement isn't a query selector we must check that the
	    // provided DOM node is child of its popper node
	    if (!data.instance.popper.contains(arrowElement)) {
	      console.warn('WARNING: `arrow.element` must be child of its popper element!');
	      return data;
	    }
	  }
	
	  var placement = data.placement.split('-')[0];
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var isVertical = ['left', 'right'].indexOf(placement) !== -1;
	
	  var len = isVertical ? 'height' : 'width';
	  var sideCapitalized = isVertical ? 'Top' : 'Left';
	  var side = sideCapitalized.toLowerCase();
	  var altSide = isVertical ? 'left' : 'top';
	  var opSide = isVertical ? 'bottom' : 'right';
	  var arrowElementSize = getOuterSizes(arrowElement)[len];
	
	  //
	  // extends keepTogether behavior making sure the popper and its
	  // reference have enough pixels in conjuction
	  //
	
	  // top/left side
	  if (reference[opSide] - arrowElementSize < popper[side]) {
	    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
	  }
	  // bottom/right side
	  if (reference[side] + arrowElementSize > popper[opSide]) {
	    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
	  }
	  data.offsets.popper = getClientRect(data.offsets.popper);
	
	  // compute center of the popper
	  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
	
	  // Compute the sideValue using the updated popper offsets
	  // take popper margin in account because we don't have this info available
	  var css = getStyleComputedProperty(data.instance.popper);
	  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
	  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
	  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
	
	  // prevent arrowElement from being placed not contiguously to its popper
	  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
	
	  data.arrowElement = arrowElement;
	  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
	
	  return data;
	}
	
	/**
	 * Get the opposite placement variation of the given one
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement variation
	 * @returns {String} flipped placement variation
	 */
	function getOppositeVariation(variation) {
	  if (variation === 'end') {
	    return 'start';
	  } else if (variation === 'start') {
	    return 'end';
	  }
	  return variation;
	}
	
	/**
	 * List of accepted placements to use as values of the `placement` option.<br />
	 * Valid placements are:
	 * - `auto`
	 * - `top`
	 * - `right`
	 * - `bottom`
	 * - `left`
	 *
	 * Each placement can have a variation from this list:
	 * - `-start`
	 * - `-end`
	 *
	 * Variations are interpreted easily if you think of them as the left to right
	 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
	 * is right.<br />
	 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
	 *
	 * Some valid examples are:
	 * - `top-end` (on top of reference, right aligned)
	 * - `right-start` (on right of reference, top aligned)
	 * - `bottom` (on bottom, centered)
	 * - `auto-right` (on the side with more space available, alignment depends by placement)
	 *
	 * @static
	 * @type {Array}
	 * @enum {String}
	 * @readonly
	 * @method placements
	 * @memberof Popper
	 */
	var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];
	
	// Get rid of `auto` `auto-start` and `auto-end`
	var validPlacements = placements.slice(3);
	
	/**
	 * Given an initial placement, returns all the subsequent placements
	 * clockwise (or counter-clockwise).
	 *
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement - A valid placement (it accepts variations)
	 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
	 * @returns {Array} placements including their variations
	 */
	function clockwise(placement) {
	  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  var index = validPlacements.indexOf(placement);
	  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
	  return counter ? arr.reverse() : arr;
	}
	
	var BEHAVIORS = {
	  FLIP: 'flip',
	  CLOCKWISE: 'clockwise',
	  COUNTERCLOCKWISE: 'counterclockwise'
	};
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function flip(data, options) {
	  // if `inner` modifier is enabled, we can't use the `flip` modifier
	  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
	    return data;
	  }
	
	  if (data.flipped && data.placement === data.originalPlacement) {
	    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
	    return data;
	  }
	
	  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);
	
	  var placement = data.placement.split('-')[0];
	  var placementOpposite = getOppositePlacement(placement);
	  var variation = data.placement.split('-')[1] || '';
	
	  var flipOrder = [];
	
	  switch (options.behavior) {
	    case BEHAVIORS.FLIP:
	      flipOrder = [placement, placementOpposite];
	      break;
	    case BEHAVIORS.CLOCKWISE:
	      flipOrder = clockwise(placement);
	      break;
	    case BEHAVIORS.COUNTERCLOCKWISE:
	      flipOrder = clockwise(placement, true);
	      break;
	    default:
	      flipOrder = options.behavior;
	  }
	
	  flipOrder.forEach(function (step, index) {
	    if (placement !== step || flipOrder.length === index + 1) {
	      return data;
	    }
	
	    placement = data.placement.split('-')[0];
	    placementOpposite = getOppositePlacement(placement);
	
	    var popperOffsets = data.offsets.popper;
	    var refOffsets = data.offsets.reference;
	
	    // using floor because the reference offsets may contain decimals we are not going to consider here
	    var floor = Math.floor;
	    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
	
	    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
	    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
	    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
	    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
	
	    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;
	
	    // flip the variation if required
	    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
	    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);
	
	    if (overlapsRef || overflowsBoundaries || flippedVariation) {
	      // this boolean to detect any flip loop
	      data.flipped = true;
	
	      if (overlapsRef || overflowsBoundaries) {
	        placement = flipOrder[index + 1];
	      }
	
	      if (flippedVariation) {
	        variation = getOppositeVariation(variation);
	      }
	
	      data.placement = placement + (variation ? '-' + variation : '');
	
	      // this object contains `position`, we want to preserve it along with
	      // any additional property we may add in the future
	      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
	
	      data = runModifiers(data.instance.modifiers, data, 'flip');
	    }
	  });
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function keepTogether(data) {
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var placement = data.placement.split('-')[0];
	  var floor = Math.floor;
	  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
	  var side = isVertical ? 'right' : 'bottom';
	  var opSide = isVertical ? 'left' : 'top';
	  var measurement = isVertical ? 'width' : 'height';
	
	  if (popper[side] < floor(reference[opSide])) {
	    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
	  }
	  if (popper[opSide] > floor(reference[side])) {
	    data.offsets.popper[opSide] = floor(reference[side]);
	  }
	
	  return data;
	}
	
	/**
	 * Converts a string containing value + unit into a px value number
	 * @function
	 * @memberof {modifiers~offset}
	 * @private
	 * @argument {String} str - Value + unit string
	 * @argument {String} measurement - `height` or `width`
	 * @argument {Object} popperOffsets
	 * @argument {Object} referenceOffsets
	 * @returns {Number|String}
	 * Value in pixels, or original string if no values were extracted
	 */
	function toValue(str, measurement, popperOffsets, referenceOffsets) {
	  // separate value from unit
	  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
	  var value = +split[1];
	  var unit = split[2];
	
	  // If it's not a number it's an operator, I guess
	  if (!value) {
	    return str;
	  }
	
	  if (unit.indexOf('%') === 0) {
	    var element = void 0;
	    switch (unit) {
	      case '%p':
	        element = popperOffsets;
	        break;
	      case '%':
	      case '%r':
	      default:
	        element = referenceOffsets;
	    }
	
	    var rect = getClientRect(element);
	    return rect[measurement] / 100 * value;
	  } else if (unit === 'vh' || unit === 'vw') {
	    // if is a vh or vw, we calculate the size based on the viewport
	    var size = void 0;
	    if (unit === 'vh') {
	      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
	    } else {
	      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
	    }
	    return size / 100 * value;
	  } else {
	    // if is an explicit pixel unit, we get rid of the unit and keep the value
	    // if is an implicit unit, it's px, and we return just the value
	    return value;
	  }
	}
	
	/**
	 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
	 * @function
	 * @memberof {modifiers~offset}
	 * @private
	 * @argument {String} offset
	 * @argument {Object} popperOffsets
	 * @argument {Object} referenceOffsets
	 * @argument {String} basePlacement
	 * @returns {Array} a two cells array with x and y offsets in numbers
	 */
	function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
	  var offsets = [0, 0];
	
	  // Use height if placement is left or right and index is 0 otherwise use width
	  // in this way the first offset will use an axis and the second one
	  // will use the other one
	  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;
	
	  // Split the offset string to obtain a list of values and operands
	  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
	  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
	    return frag.trim();
	  });
	
	  // Detect if the offset string contains a pair of values or a single one
	  // they could be separated by comma or space
	  var divider = fragments.indexOf(find(fragments, function (frag) {
	    return frag.search(/,|\s/) !== -1;
	  }));
	
	  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
	    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
	  }
	
	  // If divider is found, we divide the list of values and operands to divide
	  // them by ofset X and Y.
	  var splitRegex = /\s*,\s*|\s+/;
	  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
	
	  // Convert the values with units to absolute pixels to allow our computations
	  ops = ops.map(function (op, index) {
	    // Most of the units rely on the orientation of the popper
	    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
	    var mergeWithPrevious = false;
	    return op
	    // This aggregates any `+` or `-` sign that aren't considered operators
	    // e.g.: 10 + +5 => [10, +, +5]
	    .reduce(function (a, b) {
	      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
	        a[a.length - 1] = b;
	        mergeWithPrevious = true;
	        return a;
	      } else if (mergeWithPrevious) {
	        a[a.length - 1] += b;
	        mergeWithPrevious = false;
	        return a;
	      } else {
	        return a.concat(b);
	      }
	    }, [])
	    // Here we convert the string values into number values (in px)
	    .map(function (str) {
	      return toValue(str, measurement, popperOffsets, referenceOffsets);
	    });
	  });
	
	  // Loop trough the offsets arrays and execute the operations
	  ops.forEach(function (op, index) {
	    op.forEach(function (frag, index2) {
	      if (isNumeric(frag)) {
	        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
	      }
	    });
	  });
	  return offsets;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @argument {Number|String} options.offset=0
	 * The offset value as described in the modifier description
	 * @returns {Object} The data object, properly modified
	 */
	function offset(data, _ref) {
	  var offset = _ref.offset;
	  var placement = data.placement,
	      _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var basePlacement = placement.split('-')[0];
	
	  var offsets = void 0;
	  if (isNumeric(+offset)) {
	    offsets = [+offset, 0];
	  } else {
	    offsets = parseOffset(offset, popper, reference, basePlacement);
	  }
	
	  if (basePlacement === 'left') {
	    popper.top += offsets[0];
	    popper.left -= offsets[1];
	  } else if (basePlacement === 'right') {
	    popper.top += offsets[0];
	    popper.left += offsets[1];
	  } else if (basePlacement === 'top') {
	    popper.left += offsets[0];
	    popper.top -= offsets[1];
	  } else if (basePlacement === 'bottom') {
	    popper.left += offsets[0];
	    popper.top += offsets[1];
	  }
	
	  data.popper = popper;
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function preventOverflow(data, options) {
	  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
	
	  // If offsetParent is the reference element, we really want to
	  // go one step up and use the next offsetParent as reference to
	  // avoid to make this modifier completely useless and look like broken
	  if (data.instance.reference === boundariesElement) {
	    boundariesElement = getOffsetParent(boundariesElement);
	  }
	
	  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);
	  options.boundaries = boundaries;
	
	  var order = options.priority;
	  var popper = data.offsets.popper;
	
	  var check = {
	    primary: function primary(placement) {
	      var value = popper[placement];
	      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
	        value = Math.max(popper[placement], boundaries[placement]);
	      }
	      return defineProperty({}, placement, value);
	    },
	    secondary: function secondary(placement) {
	      var mainSide = placement === 'right' ? 'left' : 'top';
	      var value = popper[mainSide];
	      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
	        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
	      }
	      return defineProperty({}, mainSide, value);
	    }
	  };
	
	  order.forEach(function (placement) {
	    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
	    popper = _extends({}, popper, check[side](placement));
	  });
	
	  data.offsets.popper = popper;
	
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function shift(data) {
	  var placement = data.placement;
	  var basePlacement = placement.split('-')[0];
	  var shiftvariation = placement.split('-')[1];
	
	  // if shift shiftvariation is specified, run the modifier
	  if (shiftvariation) {
	    var _data$offsets = data.offsets,
	        reference = _data$offsets.reference,
	        popper = _data$offsets.popper;
	
	    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
	    var side = isVertical ? 'left' : 'top';
	    var measurement = isVertical ? 'width' : 'height';
	
	    var shiftOffsets = {
	      start: defineProperty({}, side, reference[side]),
	      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
	    };
	
	    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
	  }
	
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function hide(data) {
	  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
	    return data;
	  }
	
	  var refRect = data.offsets.reference;
	  var bound = find(data.instance.modifiers, function (modifier) {
	    return modifier.name === 'preventOverflow';
	  }).boundaries;
	
	  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
	    // Avoid unnecessary DOM access if visibility hasn't changed
	    if (data.hide === true) {
	      return data;
	    }
	
	    data.hide = true;
	    data.attributes['x-out-of-boundaries'] = '';
	  } else {
	    // Avoid unnecessary DOM access if visibility hasn't changed
	    if (data.hide === false) {
	      return data;
	    }
	
	    data.hide = false;
	    data.attributes['x-out-of-boundaries'] = false;
	  }
	
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function inner(data) {
	  var placement = data.placement;
	  var basePlacement = placement.split('-')[0];
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
	
	  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
	
	  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
	
	  data.placement = getOppositePlacement(placement);
	  data.offsets.popper = getClientRect(popper);
	
	  return data;
	}
	
	/**
	 * Modifier function, each modifier can have a function of this type assigned
	 * to its `fn` property.<br />
	 * These functions will be called on each update, this means that you must
	 * make sure they are performant enough to avoid performance bottlenecks.
	 *
	 * @function ModifierFn
	 * @argument {dataObject} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {dataObject} The data object, properly modified
	 */
	
	/**
	 * Modifiers are plugins used to alter the behavior of your poppers.<br />
	 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
	 * needed by the library.
	 *
	 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
	 * All the other properties are configurations that could be tweaked.
	 * @namespace modifiers
	 */
	var modifiers = {
	  /**
	   * Modifier used to shift the popper on the start or end of its reference
	   * element.<br />
	   * It will read the variation of the `placement` property.<br />
	   * It can be one either `-end` or `-start`.
	   * @memberof modifiers
	   * @inner
	   */
	  shift: {
	    /** @prop {number} order=100 - Index used to define the order of execution */
	    order: 100,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: shift
	  },
	
	  /**
	   * The `offset` modifier can shift your popper on both its axis.
	   *
	   * It accepts the following units:
	   * - `px` or unitless, interpreted as pixels
	   * - `%` or `%r`, percentage relative to the length of the reference element
	   * - `%p`, percentage relative to the length of the popper element
	   * - `vw`, CSS viewport width unit
	   * - `vh`, CSS viewport height unit
	   *
	   * For length is intended the main axis relative to the placement of the popper.<br />
	   * This means that if the placement is `top` or `bottom`, the length will be the
	   * `width`. In case of `left` or `right`, it will be the height.
	   *
	   * You can provide a single value (as `Number` or `String`), or a pair of values
	   * as `String` divided by a comma or one (or more) white spaces.<br />
	   * The latter is a deprecated method because it leads to confusion and will be
	   * removed in v2.<br />
	   * Additionally, it accepts additions and subtractions between different units.
	   * Note that multiplications and divisions aren't supported.
	   *
	   * Valid examples are:
	   * ```
	   * 10
	   * '10%'
	   * '10, 10'
	   * '10%, 10'
	   * '10 + 10%'
	   * '10 - 5vh + 3%'
	   * '-10px + 5vh, 5px - 6%'
	   * ```
	   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
	   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
	   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  offset: {
	    /** @prop {number} order=200 - Index used to define the order of execution */
	    order: 200,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: offset,
	    /** @prop {Number|String} offset=0
	     * The offset value as described in the modifier description
	     */
	    offset: 0
	  },
	
	  /**
	   * Modifier used to prevent the popper from being positioned outside the boundary.
	   *
	   * An scenario exists where the reference itself is not within the boundaries.<br />
	   * We can say it has "escaped the boundaries" — or just "escaped".<br />
	   * In this case we need to decide whether the popper should either:
	   *
	   * - detach from the reference and remain "trapped" in the boundaries, or
	   * - if it should ignore the boundary and "escape with its reference"
	   *
	   * When `escapeWithReference` is set to`true` and reference is completely
	   * outside its boundaries, the popper will overflow (or completely leave)
	   * the boundaries in order to remain attached to the edge of the reference.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  preventOverflow: {
	    /** @prop {number} order=300 - Index used to define the order of execution */
	    order: 300,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: preventOverflow,
	    /**
	     * @prop {Array} [priority=['left','right','top','bottom']]
	     * Popper will try to prevent overflow following these priorities by default,
	     * then, it could overflow on the left and on top of the `boundariesElement`
	     */
	    priority: ['left', 'right', 'top', 'bottom'],
	    /**
	     * @prop {number} padding=5
	     * Amount of pixel used to define a minimum distance between the boundaries
	     * and the popper this makes sure the popper has always a little padding
	     * between the edges of its container
	     */
	    padding: 5,
	    /**
	     * @prop {String|HTMLElement} boundariesElement='scrollParent'
	     * Boundaries used by the modifier, can be `scrollParent`, `window`,
	     * `viewport` or any DOM element.
	     */
	    boundariesElement: 'scrollParent'
	  },
	
	  /**
	   * Modifier used to make sure the reference and its popper stay near eachothers
	   * without leaving any gap between the two. Expecially useful when the arrow is
	   * enabled and you want to assure it to point to its reference element.
	   * It cares only about the first axis, you can still have poppers with margin
	   * between the popper and its reference element.
	   * @memberof modifiers
	   * @inner
	   */
	  keepTogether: {
	    /** @prop {number} order=400 - Index used to define the order of execution */
	    order: 400,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: keepTogether
	  },
	
	  /**
	   * This modifier is used to move the `arrowElement` of the popper to make
	   * sure it is positioned between the reference element and its popper element.
	   * It will read the outer size of the `arrowElement` node to detect how many
	   * pixels of conjuction are needed.
	   *
	   * It has no effect if no `arrowElement` is provided.
	   * @memberof modifiers
	   * @inner
	   */
	  arrow: {
	    /** @prop {number} order=500 - Index used to define the order of execution */
	    order: 500,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: arrow,
	    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
	    element: '[x-arrow]'
	  },
	
	  /**
	   * Modifier used to flip the popper's placement when it starts to overlap its
	   * reference element.
	   *
	   * Requires the `preventOverflow` modifier before it in order to work.
	   *
	   * **NOTE:** this modifier will interrupt the current update cycle and will
	   * restart it if it detects the need to flip the placement.
	   * @memberof modifiers
	   * @inner
	   */
	  flip: {
	    /** @prop {number} order=600 - Index used to define the order of execution */
	    order: 600,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: flip,
	    /**
	     * @prop {String|Array} behavior='flip'
	     * The behavior used to change the popper's placement. It can be one of
	     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
	     * placements (with optional variations).
	     */
	    behavior: 'flip',
	    /**
	     * @prop {number} padding=5
	     * The popper will flip if it hits the edges of the `boundariesElement`
	     */
	    padding: 5,
	    /**
	     * @prop {String|HTMLElement} boundariesElement='viewport'
	     * The element which will define the boundaries of the popper position,
	     * the popper will never be placed outside of the defined boundaries
	     * (except if keepTogether is enabled)
	     */
	    boundariesElement: 'viewport'
	  },
	
	  /**
	   * Modifier used to make the popper flow toward the inner of the reference element.
	   * By default, when this modifier is disabled, the popper will be placed outside
	   * the reference element.
	   * @memberof modifiers
	   * @inner
	   */
	  inner: {
	    /** @prop {number} order=700 - Index used to define the order of execution */
	    order: 700,
	    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
	    enabled: false,
	    /** @prop {ModifierFn} */
	    fn: inner
	  },
	
	  /**
	   * Modifier used to hide the popper when its reference element is outside of the
	   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
	   * be used to hide with a CSS selector the popper when its reference is
	   * out of boundaries.
	   *
	   * Requires the `preventOverflow` modifier before it in order to work.
	   * @memberof modifiers
	   * @inner
	   */
	  hide: {
	    /** @prop {number} order=800 - Index used to define the order of execution */
	    order: 800,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: hide
	  },
	
	  /**
	   * Computes the style that will be applied to the popper element to gets
	   * properly positioned.
	   *
	   * Note that this modifier will not touch the DOM, it just prepares the styles
	   * so that `applyStyle` modifier can apply it. This separation is useful
	   * in case you need to replace `applyStyle` with a custom implementation.
	   *
	   * This modifier has `850` as `order` value to maintain backward compatibility
	   * with previous versions of Popper.js. Expect the modifiers ordering method
	   * to change in future major versions of the library.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  computeStyle: {
	    /** @prop {number} order=850 - Index used to define the order of execution */
	    order: 850,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: computeStyle,
	    /**
	     * @prop {Boolean} gpuAcceleration=true
	     * If true, it uses the CSS 3d transformation to position the popper.
	     * Otherwise, it will use the `top` and `left` properties.
	     */
	    gpuAcceleration: true,
	    /**
	     * @prop {string} [x='bottom']
	     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
	     * Change this if your popper should grow in a direction different from `bottom`
	     */
	    x: 'bottom',
	    /**
	     * @prop {string} [x='left']
	     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
	     * Change this if your popper should grow in a direction different from `right`
	     */
	    y: 'right'
	  },
	
	  /**
	   * Applies the computed styles to the popper element.
	   *
	   * All the DOM manipulations are limited to this modifier. This is useful in case
	   * you want to integrate Popper.js inside a framework or view library and you
	   * want to delegate all the DOM manipulations to it.
	   *
	   * Note that if you disable this modifier, you must make sure the popper element
	   * has its position set to `absolute` before Popper.js can do its work!
	   *
	   * Just disable this modifier and define you own to achieve the desired effect.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  applyStyle: {
	    /** @prop {number} order=900 - Index used to define the order of execution */
	    order: 900,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: applyStyle,
	    /** @prop {Function} */
	    onLoad: applyStyleOnLoad,
	    /**
	     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
	     * @prop {Boolean} gpuAcceleration=true
	     * If true, it uses the CSS 3d transformation to position the popper.
	     * Otherwise, it will use the `top` and `left` properties.
	     */
	    gpuAcceleration: undefined
	  }
	};
	
	/**
	 * The `dataObject` is an object containing all the informations used by Popper.js
	 * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
	 * @name dataObject
	 * @property {Object} data.instance The Popper.js instance
	 * @property {String} data.placement Placement applied to popper
	 * @property {String} data.originalPlacement Placement originally defined on init
	 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
	 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.
	 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
	 * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)
	 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)
	 * @property {Object} data.boundaries Offsets of the popper boundaries
	 * @property {Object} data.offsets The measurements of popper, reference and arrow elements.
	 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
	 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
	 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
	 */
	
	/**
	 * Default options provided to Popper.js constructor.<br />
	 * These can be overriden using the `options` argument of Popper.js.<br />
	 * To override an option, simply pass as 3rd argument an object with the same
	 * structure of this object, example:
	 * ```
	 * new Popper(ref, pop, {
	 *   modifiers: {
	 *     preventOverflow: { enabled: false }
	 *   }
	 * })
	 * ```
	 * @type {Object}
	 * @static
	 * @memberof Popper
	 */
	var Defaults = {
	  /**
	   * Popper's placement
	   * @prop {Popper.placements} placement='bottom'
	   */
	  placement: 'bottom',
	
	  /**
	   * Whether events (resize, scroll) are initially enabled
	   * @prop {Boolean} eventsEnabled=true
	   */
	  eventsEnabled: true,
	
	  /**
	   * Set to true if you want to automatically remove the popper when
	   * you call the `destroy` method.
	   * @prop {Boolean} removeOnDestroy=false
	   */
	  removeOnDestroy: false,
	
	  /**
	   * Callback called when the popper is created.<br />
	   * By default, is set to no-op.<br />
	   * Access Popper.js instance with `data.instance`.
	   * @prop {onCreate}
	   */
	  onCreate: function onCreate() {},
	
	  /**
	   * Callback called when the popper is updated, this callback is not called
	   * on the initialization/creation of the popper, but only on subsequent
	   * updates.<br />
	   * By default, is set to no-op.<br />
	   * Access Popper.js instance with `data.instance`.
	   * @prop {onUpdate}
	   */
	  onUpdate: function onUpdate() {},
	
	  /**
	   * List of modifiers used to modify the offsets before they are applied to the popper.
	   * They provide most of the functionalities of Popper.js
	   * @prop {modifiers}
	   */
	  modifiers: modifiers
	};
	
	/**
	 * @callback onCreate
	 * @param {dataObject} data
	 */
	
	/**
	 * @callback onUpdate
	 * @param {dataObject} data
	 */
	
	// Utils
	// Methods
	var Popper = function () {
	  /**
	   * Create a new Popper.js instance
	   * @class Popper
	   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
	   * @param {HTMLElement} popper - The HTML element used as popper.
	   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
	   * @return {Object} instance - The generated Popper.js instance
	   */
	  function Popper(reference, popper) {
	    var _this = this;
	
	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	    classCallCheck(this, Popper);
	
	    this.scheduleUpdate = function () {
	      return requestAnimationFrame(_this.update);
	    };
	
	    // make update() debounced, so that it only runs at most once-per-tick
	    this.update = debounce(this.update.bind(this));
	
	    // with {} we create a new object with the options inside it
	    this.options = _extends({}, Popper.Defaults, options);
	
	    // init state
	    this.state = {
	      isDestroyed: false,
	      isCreated: false,
	      scrollParents: []
	    };
	
	    // get reference and popper elements (allow jQuery wrappers)
	    this.reference = reference && reference.jquery ? reference[0] : reference;
	    this.popper = popper && popper.jquery ? popper[0] : popper;
	
	    // Deep merge modifiers options
	    this.options.modifiers = {};
	    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
	      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
	    });
	
	    // Refactoring modifiers' list (Object => Array)
	    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
	      return _extends({
	        name: name
	      }, _this.options.modifiers[name]);
	    })
	    // sort the modifiers by order
	    .sort(function (a, b) {
	      return a.order - b.order;
	    });
	
	    // modifiers have the ability to execute arbitrary code when Popper.js get inited
	    // such code is executed in the same order of its modifier
	    // they could add new properties to their options configuration
	    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
	    this.modifiers.forEach(function (modifierOptions) {
	      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
	        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
	      }
	    });
	
	    // fire the first update to position the popper in the right place
	    this.update();
	
	    var eventsEnabled = this.options.eventsEnabled;
	    if (eventsEnabled) {
	      // setup event listeners, they will take care of update the position in specific situations
	      this.enableEventListeners();
	    }
	
	    this.state.eventsEnabled = eventsEnabled;
	  }
	
	  // We can't use class properties because they don't get listed in the
	  // class prototype and break stuff like Sinon stubs
	
	
	  createClass(Popper, [{
	    key: 'update',
	    value: function update$$1() {
	      return update.call(this);
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy$$1() {
	      return destroy.call(this);
	    }
	  }, {
	    key: 'enableEventListeners',
	    value: function enableEventListeners$$1() {
	      return enableEventListeners.call(this);
	    }
	  }, {
	    key: 'disableEventListeners',
	    value: function disableEventListeners$$1() {
	      return disableEventListeners.call(this);
	    }
	
	    /**
	     * Schedule an update, it will run on the next UI update available
	     * @method scheduleUpdate
	     * @memberof Popper
	     */
	
	
	    /**
	     * Collection of utilities useful when writing custom modifiers.
	     * Starting from version 1.7, this method is available only if you
	     * include `popper-utils.js` before `popper.js`.
	     *
	     * **DEPRECATION**: This way to access PopperUtils is deprecated
	     * and will be removed in v2! Use the PopperUtils module directly instead.
	     * Due to the high instability of the methods contained in Utils, we can't
	     * guarantee them to follow semver. Use them at your own risk!
	     * @static
	     * @private
	     * @type {Object}
	     * @deprecated since version 1.8
	     * @member Utils
	     * @memberof Popper
	     */
	
	  }]);
	  return Popper;
	}();
	
	/**
	 * The `referenceObject` is an object that provides an interface compatible with Popper.js
	 * and lets you use it as replacement of a real DOM node.<br />
	 * You can use this method to position a popper relatively to a set of coordinates
	 * in case you don't have a DOM node to use as reference.
	 *
	 * ```
	 * new Popper(referenceObject, popperNode);
	 * ```
	 *
	 * NB: This feature isn't supported in Internet Explorer 10
	 * @name referenceObject
	 * @property {Function} data.getBoundingClientRect
	 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
	 * @property {number} data.clientWidth
	 * An ES6 getter that will return the width of the virtual reference element.
	 * @property {number} data.clientHeight
	 * An ES6 getter that will return the height of the virtual reference element.
	 */
	
	
	Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
	Popper.placements = placements;
	Popper.Defaults = Defaults;
	
	return Popper;
	
	})));
	//# sourceMappingURL=popper.js.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var linearscalemodel = __webpack_require__(52);
	
	var LogScaleModel = linearscalemodel.LinearScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(linearscalemodel.LinearScaleModel.prototype.defaults(), {
	            _model_name: "LogScaleModel",
	            _view_name: "LogScale",
	            domain: []
	        });
	    },
	
	    initialize: function() {
	        LogScaleModel.__super__.initialize.apply(this, arguments);
	    },
	
	    set_init_state: function() {
	        this.type = "log";
	        this.global_min = Number.MIN_VALUE;
	        this.global_max = Number.POSITIVE_INFINITY;
	    }
	
	});
	
	module.exports = {
	    LogScaleModel: LogScaleModel
	};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var d3 = __webpack_require__(8);
	
	var SquareMarketMap = widgets.DOMWidgetView.extend({
	
	    render: function() {
	        this.width = this.model.get("width");
	        this.height = this.model.get("height");
	        this.margin = this.model.get('margin');
	
	        this.el.style["width"] = this.width + this.margin.left + this.margin.right;
	        this.el.style["height"] = this.height + this.margin.top + this.margin.bottom;
	
	        var sector_data = this.model.get('data');
	        this.colors = this.model.get('colors');
	        this.mode = this.model.get('mode');
	
	        var color= d3.scale.category10();
	        var that = this;
	        this.d3el.append("div")
	            .style("position", "relative")
	            .style("width", (this.width + this.margin.left + this.margin.right) + "px")
	            .style("height", (this.height + this.margin.top + this.margin.bottom) + "px")
	            .style("left", this.margin.left + "px")
	            .style("top", this.margin.top + "px");
	
	        this.margin = this.model.get("margin");
	
	        this.tree_map = d3.layout.treemap()
	            .size([this.width, this.height])
	            .sticky(true)
	            .padding(null)
	            .mode(this.mode)
	            .value(function(d) {return d.size;});
	
	        var element = this.d3el.datum(sector_data).selectAll(".node")
	            .data(this.tree_map.nodes)
	            .enter().append("div")
	            .attr("class", "node")
	            .call(this.position)
	            .style({
	                "background": function(d, i) {
	                    return d.children ? color(d.name): null;
	                },
	                "border": "solid white"
	            })
	            .text(function(d) { return d.children ? null : d.name; })
	            .style({
	                'font': '11px sans-serif',
	                'position': 'absolute',
	                'text-align': 'center',
	                'overflow': 'hidden',
	                'color': 'white',
	            });
	    },
	
	    position: function(){
	        this.style("left", function(d) { return d.x + "px"; })
	            .style("top", function(d) { return d.y + "px"; })
	            .style("width", function(d) {
	                return Math.max(0, d.dx - 1) + "px";
	            })
	            .style("height", function(d) {
	                return Math.max(0, d.dy - 1) + "px";
	            });
	    }
	});
	
	module.exports = {
	    SquareMarketMap: SquareMarketMap
	};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var basemodel = __webpack_require__(13);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var FigureModel = basemodel.BaseModel.extend({
	
	    defaults: function() {
	        return _.extend(basemodel.BaseModel.prototype.defaults(), {
	            _model_name: "FigureModel",
	            _view_name: "Figure",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	
	            title: "",
	            axes: [],
	            marks: [],
	            interaction: null,
	            scale_x: undefined,
	            scale_y: undefined,
	            fig_color: null,
	            title_style: {},
	            background_style: {},
	            legend_style: {},
	            legend_text: {},
	
	            preserve_aspect: false,
	            min_aspect_ratio: 0,
	            max_aspect_ratio: 100,
	
	            fig_margin: {
	                top: 60,
	                bottom: 60,
	                left: 60,
	                right: 60
	            },
	
	            padding_x: 0.0,
	            padding_y: 0.025,
	            legend_location: "top-right",
	            animation_duration: 0
	        });
	    },
	
	    initialize: function() {
	        FigureModel.__super__.initialize.apply(this, arguments);
	        this.on("msg:custom", this.handle_custom_messages, this);
	    },
	
	    handle_custom_messages: function(msg) {
	        if (msg.type === 'save_png') {
	            this.trigger("save_png", msg.filename);
	        }
	        else if (msg.type === 'save_svg') {
	            this.trigger("save_svg", msg.filename);
	        }
	    },
	
	    save_png: function() {
	        // TODO: Any view of this Figure model will pick up this event
	        // and render a png. Remove this eventually.
	        this.trigger("save_png");
	    }
	}, {
	    serializers: _.extend({
	        marks: { deserialize: widgets.unpack_models },
	        axes:  { deserialize: widgets.unpack_models },
	        interaction: { deserialize: widgets.unpack_models },
	        scale_x: { deserialize: widgets.unpack_models },
	        scale_y: { deserialize: widgets.unpack_models },
	        layout:  { deserialize: widgets.unpack_models },
	    }, basemodel.BaseModel.serializers)
	});
	
	module.exports = {
	    FigureModel: FigureModel
	};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var mark = __webpack_require__(15);
	var utils = __webpack_require__(10);
	
	var Map = mark.Mark.extend({
	
	    render: function() {
	        var base_render_promise = Map.__super__.render.apply(this);
	        this.map = this.d3el.append("svg")
	            .attr("viewBox", "0 0 1200 980");
	        this.width = this.parent.plotarea_width;
	        this.height = this.parent.plotarea_height;
	        this.map_id = widgets.uuid();
	        this.enable_hover = this.model.get("enable_hover");
	        this.display_el_classes = ["event_layer"];
	        var that = this;
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	        return base_render_promise.then(function() {
	            that.event_listeners = {};
	            that.process_interactions();
	            that.create_listeners();
	            that.draw();
	        });
	    },
	
	    set_ranges: function() {
	    },
	
	    set_positional_scales: function() {
	        var geo_scale = this.scales.projection;
	        this.listenTo(geo_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	    },
	
	    initialize_additional_scales: function() {
	        var color_scale = this.scales.color;
	        if(color_scale) {
	            this.listenTo(color_scale, "domain_changed", function() {
	                this.update_style();
	            });
	            color_scale.on("color_scale_range_changed",
	                           this.update_style, this);
	        }
	    },
	
	    remove_map: function() {
	        d3.selectAll(".world_map.map" + this.map_id).remove();
	    },
	
	    draw: function() {
	        this.set_ranges();
	        var that = this;
	        this.remove_map();
	        this.transformed_g = this.map.append("g")
	            .attr("class", "world_map map" + this.map_id);
	        this.fill_g = this.transformed_g.append("g");
	        this.highlight_g = this.transformed_g.append("g");
	        this.stroke_g = this.transformed_g.append("g");
	        var projection = this.scales.projection;
	        //Bind data and create one path per GeoJSON feature
	        this.fill_g.selectAll("path")
	            .data(that.model.geodata)
	            .enter()
	            .append("path")
	            .attr("d", projection.path)
	            .style("fill", function(d, i) {
	                return that.fill_g_colorfill(d, i);
	            });
	        this.stroke_g.selectAll("path")
	            .data(that.model.geodata)
	            .enter()
	            .append("path")
	            .attr("class", "event_layer")
	            .attr("d", projection.path)
	            .style("fill-opacity", 0.0)
	            .on("click", function(d, i) {
	                return that.event_dispatcher("element_clicked", {"data": d, "index": i});
	            });
	        if(this.validate_color(this.model.get("stroke_color"))) {
	            this.stroke_g.selectAll("path")
	                .style("stroke", this.model.get("stroke_color"));
	        }
	        this.zoom = d3.behavior.zoom()
	            .scaleExtent([1, 8])
	            .on("zoom", function() {
	               that.zoomed(that, false);
	            });
	        this.parent.bg.call(this.zoom);
	
	        this.parent.bg.on("dblclick.zoom", null);
	        this.parent.bg.on("dblclick", function() {
	            that.zoomed(that, true);
	        });
	    },
	
	    validate_color: function(color) {
	        return color !== "";
	    },
	
	    mouseover_handler: function() {
	        if (!this.model.get("hover_highlight")) {
	            return;
	        }
	        var el = d3.select(d3.event.target);
	        if(this.is_hover_element(el)) {
	            var data = el.data()[0];
	            var idx = this.model.get("selected");
	            var select = idx ? utils.deepCopy(idx) : [];
	            var node = this.highlight_g.append(function() {
	                return el.node().cloneNode(true);
	            });
	            node.classed("hovered", true);
	            node.classed("event_layer", false);
	
	            if(this.validate_color(this.model.get("hovered_styles").hovered_stroke) &&
	                select.indexOf(data.id) === -1) {
	                node.style("stroke", this.model.get("hovered_styles").hovered_stroke)
	                    .style("stroke-width", this.model.get("hovered_styles").hovered_stroke_width);
	            }
	            var that = this;
	            if(this.validate_color(this.model.get("hovered_styles").hovered_fill) &&
	                select.indexOf(data.id) === -1) {
	                node.style("fill-opacity", 1.0)
	                    .style("fill", function() {
	                        return that.model.get("hovered_styles").hovered_fill;
	                    });
	            }
	        }
	    },
	
	    mouseout_handler: function() {
	        if (!this.model.get("hover_highlight")) {
	            return;
	        }
	        var el = d3.select(d3.event.target);
	        if(this.is_hover_element(el)) {
	            var that = this;
	            el.transition("mouseout_handler")
	            .style("fill", function(d, i) {
	                return that.fill_g_colorfill(d, i);
	            })
	            .style("stroke", function(d, i) {
	                return that.hoverfill(d, i);
	            });
	            that.highlight_g.selectAll(".hovered").remove();
	        }
	    },
	
	    click_handler: function() {
	        var el = d3.select(d3.event.target);
	        if(this.is_hover_element(el)) {
	            var data = el.data()[0];
	            var idx = this.model.get("selected");
	            var selected = idx ? utils.deepCopy(idx) : [];
	            var elem_index = selected.indexOf(data.id);
	            if(elem_index > -1) {
	                selected.splice(elem_index, 1);
	                el.transition("click_handler")
	                    .style("fill-opacity", 0.0);
	                this.highlight_g.selectAll(".hovered").remove();
	                var choice = "#c".concat(data.id.toString());
	                d3.select(choice).remove();
	            } else {
	                this.highlight_g.selectAll(".hovered").remove();
	                this.highlight_g.append(function() {
	                    return el.node().cloneNode(true);
	                })
	                .attr("id", "c" + data.id)
	                .classed("selected", true)
	                .classed("event_layer", false);
	
	                if (this.validate_color(this.model.get("selected_styles").selected_fill)) {
	                    this.highlight_g.selectAll(".selected")
	                        .style("fill-opacity", 1.0)
	                        .style("fill", this.model.get("selected_styles").selected_fill);
	                }
	
	                if (this.validate_color(this.model.get("selected_styles").selected_stroke)) {
	                    this.highlight_g.selectAll(".selected")
	                        .style("stroke", this.model.get("selected_styles").selected_stroke)
	                        .style("stroke-width", this.model.get("selected_styles").selected_stroke_width);
	                }
	                selected.push(data.id);
	                this.model.set("selected", selected);
	                this.touch();
	            }
	        this.model.set("selected",
	            ((selected.length === 0) ? null : selected),
	            {updated_view: this});
	        this.touch();
	        }
	    },
	
	    zoomed: function(that, reset) {
	        var t = reset ? [0, 0] : d3.event.translate;
	        var s = reset ? 1 : d3.event.scale;
	        var h = that.height / 3;
	        var w = reset ? that.width : 2 * that.width;
	
	        t[0] = Math.min(that.width / 2 * (s - 1), Math.max(w / 2 * (1 - s), t[0]));
	        t[1] = Math.min(that.height / 2 * (s - 1) + this.height * s, Math.max(h / 2 * (1 - s) - that.width * s, t[1]));
	
	        that.zoom.translate(t);
	        if (reset) {
	            that.zoom.scale(s);
	        }
	        that.transformed_g.style("stroke-width", 1 / s)
	            .attr("transform", "translate(" + t + ")scale(" + s + ")");
	    },
	
	    create_listeners: function() {
	        var that = this;
	        this.d3el.on("mouseover", _.bind(function() { this.event_dispatcher("mouse_over"); }, this))
	            .on("mousemove", _.bind(function() { this.event_dispatcher("mouse_move"); }, this))
	            .on("mouseout", _.bind(function() { this.event_dispatcher("mouse_out"); }, this));
	
	        this.listenTo(this.model, "data_updated", this.draw, this);
	        this.listenTo(this.model, "change:color", this.update_style, this);
	        this.listenTo(this.model, "change:stroke_color", this.change_stroke_color, this);
	        this.listenTo(this.model, "change:colors", this.change_map_color, this);
	        this.listenTo(this.model, "change:selected", this.change_selected, this);
	        this.listenTo(this.model, "change:selected_styles", function() {
	            that.change_selected_fill();
	            that.change_selected_stroke();
	        });
	        this.listenTo(this.model, "change:interactions", this.process_interactions);
	        this.listenTo(this.parent, "bg_clicked", function() {
	            this.event_dispatcher("parent_clicked");
	        });
	    },
	
	    process_interactions: function() {
	        var interactions = this.model.get("interactions");
	        if(_.isEmpty(interactions)) {
	            //set all the event listeners to blank functions
	            this.reset_interactions();
	        }
	        else {
	            if(interactions.click !== undefined &&
	               interactions.click !== null) {
	                if(interactions.click === "tooltip") {
	                    this.event_listeners.element_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                } else if (interactions.click === "select") {
	                    this.event_listeners.parent_clicked = this.reset_selection;
	                    this.event_listeners.element_clicked = this.click_handler;
	                }
	            } else {
	                this.reset_click();
	            }
	            if(interactions.hover !== undefined &&
	              interactions.hover !== null) {
	                if(interactions.hover === "tooltip") {
	                    this.event_listeners.mouse_over = function() {
	                        this.mouseover_handler();
	                        return this.refresh_tooltip();
	                    };
	                    this.event_listeners.mouse_move = this.move_tooltip;
	                    this.event_listeners.mouse_out = function() {
	                        this.mouseout_handler();
	                        return this.hide_tooltip();
	                    };
	                }
	            } else {
	                this.reset_hover();
	            }
	            if(interactions.legend_click !== undefined &&
	              interactions.legend_click !== null) {
	                if(interactions.legend_click === "tooltip") {
	                    this.event_listeners.legend_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                }
	            } else {
	                this.event_listeners.legend_clicked = function() {};
	            }
	        }
	    },
	
	    change_selected_fill: function() {
	        if (!this.validate_color(this.model.get("selected_styles").selected_fill)) {
	            this.highlight_g.selectAll(".selected")
	                .style("fill-opacity", 0.0);
	        } else {
	            this.highlight_g.selectAll(".selected")
	                .style("fill-opacity", 1.0)
	                .style("fill", this.model.get("selected_styles").selected_fill);
	        }
	    },
	
	    change_selected_stroke: function() {
	        if (!this.validate_color(this.model.get("selected_styles").selected_stroke)) {
	            this.highlight_g.selectAll(".selected")
	                .style("stroke-width", 0.0);
	        } else {
	            this.highlight_g.selectAll(".selected")
	                .style("stroke-width", this.model.get("selected_styles").selected_stroke_width)
	                .style("stroke", this.model.get("selected_styles").selected_stroke);
	        }
	    },
	
	    change_selected: function() {
	        this.highlight_g.selectAll("path").remove();
	        var that = this;
	        var idx = this.model.get("selected");
	        var select = idx ? idx : [];
	        var temp = this.stroke_g.selectAll("path").data();
	        this.stroke_g.selectAll("path").style("stroke", function(d, i) {
	            return that.hoverfill(d, i);
	        });
	        var nodes = this.stroke_g.selectAll("path");
	        for (var i=0; i<temp.length; i++) {
	            if(select.indexOf(temp[i].id) > -1) {
	                that.highlight_g.append(function() {
	                    return nodes[0][i].cloneNode(true);
	                }).attr("id", temp[i].id)
	                .style("fill-opacity", function() {
	                    if (that.validate_color(that.model.get("selected_styles").selected_fill)) {
	                        return 1.0;
	                    } else {
	                        return 0.0;
	                    }
	                })
	                .style("fill", that.model.get("selected_styles").selected_fill)
	                .style("stroke-opacity", function() {
	                    if (that.validate_color(that.model.get("selected_styles").selected_stroke)) {
	                        return 1.0;
	                    } else {
	                        return 0.0;
	                    }
	                })
	                .style("stroke", that.model.get("selected_styles").selected_stroke)
	                .style("stroke-width", that.model.get("selected_styles").selected_stroke_width)
	                .classed("selected", true);
	            }
	        }
	    },
	
	    reset_selection: function() {
	        this.model.set("selected", []);
	        this.touch();
	        this.highlight_g.selectAll(".selected").remove();
	        d3.select(this.d3el.parentNode)
	            .selectAll("path")
	            .classed("selected", false);
	        d3.select(this.d3el.parentNode)
	            .selectAll("path")
	            .classed("hovered", false);
	
	        var that = this;
	        this.stroke_g.selectAll("path").style("stroke", function(d, i) {
	            return that.hoverfill(d, i);
	        });
	        this.fill_g.selectAll("path").classed("selected", false)
	            .style("fill", function(d, i) {
	                return that.fill_g_colorfill(d, i);
	            });
	    },
	
	    change_stroke_color: function() {
	        this.stroke_g.selectAll("path")
	            .style("stroke", this.model.get("stroke_color"));
	    },
	
	    change_map_color: function() {
		var that = this;
	        if (!this.is_object_empty(this.model.get("color"))) {
	            return;
	        }
	        this.fill_g.selectAll("path").style("fill", function(d, i) {
	            return that.fill_g_colorfill(d, i)
	        });
	    },
	
	    update_style: function() {
	        var color_data = this.model.get("color");
	        var that = this;
	        if (!this.is_object_empty(color_data)) {
	            this.fill_g.selectAll("path").style("fill", function(d, i) {
	                return that.fill_g_colorfill(d, i);
	            });
	        }
	    },
	
	    is_object_empty: function(object) {
	        var is_empty = true;
	        for(var keys in object) {
	            is_empty = false;
	            break;
	        }
	        return is_empty;
	    },
	
	    hoverfill: function(d, j) {
	        var idx = this.model.get("selected");
	        var select = idx ? idx : [];
	        if (select.indexOf(d.id) > -1 &&
	            this.validate_color(this.model.get("selected_styles").selected_stroke)) {
	            return this.model.get("selected_styles").selected_stroke;
	        } else {
	            return this.model.get("stroke_color");
	        }
	    },
	
	    fill_g_colorfill: function(d, j) {
	        var color_scale = this.scales.color;
	        var idx = this.model.get("selected");
	        var selection = idx ? idx : [];
	        var color_data = this.model.get("color");
	        var colors = this.model.get("colors");
	
	        if (selection.indexOf(d.id) > -1) {
			    return this.model.get("selected_styles").selected_fill;
	        } else if (this.is_object_empty(color_data)) {
			    return colors[d.id] || colors.default_color;
	        } else if (color_data[d.id] === undefined ||
	                   color_data[d.id] === null ||
	                   color_data[d.id] === "nan" ||
	                   color_scale === undefined) {
	            return colors.default_color;
	        } else {
	            return color_scale.scale(color_data[d.id]);
	        }
	    },
	});
	
	module.exports = {
	    Map: Map,
	};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var utils = __webpack_require__(10);
	var _ = __webpack_require__(9);
	
	var Tooltip = widgets.DOMWidgetView.extend({
	
	    initialize: function() {
	        this.d3el = d3.select(this.el);
	        Tooltip.__super__.initialize.apply(this, arguments);
	    },
	
	    render: function() {
	        this.parent = this.options.parent;
	        this.update_formats();
	        this.create_listeners();
	        this.create_table();
	    },
	
	    create_listeners: function() {
	        this.listenTo(this.parent, "update_tooltip", this.update_tooltip);
	        this.model.on_some_change(["fields", "show_labels", "labels"], this.create_table, this);
	        this.listenTo(this.model, "change:formats", this.update_formats);
	    },
	
	    update_formats: function() {
	        var fields = this.model.get("fields");
	        var formats = this.model.get("formats");
	        this.tooltip_formats = fields.map(function(field, index) {
	            var fmt = formats[index];
	            if(fmt === undefined || fmt === "") {
	                return function(d) { return d; };
	            } else {
	                if(utils.is_valid_time_format(fmt)) {
	                    return d3.time.format(fmt);
	                }
	                else {
	                    return d3.format(fmt);
	                }
	            }
	        });
	    },
	
	    update_tooltip: function(data) {
	        //data is a dictionary passed by the parent along with the update_
	        //tooltip event. Responsibility of the mark to pass the data
	        var that = this;
	        this.d3el.select("table")
	            .selectAll("tr")
	            .select(".datavalue")
	            .text(function(datum, index) {
	                return that.tooltip_formats[index](data[datum]);
	            });
	    },
	
	    create_table: function() {
	        var fields = this.model.get("fields");
	        var labels = _.clone(this.model.get("labels"));
	        var ind = labels.length;
	        for (; ind < fields.length; ind++) {
	            labels[ind] = fields[ind];
	        }
	
	        this.d3el.select("table").remove();
	        var tooltip_table = this.d3el.append("table")
	            .selectAll("tr").data(fields);
	
	        tooltip_table.exit().remove();
	        var table_rows = tooltip_table.enter().append("tr")
	                            .attr("class", "datarow");
	        if(this.model.get("show_labels")) {
	            table_rows.append("td")
	                .text(function(datum, index) { return labels[index]; })
	                .attr("class", "tooltiptext datafield");
	        }
	        table_rows.append("td")
	            .attr("class", "tooltiptext datavalue");
	        this.update_formats();
	    }
	});
	
	module.exports = {
	    Tooltip: Tooltip
	};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var TooltipModel = widgets.DOMWidgetModel.extend({
	
	    defaults: function() {
	        return _.extend(widgets.DOMWidgetModel.prototype.defaults(), {
	            _model_name: "TooltipModel",
	            _view_name: "Tooltip",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	
	            fields: [],
	            formats: [],
	            show_labels: true,
	            labels: []
	        });
	    }
	});
	
	module.exports = {
	    TooltipModel: TooltipModel
	};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var lines = __webpack_require__(58);
	
	var FlexLine = lines.Lines.extend({
	
	    render: function() {
	        var base_render_promise = lines.Lines.__super__.render.apply(this);
	        var that = this;
	
	        return base_render_promise.then(function() {
	            var x_scale = that.scales.x, y_scale = that.scales.y;
	            that.create_listeners();
	            that.draw();
	        });
	    },
	
	    set_ranges: function() {
	        FlexLine.__super__.set_ranges.apply(this);
	        var width_scale = this.scales.width;
	        if(width_scale) {
	            width_scale.set_range([0.5, this.model.get("stroke_width")]);
	        }
	    },
	
	    create_listeners: function() {
	        FlexLine.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:colors", this.update_colors, this);
	        this.listenTo(this.model, "change:labels_visibility", this.update_legend_labels, this);
	        this.listenTo(this.model, "change:color change:width", this.update_and_draw, this);
	    },
	
	    draw_legend: function(elem, x_disp, y_disp, inter_x_disp, inter_y_disp) {
	        var g_elements = elem.selectAll(".legend" + this.uuid)
	            .data(this.model.mark_data, function(d, i) { return d.name; });
	
	        var that = this;
	        var rect_dim = inter_y_disp * 0.8;
	        g_elements.enter().append("g")
	            .attr("class", "legend" + this.uuid)
	            .attr("transform", function(d, i) {
	                return "translate(0, " + (i * inter_y_disp + y_disp)  + ")";
	            }).on("mouseover", _.bind(this.make_axis_bold, this))
	            .on("mouseout", _.bind(this.make_axis_non_bold, this))
	        .append("line")
	            .style("stroke", function(d,i) { return that.get_colors(i); })
	            .attr({x1: 0, x2: rect_dim, y1: rect_dim / 2 , y2: rect_dim / 2});
	
	        g_elements.append("text")
	            .attr("class","legendtext")
	            .attr("x", rect_dim * 1.2)
	            .attr("y", rect_dim / 2)
	            .attr("dy", "0.35em")
	            .text(function(d, i) {return that.model.get("labels")[i]; })
	            .style("fill", function(d,i) { return that.get_colors(i); });
	        var max_length = d3.max(this.model.get("labels"), function(d) {
	            return d.length;
	        });
	
	        g_elements.exit().remove();
	        return [this.model.mark_data.length, max_length];
	    },
	
	    set_positional_scales: function() {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	        this.listenTo(y_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	    },
	
	    initialize_additional_scales: function() {
	        var color_scale = this.scales.color;
	        if(color_scale) {
	            this.listenTo(color_scale, "domain_changed", function() {
	                this.draw();
	            });
	            color_scale.on("color_scale_range_changed", this.draw, this);
	        }
	    },
	
	    draw: function() {
	        this.set_ranges();
	        var curves_sel = this.d3el.selectAll(".curve")
	            .data(this.model.mark_data, function(d, i) { return d.name; });
	
	        curves_sel.enter().append("g")
	            .attr("class", "curve");
	
	        curves_sel.exit()
	            .transition("draw")
	            .duration(this.parent.model.get("animation_duration"))
	            .remove();
	
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	
	        var that = this;
	        curves_sel[0].forEach(function(elem, index) {
	            var lines = d3.select(elem).selectAll("line")
	                .data(that.model.mark_data[index].values);
	            lines.enter().append("line");
	            lines.attr("class", "line-elem")
	                .attr({
	                    x1: function(d) { return x_scale.scale(d.x1); },
	                    x2: function(d) { return x_scale.scale(d.x2); },
	                    y1: function(d) { return y_scale.scale(d.y1); },
	                    y2: function(d) { return y_scale.scale(d.y2); }
	                })
	                .attr("stroke", function(d) {
	                    return that.get_element_color(d);
	                }).attr("stroke-width", function(d) {
	                    return that.get_element_width(d);
	                });
	        });
	    },
	
	    get_element_color: function(d) {
	        var color_scale = this.scales.color;
	        if(color_scale !== undefined && d.color !== undefined) {
	            return color_scale.scale(d.color);
	        }
	        return this.model.get("colors")[0];
	    },
	
	    get_element_width: function(d) {
	        var width_scale = this.scales.width;
	        if(width_scale !== undefined && d.size !== undefined) {
	            return width_scale.scale(d.size);
	        }
	        return this.model.get("stroke_width");
	    },
	
	    relayout: function() {
	        lines.Lines.__super__.relayout.apply(this);
	        this.set_ranges();
	
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	
	        var that = this;
	        this.d3el.selectAll(".curve").selectAll(".line-elem")
	            .transition("relayout")
	            .duration(this.parent.model.get("animation_duration"))
	            .attr({
	                x1: function(d) { return x_scale.scale(d.x1); },
	                x2: function(d) { return x_scale.scale(d.x2); },
	                y1: function(d) { return y_scale.scale(d.y1); },
	                y2: function(d) { return y_scale.scale(d.y2); },
	        });
	    },
	
	    create_labels: function() {
	        //do nothing
	    }
	});
	
	module.exports = {
	    FlexLine: FlexLine
	};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	var topojson = __webpack_require__(77);
	
	var MapModel = markmodel.MarkModel.extend({
	
	    defaults: function() {
	        return _.extend(markmodel.MarkModel.prototype.defaults(), {
	            _model_name: "MapModel",
	            _view_name: "Map",
	
	            color: {},
	            hover_highlight: true,
	            hovered_styles: {
	                hovered_fill: "Orange",
	                hovered_stroke: null,
	                hovered_stroke_width: 2.0
	            },
	
	            stroke_color: null,
	            default_color: null,
	            scales_metadata: {
	                color: { dimension: "color" },
	                projection: { dimension: "geo" }
	            },
	            selected: [],
	            selected_styles: {
	                selected_fill: "Red",
	                selected_stroke: null,
	                selected_stroke_width: 2.0
	            },
	            map_data: undefined
	        });
	    },
	
	    initialize: function() {
	        MapModel.__super__.initialize.apply(this, arguments);
	        this.on("change:map_data", this.update_data, this);
	        this.on("change:color", this.color_data_updated, this);
	        this.update_data();
	        this.update_domains();
	    },
	
	    update_data: function() {
	        this.dirty = true;
	        var data = this.get("map_data");
	        if (data.type == 'Topology') {
	            this.geodata = topojson.feature(data, data.objects.subunits).features;
	        } else {
	            this.geodata = data.features;
	        }
	        this.color_data_updated();
	        this.dirty = false;
	        this.trigger("data_updated");
	    },
	
	    update_properties: function(d) {
	        if (!d.properties) {
	            d.properties = {"color": this.color_data[d.id]};
	        } else {
	            d.properties.color = this.color_data[d.id];
	        }
	    },
	
	    color_data_updated: function() {
	        var that = this;
	        this.update_domains();
	        this.geodata.map(function(d) {
	            return that.update_properties(d)
	        });
	    },
	
	    update_domains: function() {
	        var scales = this.get("scales");
	        var that = this;
	        var color_scale = scales.color;
	        this.color_data = this.get("color");
	        if(color_scale !== null && color_scale !== undefined) {
	            if(!this.get("preserve_domain").color) {
	                color_scale.compute_and_set_domain(
	                    Object.keys(this.color_data).map(function (d) {
	                        return that.color_data[d];
	                    }), this.model_id + "_color");
	            } else {
	                color_scale.del_domain([], this.model_id + "_color");
	            }
	        }
	    },
	
	    get_data_dict: function(data, index) {
	        return _.extend(data.properties, {'id': data.id});
	    }
	});
	
	module.exports = {
	    MapModel: MapModel
	};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	(function (global, factory) {
	   true ? factory(exports) :
	  typeof define === 'function' && define.amd ? define(['exports'], factory) :
	  (factory((global.topojson = global.topojson || {})));
	}(this, (function (exports) { 'use strict';
	
	function noop() {}
	
	function transformAbsolute(transform) {
	  if (!transform) return noop;
	  var x0,
	      y0,
	      kx = transform.scale[0],
	      ky = transform.scale[1],
	      dx = transform.translate[0],
	      dy = transform.translate[1];
	  return function(point, i) {
	    if (!i) x0 = y0 = 0;
	    point[0] = (x0 += point[0]) * kx + dx;
	    point[1] = (y0 += point[1]) * ky + dy;
	  };
	}
	
	function transformRelative(transform) {
	  if (!transform) return noop;
	  var x0,
	      y0,
	      kx = transform.scale[0],
	      ky = transform.scale[1],
	      dx = transform.translate[0],
	      dy = transform.translate[1];
	  return function(point, i) {
	    if (!i) x0 = y0 = 0;
	    var x1 = Math.round((point[0] - dx) / kx),
	        y1 = Math.round((point[1] - dy) / ky);
	    point[0] = x1 - x0;
	    point[1] = y1 - y0;
	    x0 = x1;
	    y0 = y1;
	  };
	}
	
	function reverse(array, n) {
	  var t, j = array.length, i = j - n;
	  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
	}
	
	function bisect(a, x) {
	  var lo = 0, hi = a.length;
	  while (lo < hi) {
	    var mid = lo + hi >>> 1;
	    if (a[mid] < x) lo = mid + 1;
	    else hi = mid;
	  }
	  return lo;
	}
	
	function feature(topology, o) {
	  return o.type === "GeometryCollection" ? {
	    type: "FeatureCollection",
	    features: o.geometries.map(function(o) { return feature$1(topology, o); })
	  } : feature$1(topology, o);
	}
	
	function feature$1(topology, o) {
	  var f = {
	    type: "Feature",
	    id: o.id,
	    properties: o.properties || {},
	    geometry: object(topology, o)
	  };
	  if (o.id == null) delete f.id;
	  return f;
	}
	
	function object(topology, o) {
	  var absolute = transformAbsolute(topology.transform),
	      arcs = topology.arcs;
	
	  function arc(i, points) {
	    if (points.length) points.pop();
	    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {
	      points.push(p = a[k].slice());
	      absolute(p, k);
	    }
	    if (i < 0) reverse(points, n);
	  }
	
	  function point(p) {
	    p = p.slice();
	    absolute(p, 0);
	    return p;
	  }
	
	  function line(arcs) {
	    var points = [];
	    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
	    if (points.length < 2) points.push(points[0].slice());
	    return points;
	  }
	
	  function ring(arcs) {
	    var points = line(arcs);
	    while (points.length < 4) points.push(points[0].slice());
	    return points;
	  }
	
	  function polygon(arcs) {
	    return arcs.map(ring);
	  }
	
	  function geometry(o) {
	    var t = o.type;
	    return t === "GeometryCollection" ? {type: t, geometries: o.geometries.map(geometry)}
	        : t in geometryType ? {type: t, coordinates: geometryType[t](o)}
	        : null;
	  }
	
	  var geometryType = {
	    Point: function(o) { return point(o.coordinates); },
	    MultiPoint: function(o) { return o.coordinates.map(point); },
	    LineString: function(o) { return line(o.arcs); },
	    MultiLineString: function(o) { return o.arcs.map(line); },
	    Polygon: function(o) { return polygon(o.arcs); },
	    MultiPolygon: function(o) { return o.arcs.map(polygon); }
	  };
	
	  return geometry(o);
	}
	
	function stitchArcs(topology, arcs) {
	  var stitchedArcs = {},
	      fragmentByStart = {},
	      fragmentByEnd = {},
	      fragments = [],
	      emptyIndex = -1;
	
	  // Stitch empty arcs first, since they may be subsumed by other arcs.
	  arcs.forEach(function(i, j) {
	    var arc = topology.arcs[i < 0 ? ~i : i], t;
	    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
	      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
	    }
	  });
	
	  arcs.forEach(function(i) {
	    var e = ends(i),
	        start = e[0],
	        end = e[1],
	        f, g;
	
	    if (f = fragmentByEnd[start]) {
	      delete fragmentByEnd[f.end];
	      f.push(i);
	      f.end = end;
	      if (g = fragmentByStart[end]) {
	        delete fragmentByStart[g.start];
	        var fg = g === f ? f : f.concat(g);
	        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
	      } else {
	        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	      }
	    } else if (f = fragmentByStart[end]) {
	      delete fragmentByStart[f.start];
	      f.unshift(i);
	      f.start = start;
	      if (g = fragmentByEnd[start]) {
	        delete fragmentByEnd[g.end];
	        var gf = g === f ? f : g.concat(f);
	        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
	      } else {
	        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	      }
	    } else {
	      f = [i];
	      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
	    }
	  });
	
	  function ends(i) {
	    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
	    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
	    else p1 = arc[arc.length - 1];
	    return i < 0 ? [p1, p0] : [p0, p1];
	  }
	
	  function flush(fragmentByEnd, fragmentByStart) {
	    for (var k in fragmentByEnd) {
	      var f = fragmentByEnd[k];
	      delete fragmentByStart[f.start];
	      delete f.start;
	      delete f.end;
	      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
	      fragments.push(f);
	    }
	  }
	
	  flush(fragmentByEnd, fragmentByStart);
	  flush(fragmentByStart, fragmentByEnd);
	  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });
	
	  return fragments;
	}
	
	function mesh(topology) {
	  return object(topology, meshArcs.apply(this, arguments));
	}
	
	function meshArcs(topology, o, filter) {
	  var arcs = [];
	
	  function arc(i) {
	    var j = i < 0 ? ~i : i;
	    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
	  }
	
	  function line(arcs) {
	    arcs.forEach(arc);
	  }
	
	  function polygon(arcs) {
	    arcs.forEach(line);
	  }
	
	  function geometry(o) {
	    if (o.type === "GeometryCollection") o.geometries.forEach(geometry);
	    else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);
	  }
	
	  if (arguments.length > 1) {
	    var geomsByArc = [],
	        geom;
	
	    var geometryType = {
	      LineString: line,
	      MultiLineString: polygon,
	      Polygon: polygon,
	      MultiPolygon: function(arcs) { arcs.forEach(polygon); }
	    };
	
	    geometry(o);
	
	    geomsByArc.forEach(arguments.length < 3
	        ? function(geoms) { arcs.push(geoms[0].i); }
	        : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });
	  } else {
	    for (var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);
	  }
	
	  return {type: "MultiLineString", arcs: stitchArcs(topology, arcs)};
	}
	
	function cartesianTriangleArea(triangle) {
	  var a = triangle[0], b = triangle[1], c = triangle[2];
	  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));
	}
	
	function ring(ring) {
	  var i = -1,
	      n = ring.length,
	      a,
	      b = ring[n - 1],
	      area = 0;
	
	  while (++i < n) {
	    a = b;
	    b = ring[i];
	    area += a[0] * b[1] - a[1] * b[0];
	  }
	
	  return area / 2;
	}
	
	function merge(topology) {
	  return object(topology, mergeArcs.apply(this, arguments));
	}
	
	function mergeArcs(topology, objects) {
	  var polygonsByArc = {},
	      polygons = [],
	      components = [];
	
	  objects.forEach(function(o) {
	    if (o.type === "Polygon") register(o.arcs);
	    else if (o.type === "MultiPolygon") o.arcs.forEach(register);
	  });
	
	  function register(polygon) {
	    polygon.forEach(function(ring$$) {
	      ring$$.forEach(function(arc) {
	        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
	      });
	    });
	    polygons.push(polygon);
	  }
	
	  function area(ring$$) {
	    return Math.abs(ring(object(topology, {type: "Polygon", arcs: [ring$$]}).coordinates[0]));
	  }
	
	  polygons.forEach(function(polygon) {
	    if (!polygon._) {
	      var component = [],
	          neighbors = [polygon];
	      polygon._ = 1;
	      components.push(component);
	      while (polygon = neighbors.pop()) {
	        component.push(polygon);
	        polygon.forEach(function(ring$$) {
	          ring$$.forEach(function(arc) {
	            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
	              if (!polygon._) {
	                polygon._ = 1;
	                neighbors.push(polygon);
	              }
	            });
	          });
	        });
	      }
	    }
	  });
	
	  polygons.forEach(function(polygon) {
	    delete polygon._;
	  });
	
	  return {
	    type: "MultiPolygon",
	    arcs: components.map(function(polygons) {
	      var arcs = [], n;
	
	      // Extract the exterior (unique) arcs.
	      polygons.forEach(function(polygon) {
	        polygon.forEach(function(ring$$) {
	          ring$$.forEach(function(arc) {
	            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
	              arcs.push(arc);
	            }
	          });
	        });
	      });
	
	      // Stitch the arcs into one or more rings.
	      arcs = stitchArcs(topology, arcs);
	
	      // If more than one ring is returned,
	      // at most one of these rings can be the exterior;
	      // choose the one with the greatest absolute area.
	      if ((n = arcs.length) > 1) {
	        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
	          if ((ki = area(arcs[i])) > k) {
	            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
	          }
	        }
	      }
	
	      return arcs;
	    })
	  };
	}
	
	function neighbors(objects) {
	  var indexesByArc = {}, // arc index -> array of object indexes
	      neighbors = objects.map(function() { return []; });
	
	  function line(arcs, i) {
	    arcs.forEach(function(a) {
	      if (a < 0) a = ~a;
	      var o = indexesByArc[a];
	      if (o) o.push(i);
	      else indexesByArc[a] = [i];
	    });
	  }
	
	  function polygon(arcs, i) {
	    arcs.forEach(function(arc) { line(arc, i); });
	  }
	
	  function geometry(o, i) {
	    if (o.type === "GeometryCollection") o.geometries.forEach(function(o) { geometry(o, i); });
	    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
	  }
	
	  var geometryType = {
	    LineString: line,
	    MultiLineString: polygon,
	    Polygon: polygon,
	    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }
	  };
	
	  objects.forEach(geometry);
	
	  for (var i in indexesByArc) {
	    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
	      for (var k = j + 1; k < m; ++k) {
	        var ij = indexes[j], ik = indexes[k], n;
	        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
	        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
	      }
	    }
	  }
	
	  return neighbors;
	}
	
	function compareArea(a, b) {
	  return a[1][2] - b[1][2];
	}
	
	function minAreaHeap() {
	  var heap = {},
	      array = [],
	      size = 0;
	
	  heap.push = function(object) {
	    up(array[object._ = size] = object, size++);
	    return size;
	  };
	
	  heap.pop = function() {
	    if (size <= 0) return;
	    var removed = array[0], object;
	    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
	    return removed;
	  };
	
	  heap.remove = function(removed) {
	    var i = removed._, object;
	    if (array[i] !== removed) return; // invalid request
	    if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
	    return i;
	  };
	
	  function up(object, i) {
	    while (i > 0) {
	      var j = ((i + 1) >> 1) - 1,
	          parent = array[j];
	      if (compareArea(object, parent) >= 0) break;
	      array[parent._ = i] = parent;
	      array[object._ = i = j] = object;
	    }
	  }
	
	  function down(object, i) {
	    while (true) {
	      var r = (i + 1) << 1,
	          l = r - 1,
	          j = i,
	          child = array[j];
	      if (l < size && compareArea(array[l], child) < 0) child = array[j = l];
	      if (r < size && compareArea(array[r], child) < 0) child = array[j = r];
	      if (j === i) break;
	      array[child._ = i] = child;
	      array[object._ = i = j] = object;
	    }
	  }
	
	  return heap;
	}
	
	function presimplify(topology, triangleArea) {
	  var absolute = transformAbsolute(topology.transform),
	      relative = transformRelative(topology.transform),
	      heap = minAreaHeap();
	
	  if (!triangleArea) triangleArea = cartesianTriangleArea;
	
	  topology.arcs.forEach(function(arc) {
	    var triangles = [],
	        maxArea = 0,
	        triangle,
	        i,
	        n,
	        p;
	
	    // To store each point’s effective area, we create a new array rather than
	    // extending the passed-in point to workaround a Chrome/V8 bug (getting
	    // stuck in smi mode). For midpoints, the initial effective area of
	    // Infinity will be computed in the next step.
	    for (i = 0, n = arc.length; i < n; ++i) {
	      p = arc[i];
	      absolute(arc[i] = [p[0], p[1], Infinity], i);
	    }
	
	    for (i = 1, n = arc.length - 1; i < n; ++i) {
	      triangle = arc.slice(i - 1, i + 2);
	      triangle[1][2] = triangleArea(triangle);
	      triangles.push(triangle);
	      heap.push(triangle);
	    }
	
	    for (i = 0, n = triangles.length; i < n; ++i) {
	      triangle = triangles[i];
	      triangle.previous = triangles[i - 1];
	      triangle.next = triangles[i + 1];
	    }
	
	    while (triangle = heap.pop()) {
	      var previous = triangle.previous,
	          next = triangle.next;
	
	      // If the area of the current point is less than that of the previous point
	      // to be eliminated, use the latter's area instead. This ensures that the
	      // current point cannot be eliminated without eliminating previously-
	      // eliminated points.
	      if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;
	      else maxArea = triangle[1][2];
	
	      if (previous) {
	        previous.next = next;
	        previous[2] = triangle[2];
	        update(previous);
	      }
	
	      if (next) {
	        next.previous = previous;
	        next[0] = triangle[0];
	        update(next);
	      }
	    }
	
	    arc.forEach(relative);
	  });
	
	  function update(triangle) {
	    heap.remove(triangle);
	    triangle[1][2] = triangleArea(triangle);
	    heap.push(triangle);
	  }
	
	  return topology;
	}
	
	var version = "1.6.27";
	
	exports.version = version;
	exports.mesh = mesh;
	exports.meshArcs = meshArcs;
	exports.merge = merge;
	exports.mergeArcs = mergeArcs;
	exports.feature = feature;
	exports.neighbors = neighbors;
	exports.presimplify = presimplify;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var widgets = __webpack_require__(7);
	
	var GeoScale = widgets.WidgetView.extend({
	
	    render: function() {
	        this.set_projection();
	        this.listenTo(this.model, "attribute_changed", this.reset_scale);
	    },
	
	    set_projection: function() {
	        this.path = d3.geo.path().projection(this.model.projection);
	        this.scale = this.model.projection;
	    },
	
	    reset_scale: function() {
	        this.set_projection();
	        this.trigger("domain_changed", null);
	    }
	});
	
	var Mercator = GeoScale.extend({
	});
	
	var Albers = GeoScale.extend({
	});
	
	var AlbersUSA = GeoScale.extend({
	});
	
	var EquiRectangular = GeoScale.extend({
	});
	
	var Orthographic = GeoScale.extend({
	});
	
	var Gnomonic = GeoScale.extend({
	});
	
	var Stereographic = GeoScale.extend({
	});
	
	module.exports = {
	    GeoScale: GeoScale,
	    Mercator: Mercator,
	    Albers: Albers,
	    AlbersUSA: AlbersUSA,
	    EquiRectangular: EquiRectangular,
	    Orthographic: Orthographic,
	    Gnomonic: Gnomonic,
	    Stereographic: Stereographic,
	};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var scalemodel = __webpack_require__(41);
	
	var GeoScaleModel = scalemodel.ScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(scalemodel.ScaleModel.prototype.defaults(), {
	            _model_name: "GeoScaleModel",
	            _view_name: "GeoScale"
	        });
	    }
	});
	
	var MercatorModel = GeoScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(GeoScaleModel.prototype.defaults(), {
	            _model_name: "MercatorModel",
	            _view_name: "Mercator",
	            scale_factor: 190.0,
	            center: [0, 60],
	            rotate: [0, 0]
	        });
	    },
	
	    initialize: function() {
	        MercatorModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["scale_factor", "center", "rotate"], this.create_projection, this);
	        this.create_projection();
	    },
	
	    create_projection: function() {
	        this.projection = d3.geo.mercator()
	            .center(this.get("center"))
	            .scale(this.get("scale_factor"))
	            .rotate(this.get("rotate"));
	        this.attribute_changed();
	    },
	
	    attribute_changed: function() {
	        this.trigger("attribute_changed");
	    }
	});
	
	var AlbersModel = GeoScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(GeoScaleModel.prototype.defaults(), {
	            _model_name: "AlbersModel",
	            _view_name: "Albers",
	            scale_factor: 250.0,
	            /*rotate: [96, 0],*/
	            center: [0, 60],
	            parallels: [29.5, 45.5],
	            precision: 0.1
	        });
	    },
	
	    initialize: function() {
	        AlbersModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["rotate", "center", "parallels", "scale_factor", "precision"],
	            this.create_projection, this);
	        this.create_projection();
	    },
	
	    create_projection: function() {
	        this.projection = d3.geo.albers()
	            .rotate(this.get("rotate"))
	            .center(this.get("center"))
	            .parallels(this.get("parallels"))
	            .scale(this.get("scale_factor"))
	            .precision(this.get("precision"));
	        this.attribute_changed();
	    },
	
	    attribute_changed: function() {
	        this.trigger("attribute_changed");
	    }
	});
	
	var AlbersUSAModel = GeoScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(GeoScaleModel.prototype.defaults(), {
	            _model_name: "AlbersUSAModel",
	            _view_name: "AlbersUSA",
	            scale_factor: 1200,
	            translate: [600, 490]  // center of the SVG viewbox (see Map.js)
	        });
	    },
	
	    initialize: function() {
	        AlbersUSAModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["scale_factor", "translate"], this.create_projection, this);
	        this.create_projection();
	    },
	
	    create_projection: function() {
	        this.projection = d3.geo.albersUsa()
	            .scale(this.get("scale_factor"))
	            .translate(this.get("translate"));
	        this.attribute_changed();
	    },
	
	    attribute_changed: function() {
	        this.trigger("attribute_changed");
	    }
	});
	
	var EquiRectangularModel = GeoScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(GeoScaleModel.prototype.defaults(), {
	            _model_name: "EquiRectangularModel",
	            _view_name: "EquiRectangular",
	            scale_factor: 145.0
	        });
	    },
	
	    initialize: function() {
	        EquiRectangularModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["scale_factor", "center"], this.create_projection, this);
	        this.create_projection();
	    },
	
	    create_projection: function() {
	        this.projection = d3.geo.equirectangular()
	            .center(this.get("center"))
	            .scale(this.get("scale_factor"));
	        this.attribute_changed();
	    },
	
	    attribute_changed: function() {
	        this.trigger("attribute_changed");
	    }
	});
	
	var OrthographicModel = GeoScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(GeoScaleModel.prototype.defaults(), {
	            _model_name: "OrthographicModel",
	            _view_name: "Orthographic",
	            scale_factor: 145.0,
	            center: [0, 60],
	            rotate: [0, 0],
	            clip_angle: 90.0,
	            precision: 0.1
	        });
	    },
	
	    initialize: function() {
	        OrthographicModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["scale_factor", "center", "clip_angle", "rotate", "precision"], this.create_projection, this);
	        this.create_projection();
	    },
	
	    create_projection: function() {
	        this.projection = d3.geo.orthographic()
	            .center(this.get("center"))
	            .scale(this.get("scale_factor"))
	            .clipAngle(this.get("clip_angle"))
	            .rotate(this.get("rotate"))
	            .precision(this.get("precision"));
	        this.attribute_changed();
	    },
	
	    attribute_changed: function() {
	        this.trigger("attribute_changed");
	    }
	});
	
	var GnomonicModel = GeoScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(GeoScaleModel.prototype.defaults(), {
	            _model_name: "GnomonicModel",
	            _view_name: "Gnomonic",
	            scale_factor: 145.0,
	           center: [0, 60],
	           precision: 0.1,
	           clip_angle: 89.999
	        });
	    },
	
	    initialize: function() {
	        GnomonicModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["scale_factor", "precision", "clip_angle"], this.create_projection, this);
	        this.create_projection();
	    },
	
	    create_projection: function() {
	        this.projection = d3.geo.gnomonic()
	            .clipAngle(this.get("clip_angle"))
	            .scale(this.get("scale_factor"))
	            .precision(this.get("precision"));
	        this.attribute_changed();
	    },
	
	    attribute_changed: function() {
	        this.trigger("attribute_changed");
	    }
	});
	
	var StereographicModel = GeoScaleModel.extend({
	
	    defaults: function() {
	        return _.extend(GeoScaleModel.prototype.defaults(), {
	            _model_name: "StereographicModel",
	            _view_name: "StereographicModel",
	            scale_factor: 245,
	            center: [0, 60],
	            precision: 0.1,
	            rotate: [96, 0],
	            clip_angle: 179.9999
	        });
	    },
	
	    initialize: function() {
	        StereographicModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["scale_factor", "center", "clip_angle", "rotate", "precision"], this.create_projection, this);
	        this.create_projection();
	    },
	
	    create_projection: function() {
	        this.projection = d3.geo.stereographic()
	            .scale(this.get("scale_factor"))
	            .rotate(this.get("rotate"))
	            .clipAngle(this.get("clip_angle"))
	            .center(this.get("center"))
	            .precision(this.get("precision"));
	        this.attribute_changed();
	    },
	
	    attribute_changed: function() {
	        this.trigger("attribute_changed");
	    }
	});
	
	module.exports = {
	    GeoScaleModel: GeoScaleModel,
	    MercatorModel: MercatorModel,
	    AlbersModel: AlbersModel,
	    AlbersUSAModel: AlbersUSAModel,
	    EquiRectangularModel: EquiRectangularModel,
	    OrthographicModel: OrthographicModel,
	    GnomonicModel: GnomonicModel,
	    StereographicModel: StereographicModel
	};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var d3 = __webpack_require__(8);
	var figure = __webpack_require__(66);
	var popperreference = __webpack_require__(67);
	var popper = __webpack_require__(68);
	
	if (popper.__esModule) {
	    popper = popper.default;
	}
	
	var MarketMap = figure.Figure.extend({
	
	    render: function(options) {
	        this.id = widgets.uuid();
	        var min_width = String(this.model.get("layout").get("min_width"));
	        var min_height = String(this.model.get("layout").get("min_height"));
	
	        var impl_dimensions = this._get_height_width(min_height.slice(0, -2), min_width.slice(0, -2));
	        this.width = impl_dimensions["width"];
	        this.height = impl_dimensions["height"];
	
	        this.scales = {};
	        this.set_top_el_style();
	        var that = this;
	        this.margin = this.model.get("map_margin");
	        this.num_rows = this.model.get("rows");
	        this.num_cols = this.model.get("cols");
	        this.row_groups = this.model.get("row_groups");
	        this.enable_select = this.model.get("enable_select");
	
	        this.update_data();
	        // set the number of rows and columns in the map
	        this.set_area_dimensions(this.data.length);
	
	        if (this.model.get('theme')) {
	            this.svg.classed(this.model.get('theme'), true);
	        }
	        this.fig = this.svg.append("g")
	                .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
	
	        this.fig_map = this.fig.append("g");
	        this.fig_axes = this.fig.append("g");
	        this.fig_click = this.fig.append("g");
	        this.fig_hover = this.fig.append("g");
	        this.fig_names = this.fig.append("g")
	            .style("display", (this.model.get("show_groups") ? "inline" : "none"));
	
	        this.fig_map.classed("g-map", true);
	        this.fig_axes.classed("g-axes", true);
	        this.fig_click.classed("g-click", true);
	        this.fig_hover.classed("g-hover", true);
	        this.fig_names.classed("g-names", true);
	        this.axis = [];
	
	        // code for tool tip to be displayed
	        this.tooltip_div = d3.select(document.createElement("div"))
	            .attr("class", "mark_tooltip")
	            .style("opacity", 0)
	            .style("pointer-events", "none")
	        this.popper_reference = new popperreference.ElementReference(this.svg.node());
	        this.popper = new popper(this.popper_reference, this.tooltip_div.node(), {
	            placement: 'auto',
	        });
	
	        this.update_default_tooltip();
	
	        this.selected_stroke = this.model.get("selected_stroke");
	        this.hovered_stroke = this.model.get("hovered_stroke");
	
	        this.update_plotarea_dimensions();
	
	        this.title = this.fig.append("text")
	          .attr("class", "mainheading")
	          .attr({x: (0.5 * (this.plotarea_width)), y: -(this.margin.top / 2.0), dy: "1em"})
	          .text(this.model.get("title"))
	          .style(this.model.get("title_style"));
	
	        var scale_creation_promise = this.create_scale_views();
	        scale_creation_promise.then(function() {
	            that.create_listeners();
	            that.axis_views = new widgets.ViewList(that.add_axis, null, that);
	            that.axis_views.update(that.model.get("axes"));
	            that.model.on("change:axes", function(model, value, options) {
	                that.axis_views.update(value);
	            });
	        });
	        this.displayed.then(function() {
	            document.body.appendChild(that.tooltip_div.node())
	            that.relayout();
	            that.draw_group_names();
	            that.create_tooltip_widget();
	        });
	    },
	
	    set_top_el_style: function() {
	        this.el.style["user-select"] = "none";
	        this.el.style["ms-user-select"] = "none";
	        this.el.style["moz-user-select"] = "none";
	        this.el.style["khtml-user-select"] = "none";
	        this.el.style["webkit-user-select"] = "none";
	    },
	
	    update_plotarea_dimensions: function() {
	        this.plotarea_width = this.width - this.margin.left - this.margin.right;
	        this.plotarea_height = this.height - this.margin.top - this.margin.bottom;
	        this.column_width = parseFloat((this.plotarea_width / this.num_cols).toFixed(2));
	        this.row_height = parseFloat((this.plotarea_height / this.num_rows).toFixed(2));
	    },
	
	    reset_drawing_controls: function() {
	        // Properties useful in drawing the map
	        this.prev_x = 0;
	        this.prev_y = -1;
	        this.y_direction = 1;  // for y direction 1 means going to the right
	        this.x_direction = 1;  // for x direction 1 means going down
	        this.group_iter = 1;
	    },
	
	    create_listeners: function() {
	        this.listenTo(this.model, "change:scales", this.create_scale_views, this);
	        this.listenTo(this.model, "change:color", this.recolor_chart, this);
	        this.listenTo(this.model, "change:colors", this.colors_updated, this);
	        this.listenTo(this.model, "change:show_groups", this.show_groups, this);
	        this.listenTo(this.model, "change:selected_stroke", this.update_selected_stroke, this);
	        this.listenTo(this.model, "change:hovered_stroke", this.update_hovered_stroke, this);
	        this.listenTo(this.model, "change:font_style", this.update_font_style, this);
	        this.model.on_some_change(["title", "title_style"], this.update_title, this);
	        this.listenTo(this.model, "change:selected", function() {
	            this.clear_selected();
	            this.apply_selected();
	        }, this);
	        this.model.on_some_change(["names", "groups", "ref_data"], function() {
	            this.update_data();
	            this.compute_dimensions_and_draw();
	        }, this);
	        this.listenTo(this.model, "change:rows", function(model, value) {
	            this.num_rows = value;
	            this.compute_dimensions_and_draw();
	        }, this);
	        this.listenTo(this.model, "change:cols", function(model, value) {
	            this.num_cols = value;
	            this.compute_dimensions_and_draw();
	        }, this);
	        this.listenTo(this.model, "change:row_groups", function(model, value) {
	            this.row_groups = value;
	            this.compute_dimensions_and_draw();
	        }, this);
	        this.listenTo(this.model, "change:tooltip_widget", this.create_tooltip_widget, this);
	        this.listenTo(this.model, "change:tooltip_fields", this.update_default_tooltip, this);
	        this.listenTo(this.model, "change:tooltip_formats", this.update_default_tooltip, this);
	    },
	
	    update_title: function(model, value) {
	        this.title.text(this.model.get("title"))
	           .style(this.model.get("title_style"));
	    },
	
	    relayout: function() {
	        var that = this;
	
	        var impl_dimensions = this._get_height_width(this.el.clientHeight, this.el.clientWidth);
	        this.width = impl_dimensions["width"];
	        this.height = impl_dimensions["height"];
	
	        window.requestAnimationFrame(function () {
	            // update ranges
	            that.margin = that.model.get("map_margin");
	            that.update_plotarea_dimensions();
	
	            // transform figure
	            that.fig.attr("transform", "translate(" + that.margin.left + "," +
	                                                      that.margin.top + ")");
	            that.title.attr({
	                x: (0.5 * (that.plotarea_width)),
	                y: -(that.margin.top / 2.0),
	                dy: "1em"
	            });
	
	            that.draw_map();
	
	            // Drawing the selected cells
	            that.clear_selected();
	            that.apply_selected();
	
	            // When map is expanded or contracted, there should not be any
	            // accidental hovers. To prevent this, the following call is made.
	            that.fig_hover.selectAll("rect")
	                .remove();
	            that.hide_tooltip();
	            that.trigger("margin_updated");
	        });
	
	    },
	
	    update_data: function() {
	        var that = this;
	        this.data = this.model.get_typed_field("names");
	        this.ref_data = this.model.get("ref_data");
	        this.group_data = this.model.get_typed_field("groups");
	        this.groups = _.uniq(this.group_data, true);
	        var display_text = this.model.get_typed_field("display_text");
	        display_text = (display_text === undefined || display_text.length === 0) ? this.data : display_text;
	
	        this.colors = this.model.get("colors");
	        var num_colors = this.colors.length;
	        this.colors_map = function(d) { return that.get_color(d, num_colors);};
	        var color_data = this.model.get_typed_field("color");
	        var mapped_data = this.data.map(function(d, i) {
	            return {
	                display: display_text[i],
	                name: d,
	                color: color_data[i],
	                group: that.group_data[i],
	                ref_data: (that.ref_data === null || that.ref_data === undefined) ? null : that.ref_data[i]
	            };
	        });
	
	        this.update_domains();
	        this.grouped_data = _.groupBy(mapped_data, function(d, i) { return that.group_data[i]; });
	        this.groups = [];
	        this.running_sums = [];
	        this.running_sums[0] = 0;
	        var count = 0;
	        for (var key in this.grouped_data) {
	            this.groups.push(key);
	            count += this.grouped_data[key].length;
	            this.running_sums.push(count);
	        }
	        this.running_sums.pop();
	    },
	
	    update_domains: function() {
	        var color_scale_model = this.model.get("scales").color;
	        var color_data = this.model.get_typed_field("color");
	        if(color_scale_model && color_data.length > 0) {
	            color_scale_model.compute_and_set_domain(color_data, this.model.model_id);
	        }
	    },
	
	    set_area_dimensions: function(num_items) {
	        this.num_rows = this.model.get("rows");
	        this.num_cols = this.model.get("cols");
	        this.row_groups = this.model.get("row_groups");
	
	        if (this.num_cols !== undefined && this.num_cols !== null && this.num_cols !== 0) {
	            // When the number of row groups is greater than 1, the number
	            // of columns has to be an odd number. This is to
	            // ensure the continuity of the waffles when groups are spread
	            // across multiple row groups
	            if(this.row_groups > 1 && this.num_cols % 2 === 0)
	                this.num_cols++;
	            this.num_rows = Math.floor(num_items / this.num_cols);
	            this.num_rows = (num_items % this.num_cols === 0) ? this.num_rows : (this.num_rows + 1);
	        } else if(this.num_rows !== undefined && this.num_rows !== null && this.num_rows !== 0) {
	            this.num_cols = Math.floor(num_items / this.num_rows);
	            this.num_cols = (num_items % this.num_rows === 0) ? this.num_cols : (this.num_cols + 1);
	            if(this.row_groups > 1 && this.num_cols % 2 === 0)
	                this.num_cols++;
	        } else {
	            this.num_cols = Math.floor(Math.sqrt(num_items));
	            if(this.row_groups > 1 && this.num_cols % 2 === 0)
	                this.num_cols++;
	            this.num_rows = Math.floor(num_items / this.num_cols);
	            this.num_rows = (num_items % this.num_cols === 0) ? this.num_rows : (this.num_rows + 1);
	        }
	
	        // row_groups cannot be greater than the number of rows
	        this.row_groups = Math.min(this.row_groups, this.num_rows);
	        // if there is only one row_group, then the number of columns are
	        // not necessarily equal to the variable this.num_cols as we draw
	        // row first. So we need to adjust the this.num_cols variable
	        // according to the num_rows.
	        if(this.row_groups == 1) {
	            this.num_cols = Math.floor(num_items / this.num_rows);
	            this.num_cols = (num_items % this.num_rows === 0) ? this.num_cols : (this.num_cols + 1);
	        }
	        // depending on the number of rows, we need to decide when to
	        // switch direction. The below functions tells us where to swtich
	        // direction.
	        this.set_row_limits();
	    },
	
	    compute_dimensions_and_draw: function() {
	        this.set_area_dimensions(this.data.length);
	        this.update_plotarea_dimensions();
	        this.draw_map();
	
	        this.clear_selected();
	        this.apply_selected();
	
	        // when data is changed
	        this.fig_hover.selectAll("rect")
	            .remove();
	        this.hide_tooltip();
	    },
	
	    update_default_tooltip: function() {
	        this.tooltip_fields = this.model.get("tooltip_fields");
	        var formats = this.model.get("tooltip_formats");
	        this.tooltip_formats = this.tooltip_fields.map(function(field, index) {
	            var fmt = formats[index];
	            if(fmt === undefined || fmt === "") {return function(d) { return d; }; }
	            else return d3.format(fmt);
	        });
	    },
	
	    create_scale_views: function() {
	        for (var key in this.scales) {
	            this.stopListening(this.scales[key]);
	        }
	        var scale_models = this.model.get("scales");
	        var that = this;
	        var scale_promises = {};
	        _.each(scale_models, function(model, key) {
	            scale_promises[key] = that.create_child_view(model);
	        });
	        return widgets.resolvePromisesDict(scale_promises).then(function(d) {
	            that.scales = d;
	            that.set_scales();
	        });
	    },
	
	    set_scales: function() {
	        var that = this;
	        var color_scale = this.scales.color;
	        if(color_scale) {
	            color_scale.set_range();
	            color_scale.on("color_scale_range_changed", that.update_map_colors, that);
	            this.update_domains();
	            this.listenTo(color_scale, "domain_changed", function() {
	                that.update_map_colors();
	            });
	            this.update_map_colors();
	        }
	    },
	
	    show_groups: function(model, value) {
	        this.fig_names.style("display", (value ? "inline" : "none"));
	        this.fig_map.selectAll(".market_map_text").style("opacity", (value ? 0.2 : 1));
	        this.fig_map.selectAll(".market_map_rect").style("stroke-opacity", (value ? 0.2 : 1));
	    },
	
	    draw_map: function() {
	        this.reset_drawing_controls();
	        // Removing pre existing elements from the map
	        this.fig_map.selectAll(".element_group").remove();
	        this.fig_names.selectAll(".names_object").remove();
	        this.rect_groups = this.fig_map.selectAll(".element_group")
	            .data(this.groups);
	        var color_scale = this.scales.color;
	
	        var that = this;
	        this.rect_groups.enter()
	            .append("g")
	            .attr("class", "element_group")
	            .attr("transform", function(d, i) { return that.get_group_transform(i); });
	
	        this.rect_groups.exit().remove();
	        this.end_points = [];
	        this.rect_groups[0].forEach(function(d, i) {
	            var data = that.grouped_data[that.groups[i]];
	            var color = that.colors_map(i);
	            var return_arr = that.get_new_cords();
	            var ends = that.get_end_points(return_arr[2], data.length, return_arr[0], return_arr[1], return_arr[3], return_arr[4]);
	            ends.forEach(function(point) { that.end_points.push(point); });
	            var element_count = that.running_sums[i];
	
	            var groups = d3.select(d)
	                .selectAll(".rect_element")
	                .data(data);
	
	            // Appending the <g> <rect> and <text> elements to the newly
	            // added nodes
	            var new_groups = groups.enter()
	                .append("g")
	                .classed("rect_element", true);
	
	            new_groups.append("rect")
	                .attr("x", 0)
	                .attr("y", 0)
	                .classed("market_map_rect", true);
	
	            new_groups.append("text")
	                .classed("market_map_text", true)
	                .style({"text-anchor": "middle", 'fill' :'black', "pointer-events": "none"})
	                .style(that.model.get("font_style"));
	
	            // Update the attributes of the entire set of nodes
	            groups.attr("transform", function(data, ind) { return that.get_cell_transform(ind); })
	                .on("click", function(data, ind) { that.cell_click_handler(data, (element_count + ind), this);})
	                .on("mouseover", function(data, ind) { that.mouseover_handler(data, (element_count + ind), this);})
	                .on("mousemove", function(data) { that.mousemove_handler(data); })
	                .on("mouseout", function(data, ind) { that.mouseout_handler(data, (element_count + ind), this);})
	                .attr("class",function(data, index) { return d3.select(this).attr("class") + " " + "rect_" + (element_count + index); })
	                .attr("id", function(data) { return "market_map_element_" + data.name;});
	
	            groups.selectAll(".market_map_rect")
	                .attr("width", that.column_width)
	                .attr("height", that.row_height)
	                .style("stroke-opacity", (that.model.get("show_groups") ? 0.2 : 1.0))
	                .style({'stroke': that.model.get("stroke"), "fill": function(elem, j) {
	                    return (color_scale && elem.color !== undefined && elem.color !== null) ?
	                        color_scale.scale(elem.color) :
	                        that.colors_map(i);}});
	
	            groups.selectAll(".market_map_text")
	                .attr("x", that.column_width / 2.0)
	                .attr("y", that.row_height / 2.0)
	                .text(function(data, j) { return data.display; })
	                .style("opacity", (that.model.get("show_groups") ? 0.2 : 1.0));
	
	            // Removing the old nodes
	            groups.exit().remove();
	            var path = that.create_bounding_path(d, ends);
	            var min_x = d3.min(ends, function(end_point) { return end_point.x;});
	            var min_y = d3.min(ends, function(end_point) { return end_point.y;});
	
	            that.fig_names.append("foreignObject")
	                .attr("class", "names_object")
	                .attr("x", min_x)
	                .attr("y", min_y)
	                .append("xhtml:div")
	                .attr("class", "names_div")
	                .style({"display": "flex", "flex-direction": "row", "align-content": "center", "align-items": "center", "width": "100%",
	                       "height": "100%", "justify-content": "center", "word-wrap": "break-word", "font": "24px sans-serif", "color": "black"})
	                .text(that.groups[i]);
	        });
	        this.draw_group_names();
	    },
	
	    draw_group_names: function() {
	        // Get all the bounding rects of the paths around each of the
	        // sectors. Get their client bounding rect.
	        var paths = this.svg.selectAll(".bounding_path")[0];
	        var clientRects = paths.map(function(path) { return path.getBoundingClientRect(); });
	        var text_elements = this.fig_names.selectAll(".names_object").data(clientRects);
	        text_elements.attr("width", function(d) { return d.width;})
	            .attr("height", function(d) { return d.height;});
	    },
	
	    recolor_chart: function() {
	        var that = this;
	        this.update_data();
	        this.rect_groups = this.fig.selectAll(".element_group")
	            .data(this.groups);
	        var color_scale = this.scales.color;
	
	        this.rect_groups[0].forEach(function(d, i) {
	            var data = that.grouped_data[that.groups[i]];
	            var color = that.colors_map(i);
	            var groups = d3.select(d)
	                .selectAll(".rect_element")
	                .data(data)
	                .select('rect')
	                .style({'stroke': that.model.get('stroke'), 'fill': function(elem, j)
	                       { return (color_scale && elem.color !== undefined && elem.color !== null) ?
	                           color_scale.scale(elem.color) :
	                           that.colors_map(i);}});
	        });
	    },
	
	    update_font_style: function(model, value) {
	        this.svg.selectAll(".market_map_text")
	            .style(value);
	    },
	
	    update_map_colors: function() {
	        var that = this;
	        var color_scale = this.scales.color;
	        if(this.rect_groups !== undefined && this.rect_groups !== null) {
	            this.rect_groups[0].forEach(function(d, i) {
	                var data = that.grouped_data[that.groups[i]];
	                var color = that.colors_map(i);
	                var groups = d3.select(d)
	                    .selectAll(".rect_element")
	                    .data(data)
	                    .select('rect')
	                    .style({'stroke': that.model.get('stroke'), 'fill': function(elem, j) {
	                        return (color_scale && elem.color !== undefined &&
	                               elem.color !== null) ?
	                            color_scale.scale(elem.color) :
	                            that.colors_map(i);}});
	            });
	        }
	    },
	
	    cell_click_handler: function(data, id, cell) {
	        if(this.model.get("enable_select")) {
	            var selected = this.model.get("selected").slice();
	            var index = selected.indexOf(data.name);
	            var cell_id = d3.select(cell).attr("id");
	            if(index == -1) {
	                //append a rectangle with the dimensions to the g-click
	                selected.push(data.name);
	                var transform = d3.select(cell).attr("transform");
	                this.add_selected_cell(cell_id, transform);
	            }
	            else {
	                this.fig_click.select("#click_" + cell_id)
	                    .remove();
	                //remove the rectangle from the g-click
	                selected.splice(index, 1);
	            }
	            this.model.set("selected", selected);
	            this.touch();
	        }
	    },
	
	    apply_selected: function() {
	        var selected = this.model.get("selected");
	        var that = this;
	        if(selected === undefined || selected === null || selected.length === 0)
	            this.clear_selected();
	        else{
	            selected.forEach(function(data) {
	                var cell_id = "market_map_element_" + data;
	                that.fig_click.select("#click_" + cell_id)
	                    .remove();
	                if(that.fig_map.selectAll("#"+ cell_id)[0].length == 1) {
	                    var transform = that.fig_map.selectAll("#"+ cell_id).attr("transform");
	                    that.add_selected_cell(cell_id, transform);
	                }
	           });
	        }
	    },
	
	    clear_selected: function() {
	        this.fig_click.selectAll("rect")
	            .remove();
	    },
	
	    add_selected_cell: function(id, transform) {
	        this.fig_click.append("rect")
	            .attr("id", "click_" + id)
	            .attr("transform", transform)
	            .attr("x", 0)
	            .attr("y", 0)
	            .attr("width", this.column_width)
	            .attr("height", this.row_height)
	            .style({'stroke': this.selected_stroke, 'stroke-width': '4px', 'fill': 'none'});
	    },
	
	    mouseover_handler: function(data, id, cell) {
	        var transform = d3.select(cell).attr("transform");
	        if(this.model.get("enable_hover")) {
	            this.fig_hover.append("rect")
	                .attr("class", "hover_" + id)
	                .attr("transform", transform)
	                .attr("x", 0)
	                .attr("y", 0)
	                .attr("width", this.column_width)
	                .attr("height", this.row_height)
	                .style({'stroke': this.hovered_stroke, 'stroke-width': '3px', 'fill': 'none',
	                        'pointer-events': 'none'
	                    });
	            this.show_tooltip(d3.event, data);
	            this.send({event: "hover", data: data.name, ref_data: data.ref_data});
	        }
	    },
	
	    update_selected_stroke: function(model, value) {
	        this.selected_stroke = value;
	        var that = this;
	        this.fig_click.selectAll("rect")
	            .style({'stroke': value});
	    },
	
	    update_hovered_stroke: function(model, value) {
	        this.hovered_stroke = value;
	        // I do not need to update anything else because when hovered color
	        // is being updated you are not hovering over anything.
	    },
	
	    mouseout_handler: function(data, id, cell) {
	        this.fig_hover.select(".hover_" + id)
	            .remove();
	        this.hide_tooltip();
	    },
	
	    show_tooltip: function(event, data) {
	        var mouse_pos = d3.mouse(this.el);
	        var that = this;
	        if(!this.tooltip_view && (!this.tooltip_fields || this.tooltip_fields.length == 0))
	        {
	            return;
	        } else {
	            var tooltip_div = this.tooltip_div;
	            tooltip_div.transition()
	                .style("opacity", 0.9)
	                .style("display", null);
	
	            this.move_tooltip();
	            tooltip_div.select("table").remove();
	
	            var ref_data = data.ref_data;
	            if(!this.tooltip_view) {
	                var tooltip_table = tooltip_div.append("table")
	                    .selectAll("tr").data(this.tooltip_fields);
	
	                tooltip_table.exit().remove();
	                var table_rows = tooltip_table.enter().append("tr");
	
	                table_rows.append("td")
	                    .attr("class", "tooltiptext")
	                    .text(function(datum) { return datum;});
	
	                table_rows.append("td")
	                    .attr("class", "tooltiptext")
	                    .text(function(datum, index) { return (ref_data === null || ref_data === undefined) ? null : that.tooltip_formats[index](ref_data[datum]);});
	            }
	            this.popper.enableEventListeners();
	            this.move_tooltip();
	        }
	    },
	
	    mousemove_handler: function(data) {
	        this.move_tooltip(data);
	    },
	
	    move_tooltip: function(data) {
	        this.popper_reference.x = d3.event.clientX;
	        this.popper_reference.y = d3.event.clientY;
	        this.popper.scheduleUpdate();
	    },
	
	    hide_tooltip: function() {
	         this.tooltip_div.style("pointer-events", "none");
	         this.tooltip_div.transition()
	            .style("opacity", 0)
	            .style("display", "none");
	        this.popper.disableEventListeners();
	    },
	
	    create_tooltip_widget: function() {
	        var tooltip_model = this.model.get("tooltip_widget");
	        if((this.tooltip_view !== null && this.tooltip_view !== undefined)) {
	            //remove the previous tooltip
	            this.tooltip_view.remove();
	            this.tooltip_view = null;
	        }
	        var that = this;
	        if(tooltip_model) {
	            var tooltip_widget_creation_promise = this.create_child_view(tooltip_model);
	            tooltip_widget_creation_promise.then(function(view) {
	                that.tooltip_view = view;
	                that.tooltip_div.node().appendChild(view.el);
	                view.trigger("displayed", {"add_to_dom_only": true});
	            });
	        }
	    },
	
	    get_group_transform: function(index) {
	        return "translate(" + '0' + ", 0)";
	    },
	
	    get_cell_transform: function(index) {
	        if(!this.past_border_y()){
	            if(this.past_border_x()) {
	                this.y_direction = -1 * this.y_direction;
	                this.prev_x += this.x_direction;
	            } else {
	                this.x_direction = -1 * this.x_direction;
	                this.prev_y += this.y_direction;
	                this.group_iter += 1;
	            }
	        } else {
	            this.prev_y += this.y_direction;
	        }
	        return "translate(" + (this.prev_x * this.column_width) + ", " +
	                              (this.prev_y * this.row_height) + ")";
	    },
	
	    get_new_cords: function() {
	        var new_x = this.prev_x;
	        var new_y = this.prev_y;
	        var y_direction = this.y_direction;
	        var x_direction = this.x_direction;
	        var group_iter = this.group_iter;
	        if(!this.past_border_y()){
	            if(this.past_border_x()) {
	                y_direction = -1 * this.y_direction;
	                new_x += this.x_direction;
	            } else {
	                x_direction = -1 * this.x_direction;
	                new_y += this.y_direction;
	                group_iter += 1;
	            }
	        } else {
	            new_y += this.y_direction;
	        }
	        return [new_x, new_y, group_iter, x_direction, y_direction, new_x * this.column_width, new_y * this.row_height];
	    },
	
	    past_border_y: function() {
	        if(this.y_direction == 1) {
	            return (this.prev_y + 1) < this.row_limits[this.group_iter];
	        } else {
	            return (this.prev_y - 1) > this.row_limits[this.group_iter -1] - 1;
	        }
	    },
	
	    past_border_x: function() {
	        if(this.x_direction == 1) {
	            return (this.prev_x + 1) < this.num_cols;
	        } else {
	            return (this.prev_x - 1) > -1;
	        }
	    },
	
	    colors_updated: function() {
	        this.colors = this.model.get("colors");
	        this.recolor_chart();
	    },
	
	    get_color: function(index, length) {
	        return this.colors[index % length];
	    },
	
	    set_row_limits: function() {
	        var step = Math.floor(this.num_rows / this.row_groups);
	        this.row_limits = [];
	        for(var iter = this.row_groups - 1; iter > -1; iter--){
	            this.row_limits.unshift(iter * step);
	        }
	        this.row_limits[this.row_groups] = this.num_rows;
	    },
	
	    get_end_points: function(group_iter, num_cells, start_col, start_row, x_direction, y_direction) {
	        //start_row is the 0-based index and not a 1-based index, i.e., it
	        //is not the column number in the truest sense
	        // Function to get the end points of the rectangle representing the
	        // groups.
	        // Requires the direction variables to be updated before this
	        // function is called
	        var top_row = this.row_limits[group_iter - 1];
	        var bottom_row = this.row_limits[group_iter];
	        var across = false;
	
	        var init_x = x_direction;
	        var init_y = y_direction;
	        var end_points = [];
	        var current_row;
	
	        var rows_remaining = (init_y == 1) ? (bottom_row - start_row) : (start_row - top_row + 1);
	        var cols_remaining = (init_x == 1) ? (this.num_cols - 1 - start_col) : (start_col); // this is the num of columns remaining
	        //after the cuirrent column has been filled
	        var elem_remaining = num_cells;
	        //this holds the number of continuous cols that will be filled
	        //between the current top and bottom rows
	        var num_rows = bottom_row - top_row;
	
	        if(elem_remaining !== 0) {
	            // starting corener of the path
	            this.calc_end_point_source(start_col, start_row, init_x, init_y).forEach(function(d) { end_points.push(d); });
	            var elem_filled = Math.min(rows_remaining, elem_remaining);
	
	            if(elem_filled === elem_remaining) {
	                // There are enough elements only to fill one column
	                // partially. We add the three end points and exit
	                // The adjacent corner from the starting corner. This is
	                // required because the elements are filled in the first
	                // row itself.
	                this.calc_end_point_source(start_col, start_row, (-1) * init_x, init_y).forEach(function(d) { end_points.push(d); });
	
	                current_row = start_row + (elem_remaining - 1) * init_y;
	                this.calc_end_point_dest(start_col, current_row, (-1) * init_x, init_y).forEach(function(e) { end_points.push(e); });
	                this.calc_end_point_dest(start_col, current_row, init_x, init_y).forEach(function(e) { end_points.push(e); });
	
	                /*
	                console.log("new set");
	                end_points.forEach(function(point) { console.log(point); });
	                console.log("end set");
	               */
	
	                return end_points;
	            }
	            elem_remaining = elem_remaining - elem_filled;
	            if(cols_remaining === 0) {
	                // Since this is the last column, the adjacent corner from
	                // the starting corner is added here too
	                this.calc_end_point_source(start_col, start_row, init_x * (-1), init_y).forEach(function(d) { end_points.push(d); });
	            }
	            else if(rows_remaining !== (bottom_row - top_row)) {
	                // If the starting row is not the starting row of a group,
	                // the poirnt adjacent to the starting point needs to be
	                // added.
	                this.calc_end_point_source(start_col, start_row, init_x * (-1), init_y).forEach(function(d) { end_points.push(d); });
	
	                if(elem_remaining > num_rows) {
	                    // If next row is completely filled, then the top row
	                    // element of the next column is an end point. That is
	                    // being added here.
	                    this.calc_end_point_dest(start_col + init_x, (init_y == 1) ? top_row :
	                                         bottom_row - 1, init_x * (-1), init_y * (-1)).forEach(function(d) { end_points.push(d); });
	                }
	            }
	            else if(elem_remaining < num_rows) {
	                // one continuous row in this case
	                this.calc_end_point_source(start_col, start_row, (-1) * init_x, init_y).forEach(function(d) { end_points.push(d); });
	            }
	            start_row = start_row + (init_y * (elem_filled - 1));
	            //first set of end points are added here
	            this.calc_end_point_dest(start_col, start_row, (-1) * init_x, init_y).forEach(function(d) { end_points.push(d); });
	            if(elem_remaining === 0) {
	                this.calc_end_point_dest(start_col, start_row, init_x, init_y).forEach(function(d) { end_points.push(d); });
	
	                /*
	                console.log("new set");
	                end_points.forEach(function(point) { console.log(point); });
	                console.log("end set");
	               */
	
	                return end_points;
	            }
	            if(cols_remaining !== 0 && elem_remaining > num_rows)
	                start_col = start_col + init_x;
	        }
	
	        while(elem_remaining > num_rows) {
	            var no_cont_cols;
	            if(num_rows * cols_remaining < elem_remaining) {
	                no_cont_cols = cols_remaining;
	                var leftover_elem = elem_remaining - (no_cont_cols) * num_rows;
	                no_cont_cols += Math.floor(leftover_elem / (this.row_limits[group_iter + 1] - this.row_limits[group_iter]));
	            } else {
	                no_cont_cols = Math.floor(elem_remaining / num_rows);
	            }
	
	            if(no_cont_cols > cols_remaining){
	                start_col = (init_x === 1) ? this.num_cols - 1 : 0;
	                if(cols_remaining !== 0) {
	                    this.calc_end_point_dest(start_col, top_row, init_x, -1)
	                        .forEach(function(d) { end_points.push(d); });
	                }
	                no_cont_cols = cols_remaining;
	                cols_remaining = this.num_cols;
	                group_iter += 1;
	                top_row = bottom_row;
	                bottom_row = this.row_limits[group_iter];
	                start_row = top_row;
	                init_x = -1 * init_x;
	                init_y = Math.pow(-1, no_cont_cols) * init_y * (-1);
	                this.calc_end_point_dest(start_col, bottom_row - 1, (-1) * init_x, 1)
	                    .forEach(function(d) { end_points.push(d); });
	            } else if (no_cont_cols === cols_remaining) {
	                start_col = (init_x === 1) ? this.num_cols - 1 : 0;
	                if(cols_remaining !== 0) {
	                    this.calc_end_point_dest(start_col, top_row, init_x, -1)
	                        .forEach(function(d) { end_points.push(d); });
	                }
	                no_cont_cols = cols_remaining;
	                cols_remaining = this.num_cols;
	                group_iter += 1;
	                if(group_iter < this.row_limits.length) {
	                    top_row = bottom_row;
	                    bottom_row = this.row_limits[group_iter];
	                    start_row = top_row;
	                    init_x = -1 * init_x;
	                    init_y = Math.pow(-1, no_cont_cols) * init_y * (-1);
	                    across = true;
	                }
	                else {
	                    init_y = 1;
	                    init_x = 1;
	                }
	            } else {
	                // The number of elements are such that the row group is
	                // not exhausted.
	                init_y = Math.pow(-1, (no_cont_cols)) * init_y;
	                //As I am moving down this time, next time I will move up
	                //and I might not reach the top row, it might be an end
	                //point.
	                start_row = (init_y === 1) ? top_row : bottom_row - 1;
	                start_col = start_col + (init_x) * (no_cont_cols - 1);
	                this.calc_end_point_source(start_col, start_row, (-1) * init_x, init_y).forEach(function(d) { end_points.push(d); });
	            }
	            elem_remaining -= (no_cont_cols * (num_rows));
	            num_rows = bottom_row - top_row;
	            //reset direction
	            //this is an end point
	        }
	        //all elements are exhausted
	        if(elem_remaining === 0) {
	            // The column is exactly filled. In this case, the only end
	            // point I need to add is the outer edge w.r.t. the direction
	            // in which we are travelling
	            start_row = (init_y === 1) ? bottom_row - 1 : top_row;
	            init_x = (across) ? ((-1) * init_x) : init_x;
	            this.calc_end_point_dest(start_col, start_row, init_x, init_y).forEach(function(d) { end_points.push(d); });
	        }
	        else {
	            // The previous column was exactly filled and the last column
	            // is partially filled
	            init_y = -1 * init_y; // Since we are in the next column, the direction of y has to be reversed
	            start_row = (init_y === 1) ? top_row : bottom_row - 1;
	            start_col = (across) ? start_col : (start_col + (init_x));
	
	            // this is the outer edge of the start of the last column w.r.t
	            // the current direction of travel.
	            this.calc_end_point_source(start_col, start_row, init_x * (-1), init_y).forEach(function(d) { end_points.push(d); });
	
	            // The points corresponding to the cell at which we stop.
	            current_row = start_row + (elem_remaining - 1) * init_y;  // this is the row in which we end
	            // Two points need to be added. The boundary of the last cell
	            // in the y-direction.
	            this.calc_end_point_dest(start_col, current_row, init_x, init_y).forEach(function(d) { end_points.push(d); });
	            this.calc_end_point_dest(start_col, current_row, (-1) * init_x, init_y).forEach(function(d) { end_points.push(d); });
	        }
	
	        /*
	        console.log("new set");
	        end_points.forEach(function(point) { console.log(point); });
	        console.log("end set");
	       */
	
	        return end_points;
	    },
	
	    create_bounding_path: function(elem, end_points) {
	        var start_x = end_points[0].x;
	        var start_y = end_points[0].y;
	        var values = [];
	        var editing_copy = end_points.slice();
	        values.push(end_points[0]);
	        editing_copy.splice(0, 1);
	        //do union based on which direction you are trying to move in and
	        //draw the path
	        //best way seems to be horizaontal followed by vertical
	        var props = ['x', 'y'];
	        var iter = 0;
	        var prop = props[iter % 2];
	        var other_prop = props[(iter + 1) % 2];
	        var curr_elem = values[0];
	        var match = curr_elem[prop];
	        var dim = curr_elem[other_prop];
	        var max_iter = 2 * editing_copy.length;
	        var final_val = 0;
	        while(editing_copy.length > 1 && max_iter > 0){
	            var filtered_array = editing_copy.filter(function(elem) { return elem[prop] == match; });
	            if(filtered_array.length > 0) {
	                iter++;
	                var min_elem = d3.min(filtered_array, function(elem) { return elem[other_prop]; });
	                var max_elem = d3.max(filtered_array, function(elem) { return elem[other_prop]; });
	                if(min_elem < dim && max_elem > dim) {
	                    if(prop == 'y') {
	                        if(this.x_direction == 1) {
	                            final_val = max_elem;
	                        }
	                        else {
	                            final_val = min_elem;
	                        }
	                    } else {
	                        // There are elements greater than and lesser than
	                        // reference value. I am trying to see if there are
	                        // multiple elements greater or lesser. If there is
	                        // only one in one of the directions, that is the
	                        // direction I draw the line in.
	                        var lesser_arr = filtered_array.filter(function(elem) { return elem[other_prop] < dim; });
	                        var greater_arr = filtered_array.filter(function(elem) { return elem[other_prop] > dim; });
	
	                        if(lesser_arr.length == 1) {
	                            final_val = min_elem;
	                        } else if(greater_arr.length == 1) {
	                            final_val = max_elem;
	                        } else {
	                            final_val = d3.max(lesser_arr, function(elem) {return elem[other_prop]; });
	                        }
	                    }
	                } else {
	                    if(min_elem > dim) {
	                        final_val = min_elem;
	                    } else {
	                        final_val = max_elem;
	                    }
	                }
	                var match_elem = editing_copy.filter(function(elem) { return elem[prop] == match && elem[other_prop] == final_val;});
	                match_elem.forEach(function(elem) { editing_copy.splice(editing_copy.indexOf(elem), 1);} );
	                var value = {};
	                value[prop] = match;
	                value[other_prop] = final_val;
	                values.push(value);
	            }
	            else {
	                final_val = dim;
	            }
	            //swap prop and other_prop
	            var temp = prop;
	            prop = other_prop;
	            other_prop = temp;
	
	            dim = match;
	            match = final_val;
	            max_iter--;
	        }
	        if(editing_copy.length > 0)
	            values.push(editing_copy[0]);
	        values.push(end_points[0]);
	        var line = d3.svg.line()
	            .interpolate('linear')
	            .x(function(d) { return d.x;})
	            .y(function(d) { return d.y;});
	        var bounding_path = d3.select(elem)
	            .append('path')
	            .attr("class", "bounding_path")
	            .attr('d', function() {return line(values);})
	            .attr('fill', 'none')
	            .style('stroke', this.model.get('group_stroke'))
	            .style('stroke-width', 3);
	        return bounding_path;
	    },
	
	    calc_end_point_source: function(curr_x, curr_y, x_direction, y_direction) {
	        curr_y = (y_direction == 1) ? curr_y : curr_y + 1;
	        curr_x = (x_direction == 1) ? curr_x : curr_x + 1;
	        return[{'x': curr_x * this.column_width, 'y': curr_y * this.row_height}];
	    },
	
	    calc_end_point_dest: function(curr_x, curr_y, x_direction, y_direction) {
	        curr_y = (y_direction == -1) ? curr_y : curr_y + 1;
	        curr_x = (x_direction == -1) ? curr_x : curr_x + 1;
	        return[{'x': curr_x * this.column_width, 'y': curr_y * this.row_height}];
	    },
	});
	
	module.exports = {
	    MarketMap: MarketMap,
	};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var utils = __webpack_require__(10);
	var mark = __webpack_require__(15);
	
	var GridHeatMap = mark.Mark.extend({
	
	    render: function() {
	        var base_render_promise = GridHeatMap.__super__.render.apply(this);
	        var that = this;
	
	        // TODO: create_listeners is put inside the promise success handler
	        // because some of the functions depend on child scales being
	        // created. Make sure none of the event handler functions make that
	        // assumption.
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	
	        this.selected_indices = this.model.get("selected");
	        this.selected_style = this.model.get("selected_style");
	        this.unselected_style = this.model.get("unselected_style");
	        this.anchor_style = this.model.get("anchor_style");
	        this.display_el_classes = ["heatmapcell"];
	        return base_render_promise.then(function() {
	            that.event_listeners = {};
	            that.process_interactions();
	            that.create_listeners();
	            that.compute_view_padding();
	            that.draw();
	        });
	    },
	
	    set_ranges: function() {
	        var row_scale = this.scales.row;
	        if(row_scale) {
	            // The y_range is reversed because we want the first row
	            // to start at the top of the plotarea and not the bottom.
	            var row_range = this.parent.padded_range("y", row_scale.model);
	            row_scale.set_range(row_range);
	            // row_scale.set_range([row_range[1], row_range[0]]);
	        }
	        var col_scale = this.scales.column;
	        if(col_scale) {
	            col_scale.set_range(this.parent.padded_range("x", col_scale.model));
	        }
	    },
	
	    set_positional_scales: function() {
	        var x_scale = this.scales.column, y_scale = this.scales.row;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	        this.listenTo(y_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	    },
	
	    expand_scale_domain: function(scale, data, mode, start) {
	        // This function expands the domain so that the heatmap has the
	        // minimum area needed to draw itself.
	        var current_pixels, min_diff;
	        if(mode === "expand_one") {
	            current_pixels = data.map(function(el) {
	                return scale.scale(el);
	            });
	            var diffs = current_pixels.slice(1).map(function(el, index) {
	                return el - current_pixels[index];
	            });
	            //TODO: Explain what is going on here.
	            min_diff = 0;
	            if(diffs[0] < 0) {
	                start = !(start);
	                // diffs are negative. So max instead of min
	                min_diff = d3.max(diffs);
	            } else {
	                min_diff = d3.min(diffs);
	            }
	            var new_pixel = 0;
	            if(start) {
	                new_pixel = current_pixels[current_pixels.length - 1] + min_diff;
	                return [data[0], scale.invert(new_pixel)];
	            } else {
	                new_pixel = current_pixels[0] - min_diff;
	                return [scale.invert(new_pixel), data[current_pixels.length - 1]];
	            }
	        } else if(mode === "expand_two") {
	            current_pixels = data.map(function(el) {
	                return scale.scale(el);
	            });
	            min_diff = d3.min(current_pixels.slice(1).map(function(el, index) {
	                return el - current_pixels[index];
	            }));
	            var new_end = current_pixels[current_pixels.length - 1] + min_diff;
	            var new_start = current_pixels[0] - min_diff;
	            return [scale.invert(new_start), scale.invert(new_end)];
	        }
	    },
	
	    create_listeners: function() {
	        GridHeatMap.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:stroke", this.update_stroke, this);
	        this.listenTo(this.model, "change:opacity", this.update_opacity, this);
	
	        this.d3el.on("mouseover", _.bind(function() { this.event_dispatcher("mouse_over"); }, this))
	            .on("mousemove", _.bind(function() { this.event_dispatcher("mouse_move"); }, this))
	            .on("mouseout", _.bind(function() { this.event_dispatcher("mouse_out"); }, this));
	        this.listenTo(this.model, "data_updated", this.draw, this);
	        this.listenTo(this.model, "change:tooltip", this.create_tooltip, this);
	        this.listenTo(this.parent, "bg_clicked", function() {
	            this.event_dispatcher("parent_clicked");
	        });
	        this.listenTo(this.model, "change:selected", this.update_selected);
	        this.listenTo(this.model, "change:interactions", this.process_interactions);
	    },
	
	    click_handler: function (args) {
	        var data = args.data;
	        var num_cols = this.model.colors[0].length;
	        var index = args.row_num * num_cols + args.column_num;
	        var row = args.row_num;
	        var column = args.column_num;
	        var that = this;
	        var idx = this.model.get("selected") ? utils.deepCopy(this.model.get("selected")) : [];
	        var selected = utils.deepCopy(this._cell_nums_from_indices(idx));
	        var elem_index = selected.indexOf(index);
	        var accelKey = d3.event.ctrlKey || d3.event.metaKey;
	        //TODO: This is a shim for when accelKey is supported by chrome.
	        // index of slice i. Checking if it is already present in the
	        // list
	        if(elem_index > -1 && accelKey) {
	        // if the index is already selected and if ctrl key is
	        // pressed, remove the element from the list
	            idx.splice(elem_index, 1);
	        } else {
	            if(!accelKey) {
	                selected = [];
	                idx = [];
	            }
	            idx.push([row, column]);
	            selected.push(that._cell_nums_from_indices([[row, column]])[0]);
	            if(d3.event.shiftKey) {
	                //If shift is pressed and the element is already
	                //selected, do not do anything
	                if(elem_index > -1) {
	                    return;
	                }
	                //Add elements before or after the index of the current
	                //slice which has been clicked
	                var row_index = (selected.length !== 0) ?
	                    that.anchor_cell_index[0] : row;
	                var col_index = (selected.length !== 0) ?
	                    that.anchor_cell_index[1] : column;
	                _.range(Math.min(row, row_index), Math.max(row, row_index)+1).forEach(function(i) {
	                    _.range(Math.min(column, col_index), Math.max(column, col_index)+1).forEach(function(j) {
	                        var cell_num = that._cell_nums_from_indices([[i, j]])[0];
	                        if (selected.indexOf(cell_num) === -1) {
	                            selected.push(cell_num);
	                            idx.push([i, j]);
	                        }
	                    })
	                });
	            } else {
	                // updating the array containing the slice indexes selected
	                // and updating the style
	                this.anchor_cell_index = [row, column];
	            }
	        }
	        this.model.set("selected",
	            ((idx.length === 0) ? null : idx),
	            {updated_view: this});
	        this.touch();
	        if(!d3.event) {
	            d3.event = window.event;
	        }
	        var e = d3.event;
	        if(e.cancelBubble !== undefined) { // IE
	            e.cancelBubble = true;
	        }
	        if(e.stopPropagation) {
	            e.stopPropagation();
	        }
	        e.preventDefault();
	        this.selected_indices = idx;
	        this.apply_styles();
	
	    },
	
	    update_selected: function(model, value) {
	        this.selected_indices = value;
	        this.apply_styles();
	    },
	
	    set_style_on_elements: function(style, indices, elements) {
	        // If the index array is undefined or of length=0, exit the
	        // function without doing anything
	        if(!indices || indices.length === 0 && (!elements || elements.length === 0) ) {
	            return;
	        }
	        // Also, return if the style object itself is blank
	        if(Object.keys(style).length === 0) {
	            return;
	        }
	        elements = (!elements || elements.length === 0) ? this._filter_cells_by_index(indices) : elements;
	        elements.style(style);
	    },
	
	    set_default_style: function(indices, elements) {
	        // For all the elements with index in the list indices, the default
	        // style is applied.
	        //
	
	        if(!indices || indices.length === 0 && (!elements || elements.length === 0) ) {
	            return;
	        }
	        elements = (!elements || elements.length === 0) ? this._filter_cells_by_index(indices) : elements;
	        var stroke = this.model.get("stroke");
	        var opacity = this.model.get("opacity");
	        var that = this;
	
	        elements.style("fill", function(d) {
	             return that.get_element_fill(d);
	          })
	          .style("opacity", opacity)
	          .style("stroke", stroke);
	    },
	
	    clear_style: function(style_dict, indices, elements) {
	        // Function to clear the style of a dict on some or all the elements of the
	        // chart.If indices is null, clears the style on all elements. If
	        // not, clears on only the elements whose indices are mathcing.
	        //
	        // If elements are passed, then indices are ignored and the style
	        // is cleared only on the elements that are passed.
	        //
	        // This can be used if we decide to accommodate more properties than
	        // those set by default. Because those have to cleared specifically.
	        //
	        if(Object.keys(style_dict).length === 0) {
	            // No style to clear
	            return;
	        }
	
	        if(!elements || elements.length === 0) {
	            if(indices) {
	                elements = this._filter_cells_by_index(indices);
	            } else {
	                elements = this.display_cells;
	            }
	        }
	
	        var clearing_style = {};
	        for(var key in style_dict) {
	            clearing_style[key] = null;
	        }
	        elements.style(clearing_style);
	    },
	
	    _filter_cells_by_cell_num: function(cell_numbers) {
	        if (cell_numbers === null || cell_numbers === undefined) {
	            return [];
	        }
	        return this.display_cells.filter(function(el) {
	           return (cell_numbers.indexOf(el._cell_num) !== -1);});
	    },
	
	    selected_style_updated: function(model, style) {
	        this.selected_style = style;
	        this.clear_style(model.previous("selected_style"), this.selected_indices, this.selected_elements);
	        this.style_updated(style, this.selected_indices, this.selected_elements);
	    },
	
	    unselected_style_updated: function(model, style) {
	        this.unselected_style = style;
	        this.clear_style(model.previous("unselected_style"), [], this.unselected_elements);
	        this.style_updated(style, [], this.unselected_elements);
	    },
	
	    apply_styles: function() {
	        var num_rows = this.model.colors.length;
	        var num_cols = this.model.colors[0].length;
	
	        this.clear_style(this.selected_style);
	        this.clear_style(this.unselected_style);
	        this.clear_style(this.anchor_style);
	
	        this.set_default_style([], this.display_cells);
	        var that = this;
	
	        var selected_cell_nums = this._cell_nums_from_indices(this.selected_indices);
	        var unsel_cell_nums = (selected_cell_nums === null) ? []
	                                : _.difference(_.range(num_rows*num_cols), selected_cell_nums);
	
	        this.selected_elements = this._filter_cells_by_cell_num(selected_cell_nums);
	        this.set_style_on_elements(this.selected_style, this.selected_indices, this.selected_elements);
	
	        this.unselected_elements = this._filter_cells_by_cell_num(unsel_cell_nums);
	        this.set_style_on_elements(this.unselected_style, [], this.unselected_elements);
	
	        if(this.anchor_cell_index !== null && this.anchor_cell_index !== undefined) {
	            var anchor_num = this._cell_nums_from_indices([this.anchor_cell_index]);
	            this.anchor_element = this._filter_cells_by_cell_num(anchor_num);
	            this.set_style_on_elements(this.anchor_style, [], this.anchor_element);
	        }
	    },
	
	    style_updated: function(new_style, indices, elements) {
	        // reset the style of the elements and apply the new style
	        this.set_default_style(indices, elements);
	        this.set_style_on_elements(new_style, indices, elements);
	    },
	
	    reset_selection: function() {
	        this.model.set("selected", null);
	        this.touch();
	        this.selected_indices = null;
	        this.clear_style(this.selected_style);
	        this.clear_style(this.unselected_style);
	        this.clear_style(this.anchor_style);
	
	        this.set_default_style([], this.display_cells);
	    },
	
	    relayout: function() {
	        this.set_ranges();
	        this.compute_view_padding();
	        //TODO: The call to draw has to be changed to something less
	        //expensive.
	        this.draw();
	    },
	
	    _cell_nums_from_indices: function(indices) {
	        if(indices === null || indices === undefined) {
	            return null;
	        }
	        var num_cols = this.model.colors[0].length;
	        return indices.map(function(i) { return i[0] * num_cols + i[1];});
	    },
	
	    invert_point: function(pixel) {
	        // For now, an index selector is not supported for the heatmap
	    },
	
	    selector_changed: function(point_selector, rect_selector) {
	        if(point_selector === undefined) {
	            this.model.set("selected", null);
	            this.touch();
	            return [];
	        }
	        var col_indices = _.range(this.model.colors[0].length);
	        var row_indices = _.range(this.model.colors.length);
	        var that = this;
	        var sel_cols = _.filter(col_indices, function(index) {
	            return rect_selector([that.column_pixels[index], []]);
	        });
	        var sel_rows = _.filter(row_indices, function(index) {
	            return rect_selector([[], that.row_pixels[index]]);
	        });
	        var selected = sel_cols.map(function(s) {
	            return sel_rows.map(function(r) {
	                return [r, s];
	            });
	        });
	        selected = _.flatten(selected, true);
	        this.model.set("selected", selected);
	        this.touch();
	    },
	
	    draw: function() {
	        this.set_ranges();
	
	        var that = this;
	        var num_rows = this.model.colors.length;
	        var num_cols = this.model.colors[0].length;
	
	        var row_scale = this.scales.row;
	        var column_scale = this.scales.column;
	
	        var row_start_aligned = this.model.get("row_align") === "start";
	        var col_start_aligned = this.model.get("column_align") === "start";
	        var new_domain;
	
	        if(this.model.modes.row !== "middle" && this.model.modes.row !== "boundaries") {
	            new_domain = this.expand_scale_domain(row_scale, this.model.rows, this.model.modes.row, (row_start_aligned));
	            if(d3.min(new_domain) < d3.min(row_scale.model.domain) || d3.max(new_domain) > d3.max(row_scale.model.domain)) {
	                // Update domain if domain has changed
	                row_scale.model.compute_and_set_domain(new_domain, row_scale.model.model_id);
	            }
	        }
	
	        if(this.model.modes.column !== "middle" && this.model.modes.column !== "boundaries") {
	            new_domain = this.expand_scale_domain(column_scale, this.model.columns, this.model.modes.column, col_start_aligned);
	            if(d3.min(new_domain) < d3.min(column_scale.model.domain) || d3.max(new_domain) > d3.max(column_scale.model.domain)) {
	                // Update domain if domain has changed
	                column_scale.model.compute_and_set_domain(new_domain, column_scale.model.model_id);
	            }
	        }
	
	        var row_plot_data = this.get_tile_plotting_data(row_scale, this.model.rows, this.model.modes.row, row_start_aligned);
	        var column_plot_data = this.get_tile_plotting_data(column_scale, this.model.columns, this.model.modes.column, col_start_aligned);
	
	        this.row_pixels = row_plot_data.start.map(function(d, i) {
	            return [d, d + row_plot_data.widths[i]];
	        })
	        this.column_pixels = column_plot_data.start.map(function(d, i) {
	            return [d, d + column_plot_data.widths[i]];
	        })
	
	        this.display_rows = this.d3el.selectAll(".heatmaprow")
	            .data(_.range(num_rows));
	        this.display_rows.enter().append("g")
	            .attr("class", "heatmaprow");
	        this.display_rows
	            .attr("transform", function(d) {
	                return "translate(0, " + row_plot_data.start[d] + ")";
	            });
	
	        var col_nums = _.range(num_cols);
	        var row_nums = _.range(num_rows);
	
	        var data_array = row_nums.map(function(row) {
	            return col_nums.map(function(col) {
	                return that.model.mark_data[row * num_cols + col];
	            });
	        });
	
	        this.display_cells = this.display_rows.selectAll(".heatmapcell").data(function(d, i) {
	            return data_array[i];
	        });
	        this.display_cells.enter()
	            .append("rect")
	            .attr("class", "heatmapcell")
	            .on("click", _.bind(function() {
	                this.event_dispatcher("element_clicked");
	            }, this));
	
	        var stroke = this.model.get("stroke");
	        var opacity = this.model.get("opacity");
	        this.display_cells
	            .attr({
	                "x": function(d, i) {
	                    return column_plot_data.start[i];
	                }, "y": 0
	            })
	            .attr("width", function(d, i) { return column_plot_data.widths[i]; })
	            .attr("height",function(d) { return row_plot_data.widths[d.row_num]; })
	            .style("fill", function(d) { return that.get_element_fill(d); })
	            .style({
	                "stroke": stroke,
	                "opacity": opacity
	            });
	
	        this.display_cells.on("click", function(d, i) {
	            return that.event_dispatcher("element_clicked", {
	                data: d.color,
	                index: i,
	                row_num: d.row_num,
	                column_num: d.column_num
	            });
	        });
	    },
	
	    update_stroke: function(model, value) {
	        this.display_cells.style("stroke", value);
	    },
	
	    update_opacity: function(model, value) {
	        this.display_cells.style("opacity", value);
	    },
	
	    get_tile_plotting_data: function(scale, data, mode, start) {
	        // This function returns the starting points and widths of the
	        // cells based on the parameters passed.
	        //
	        // scale is the scale and data is the data for which the plot data
	        // is to be generated. mode refers to the expansion of the data to
	        // generate the plotting data and start is a boolean indicating the
	        // alignment of the data w.r.t the cells.
	        var reversed_scale = false;
	        var start_points = [];
	        var widths = [];
	        if(mode === "middle") {
	            start_points = data.map(function(d) { return scale.scale(d); });
	            widths = data.map(function(d) { return scale.scale.rangeBand(); });
	
	            return {"start": start_points, "widths": widths};
	        }
	        if(mode === "boundaries") {
	            var pixel_points = data.map(function(d) {
	                return scale.scale(d);
	            });
	            widths = [];
	            for (var i=1; i<pixel_points.length; ++i) {
	                widths[i - 1] = Math.abs(pixel_points[i] - pixel_points[i - 1]);
	            }
	            start_points = pixel_points[1] > pixel_points[0] ?
	                pixel_points.slice(0, -1) : pixel_points.slice(1);
	            return {
	                "start": start_points,
	                "widths": widths
	            };
	        }
	        if(mode === "expand_one") {
	            var bounds;
	            if(start) {
	                // Start points remain the same as the data.
	                start_points = data.map(function(d) {
	                    return scale.scale(d);
	                });
	                widths = start_points.slice(1).map(function(d, ind) {
	                    // Absolute value is required as the order of the data
	                    // can be increasing or decreasing in terms of pixels
	                    return Math.abs(d - start_points[ind]);
	                });
	                // Now we have n-1 widths. We have to add the last or the
	                // first width depending on scale is increasing or
	                // decreasing.
	                bounds = d3.max(scale.scale.range());
	                if(start_points[0] < start_points[1]) {
	                    widths = Array.prototype.concat(widths, [Math.abs(bounds - d3.max(start_points))]);
	                } else {
	                    widths = Array.prototype.concat([Math.abs(bounds - d3.max(start_points))], widths);
	                }
	            } else {
	                start_points = data.map(function(d) {
	                    return scale.scale(d);
	                });
	                widths = start_points.slice(1).map(function(d, ind) {
	                    // Absolute value is required as the order of the data
	                    // can be increasing or decreasing in terms of pixels
	                    return Math.abs(d - start_points[ind]);
	                });
	                bounds = d3.min(scale.scale.range());
	                bounds = d3.min(scale.scale.range());
	                if(start_points[1] > start_points[0]) {
	                    // The point corresponding to the bounds is added at
	                    // the start of the array. Hence it has to be added to
	                    // the start_points and the last start_point can be
	                    // removed.
	                    start_points.splice(0, 0, Math.abs(0, 0, bounds));
	                    widths.splice(0, 0, start_points[1] - start_points[0]);
	                    start_points.splice(-1, 1);
	                } else {
	                    // The point for the bounds is added to the end of the
	                    // array. The first start point can now be removed as
	                    // this will be the last end point.
	                    widths = Array.prototype.concat(widths, [Math.abs(bounds - start_points.slice(-1)[0])]);
	                    start_points = Array.prototype.concat(start_points, bounds);
	                    start_points.splice(0, 1);
	                }
	            }
	            return {
	                "widths": widths,
	                "start": start_points
	            };
	        }
	        if(mode === "expand_two") {
	            start_points = data.map(function(d) {
	                return scale.scale(d);
	            });
	
	            var is_positive = (start_points[1] - start_points[0]) > 0;
	            var bound = (is_positive) ? d3.min(scale.scale.range()) : d3.max(scale.scale.range());
	            start_points.splice(0, 0, bound);
	            widths = start_points.slice(1).map(function(d, ind) {
	                return Math.abs(d - start_points[ind]);
	            });
	            bound = (is_positive) ? d3.max(scale.scale.range()) : d3.min(scale.scale.range());
	            widths[widths.length] = Math.abs(bound - start_points.slice(-1)[0]);
	            return {"start": start_points, "widths": widths};
	        }
	    },
	
	    get_element_fill: function(dat) {
	        if (dat.color === null) {
	            return this.model.get("null_color")
	        }
	        return this.scales.color.scale(dat.color);
	    },
	
	    process_interactions: function() {
	        var interactions = this.model.get("interactions");
	        if(_.isEmpty(interactions)) {
	            //set all the event listeners to blank functions
	            this.reset_interactions();
	        } else {
	            if(interactions.click !== undefined &&
	              interactions.click !== null) {
	                if(interactions.click === "tooltip") {
	                    this.event_listeners.element_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                } else if (interactions.click == 'select') {
	                    this.event_listeners.parent_clicked = this.reset_selection;
	                    this.event_listeners.element_clicked = this.click_handler;
	                }
	            } else {
	                this.reset_click();
	            }
	            if(interactions.hover !== undefined &&
	              interactions.hover !== null) {
	                if(interactions.hover === "tooltip") {
	                    this.event_listeners.mouse_over = this.refresh_tooltip;
	                    this.event_listeners.mouse_move = this.move_tooltip;
	                    this.event_listeners.mouse_out = this.hide_tooltip;
	                }
	            } else {
	                this.reset_hover();
	            }
	        }
	    },
	});
	
	module.exports = {
	    GridHeatMap: GridHeatMap,
	};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var d3 = __webpack_require__(8);
	var basemodel = __webpack_require__(13);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var MarketMapModel = basemodel.BaseModel.extend({
	
	    defaults: function() {
	        return _.extend(basemodel.BaseModel.prototype.defaults(), {
	            _model_name: "MarketMapModel",
	            _view_name: "MarketMap",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	
	            map_width: 1080,
	            map_height: 800,
	
	            names: [],
	            groups: [],
	            display_text: [],
	            ref_data: undefined,
	            title: "",
	
	            tooltip_fields: [],
	            tooltip_formats: [],
	            show_groups: false,
	
	            cols: 0,
	            rows: 0,
	
	            row_groups: 1,
	            colors: d3.scale.category20().range(),
	            scales: {},
	            axes: [],
	            color: [],
	            map_margin: {
	                top: 50,
	                right: 50,
	                left: 50,
	                bottom: 50
	            },
	            preserve_aspect: false,
	            stroke: "white",
	            group_stroke: "black",
	            selected_stroke: "dodgerblue",
	            hovered_stroke: "orangered",
	            font_style: {},
	            title_style: {},
	
	            selected: [],
	            enable_hover: true,
	            enable_select: true,
	            tooltip_widget: null
	        });
	    }
	}, {
	    serializers: _.extend({
	        scales: { deserialize: widgets.unpack_models },
	        axes: { deserialize: widgets.unpack_models },
	        tooltip_widget: { deserialize: widgets.unpack_models },
	        style: { deserialize: widgets.unpack_models },
	        layout:  { deserialize: widgets.unpack_models }
	    }, basemodel.BaseModel.serializers)
	});
	
	module.exports = {
	    MarketMapModel: MarketMapModel
	};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var utils = __webpack_require__(10);
	var mark = __webpack_require__(15);
	
	var HeatMap = mark.Mark.extend({
	
	    render: function() {
	        var base_render_promise = HeatMap.__super__.render.apply(this);
	        var that = this;
	
	        // TODO: create_listeners is put inside the promise success handler
	        // because some of the functions depend on child scales being
	        // created. Make sure none of the event handler functions make that
	        // assumption.
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	
	        this.image = d3.select(this.el)
	            .append("image")
	            .classed("heatmap", true)
	            .attr("width", this.parent.width)
	            .attr("height", this.parent.height);
	
	        this.canvas = document.createElement("canvas");
	
	        return base_render_promise.then(function() {
	            that.event_listeners = {};
	            that.process_interactions();
	            that.create_listeners();
	            that.compute_view_padding();
	            that.draw();
	        });
	    },
	
	    set_ranges: function() {
	        var x_scale = this.scales.x;
	        if(x_scale) {
	            var x_range = this.parent.padded_range("x", x_scale.model);
	            x_scale.set_range(x_range);
	        }
	        var y_scale = this.scales.y;
	        if(y_scale) {
	            y_scale.set_range(this.parent.padded_range("y", y_scale.model));
	        }
	    },
	
	    set_positional_scales: function() {
	        var x_scale = this.scales.x, y_scale = this.scales.y;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	        this.listenTo(y_scale, "domain_changed", function() {
	            if (!this.model.dirty) { this.draw(); }
	        });
	    },
	
	    initialize_additional_scales: function() {
	        var color_scale = this.scales.color;
	        if(color_scale) {
	            this.listenTo(color_scale, "domain_changed", function() {
	                this.draw();
	            });
	            color_scale.on("color_scale_range_changed", this.draw, this);
	        }
	    },
	
	    create_listeners: function() {
	        HeatMap.__super__.create_listeners.apply(this);
	
	        this.d3el.on("mouseover", _.bind(function() { this.event_dispatcher("mouse_over"); }, this))
	            .on("mousemove", _.bind(function() { this.event_dispatcher("mouse_move"); }, this))
	            .on("mouseout", _.bind(function() { this.event_dispatcher("mouse_out"); }, this));
	        this.listenTo(this.model, "data_updated", this.draw, this);
	        this.listenTo(this.model, "change:tooltip", this.create_tooltip, this);
	        this.listenTo(this.parent, "bg_clicked", function() {
	            this.event_dispatcher("parent_clicked");
	        });
	        this.listenTo(this.model, "change:interactions", this.process_interactions);
	    },
	
	    click_handler: function (args) {},
	
	    process_interactions: function (args) {},
	
	    relayout: function() {
	        this.set_ranges();
	        this.compute_view_padding();
	        this.draw();
	    },
	
	    draw_canvas: function() {
	        this.image.attr("href", this.canvas.toDataURL("image/png"));
	    },
	
	    draw: function() {
	        this.set_ranges();
	        var that = this;
	
	        var x_plot_data = this.get_x_plotting_data(this.model.mark_data.x);
	        var y_plot_data = this.get_y_plotting_data(this.model.mark_data.y);
	
	        this.canvas.setAttribute("width", x_plot_data.total_width);
	        this.canvas.setAttribute("height", y_plot_data.total_height);
	
	        var ctx = this.canvas.getContext("2d");
	        var colors = this.model.mark_data.color;
	        colors.forEach(function(row, i) {
	            var height = y_plot_data.heights[i];
	            var y = y_plot_data.start[i];
	            row.forEach(function(d, j) {
	                var width = x_plot_data.widths[j];
	                var x = x_plot_data.start[j];
	                ctx.fillStyle = that.get_element_fill(d);
	                // add .5 to width and height to fill gaps
	                ctx.fillRect(x, y, width+.5, height+.5);
	            })
	        })
	        this.image.attr("width", x_plot_data.total_width)
	            .attr("height", y_plot_data.total_height)
	            .attr("x", x_plot_data.x0)
	            .attr("y", y_plot_data.y0);
	        this.draw_canvas();
	    },
	
	    get_x_plotting_data: function(data) {
	        // This function returns the starting points and widths of the
	        // cells based on the parameters passed.
	        //
	        // data is the data for which the plot data is to be generated.
	        var scaled_data = data.map(this.scales.x.scale);
	        var x_padding = this.get_x_padding(scaled_data);
	        var num_cols = data.length;
	
	        var widths = scaled_data.map(function(d, i) {
	            if (i == 0) {
	                return (scaled_data[1] - d) * 0.5 + x_padding.left;
	            }
	            else if (i == num_cols - 1) {
	                return (d - scaled_data[i - 1]) * 0.5 + x_padding.right;
	            }
	            else {
	                return (scaled_data[i + 1] - scaled_data[i - 1]) * 0.5;
	            }
	        });
	
	        var x0 = scaled_data[0] - x_padding.left;
	        var start_points = scaled_data.map(function(d, i) {
	            if (i == 0) { return 0; }
	            else { return (d + scaled_data[i - 1]) * 0.5 - x0; }
	        });
	
	        var total_width = (scaled_data[num_cols-1] - scaled_data[0]) +
	                           x_padding.left + x_padding.right;
	
	        return {
	            "widths": widths,
	            "total_width": total_width,
	            "start": start_points,
	            "x0": x0
	        };
	    },
	
	    get_x_padding: function(scaled_data) {
	        var num_cols = scaled_data.length;
	        return {
	            left: (scaled_data[1] - scaled_data[0]) * 0.5,
	            right: (scaled_data[num_cols-1] - scaled_data[num_cols-2]) * 0.5
	        };
	    },
	
	    get_y_plotting_data: function(data) {
	        // This function returns the starting points and heights of the
	        // cells based on the parameters passed.
	        //
	        //  data is the data for which the plot data is to be generated.
	        var scaled_data = data.map(this.scales.y.scale);
	        var y_padding = this.get_y_padding(scaled_data);
	        var num_rows = data.length;
	
	        var heights = scaled_data.map(function(d, i) {
	            if (i == 0) {
	                return -(scaled_data[1] - d) * 0.5 + y_padding.bottom;
	            }
	            else if (i == num_rows - 1) {
	                return -(d - scaled_data[i - 1]) * 0.5 + y_padding.top;
	            }
	            else {
	                return -(scaled_data[i + 1] - scaled_data[i - 1]) * 0.5;
	            }
	        });
	
	        var y0 = scaled_data[num_rows - 1] - y_padding.top
	        var start_points = scaled_data.map(function(d, i) {
	            if (i == num_rows - 1) { return 0; }
	            else { return (d + scaled_data[i + 1]) * 0.5 - y0; }
	        });
	
	        var total_height = (scaled_data[0] - scaled_data[num_rows-1]) +
	                            y_padding.top + y_padding.bottom;
	
	        return {
	            "heights": heights,
	            "total_height": total_height,
	            "start": start_points,
	            "y0": y0
	        };
	    },
	
	    get_y_padding: function(scaled_data) {
	        var num_rows = scaled_data.length;
	        return {
	            bottom: -(scaled_data[1] - scaled_data[0]) * 0.5,
	            top: -(scaled_data[num_rows-1] - scaled_data[num_rows-2]) * 0.5
	        };
	    },
	
	    get_element_fill: function(color) {
	        if (color === null) {
	            return this.model.get("null_color")
	        }
	        return this.scales.color.scale(color);
	    },
	});
	
	module.exports = {
	    HeatMap: HeatMap,
	};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var HeatMapModel = markmodel.MarkModel.extend({
	
	    defaults: _.extend({}, markmodel.MarkModel.prototype.defaults, {
	        _model_name: "HeatMapModel",
	        _view_name: "HeatMap",
	        x: [],
	        y: [],
	        color: null,
	        scales_metadata: {
	            x: { orientation: "horizontal", dimension: "x" },
	            y: { orientation: "vertical", dimension: "y" },
	            color: { dimension: "color" }
	        },
	        null_color: "black",
	    }),
	
	    initialize: function() {
	        HeatMapModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["x", "y", "color"], this.update_data, this);
	        // FIXME: replace this with on("change:preserve_domain"). It is not done here because
	        // on_some_change depends on the GLOBAL backbone on("change") handler which
	        // is called AFTER the specific handlers on("change:foobar") and we make that
	        // assumption.
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.update_data();
	        this.update_domains();
	    },
	
	    update_data: function() {
	        this.dirty = true;
	        // Handling data updates
	        this.mark_data = {
	            x: this.get_typed_field("x"),
	            y: this.get_typed_field("y"),
	            color: this.get_typed_field("color")
	        }
	        this.update_domains();
	        this.dirty = false;
	        this.trigger("data_updated");
	    },
	
	    update_domains: function() {
	        if (!this.mark_data) { return; }
	
	        var scales = this.get("scales");
	        var x_scale = scales.x, y_scale = scales.y;
	        var color_scale = scales.color;
	        var flat_colors = [].concat.apply([], this.mark_data.color);
	
	        if(!this.get("preserve_domain").x) {
	            x_scale.compute_and_set_domain(this.mark_data.x, this.model_id + "_x");
	        } else {
	            x_scale.del_domain([], this.model_id + "_x");
	        }
	
	        if(!this.get("preserve_domain").y) {
	            y_scale.compute_and_set_domain(this.mark_data.y, this.model_id + "_y");
	        } else {
	            y_scale.del_domain([], this.model_id + "_y");
	        }
	        if(color_scale !== null && color_scale !== undefined) {
	            if(!this.get("preserve_domain").color) {
	                color_scale.compute_and_set_domain(flat_colors, this.model_id + "_color");
	            } else {
	                color_scale.del_domain([], this.model_id + "_color");
	            }
	        }
	    },
	
	    get_data_dict: function(data, index) {
	        return data;
	    },
	});
	
	module.exports = {
	    HeatMapModel: HeatMapModel
	};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var _ = __webpack_require__(9);
	var semver_range = "^" + __webpack_require__(14).version;
	
	var ToolbarModel = widgets.DOMWidgetModel.extend({
	
	    defaults: function() {
	        return _.extend(widgets.DOMWidgetModel.prototype.defaults(), {
	            _model_name: "ToolbarModel",
	            _view_name: "Toolbar",
	            _model_module: "bqplot",
	            _view_module: "bqplot",
	            _model_module_version: semver_range,
	            _view_module_version: semver_range,
	
	            figure: undefined,
	            _panning: false,
	            _panzoom: null
	        });
	    },
	
	    // Backbone attributes:
	    // - _panning: Bool
	    //       Whether one is currently panning - zooming the specified figure.
	    // - _panzoom: Instance of Panzoom or undefined:
	    //       The created panzoom interaction. It is undefined at first.
	    // Attributes:
	    // - cached_interaction: Instance of Interaction or null or undefined.
	    //   The cached interaction of the Figure. It is undefined at first
	    //   and can take the value of the figure interaction, which can be
	    //   null.
	    panzoom: function() {
	        var figure = this.get("figure");
	        if (this.get("_panning")) {
	            if (figure) {
	                figure.set("interaction", this.cached_interaction);
	                figure.save_changes();
	            }
	            this.set("_panning", false);
	            this.save_changes();
	        } else {
	            if (figure) {
	                this.cached_interaction = figure.get("interaction");
	                var that = this;
	                var panzoom = this.get("_panzoom");
	                if (panzoom) {
	                    figure.set("interaction", panzoom);
	                    figure.save_changes();
	                } else {
	                    this._create_panzoom_model(figure).then(function (model) {
	                        that.set("_panzoom", model);
	                        that.save_changes();
	                        figure.set("interaction", model);
	                        figure.save_changes();
	                    })
	                }
	            }
	            this.set("_panning", true);
	            this.save_changes();
	        }
	    },
	
	    reset: function() {
	        /**
	         * Reset the scales, delete the PanZoom widget, set the figure
	         * interaction back to its previous value.
	         */
	        var figure = this.get("figure");
	        var panning = this.get("_panning");
	        if (figure) {
	            figure.set("interaction", this.cached_interaction);
	            figure.save_changes();
	            var panzoom = this.get("_panzoom");
	            // Should reset_scales be part of PanZoomModel.close()?
	            panzoom.reset_scales()
	            panzoom.close();
	            this.set("_panzoom", null);
	            this.set("_panning", false);
	            this.save_changes();
	        }
	    },
	
	    save_png: function() {
	        /**
	         * Triggers the saving for all the views of that figure.
	         */
	        // TODO: the toolbar view needs to be associated with a Figure
	        // view to avoid calling a model method here.
	        var figure = this.get("figure");
	        if (figure) {
	            figure.save_png();
	        }
	     },
	
	    _create_panzoom_model: function(figure) {
	        /**
	         * Creates a panzoom interaction widget for the specified figure.
	         *
	         * It will discover the relevant scales for the specified figure.
	         */
	        return this.widget_manager.new_widget({
	            model_name: "PanZoomModel",
	            model_module: "bqplot",
	            model_module_version: figure.get("_model_module_version"),
	            view_name: "PanZoom",
	            view_module: "bqplot",
	            view_module_version: figure.get("_view_module_version")
	        }).then(function(model) {
	            return Promise.all(figure.get("marks")).then(function(marks) {
	                var x_scales = [], y_scales = [];
	                for (var i=0; i<marks.length; ++i) {
	                    var preserve_domain = marks[i].get("preserve_domain");
	                    var scales = marks[i].get("scales");
	                    _.each(scales, function(v, k) {
	                        var dimension = marks[i].get("scales_metadata")[k]["dimension"];
	                        if (dimension === "x" && !preserve_domain[k]) {
	                             x_scales.push(scales[k]);
	                        }
	                        if (dimension === "y" && !preserve_domain[k]) {
	                             y_scales.push(scales[k]);
	                        }
	                    });
	                }
	                model.set("scales", {
	                    "x": x_scales,
	                    "y": y_scales
	                });
	                model.save_changes();
	                return model;
	            });
	        });
	    },
	}, {
	    serializers: _.extend({
	        figure: { deserialize: widgets.unpack_models },
	        _panzoom: { deserialize: widgets.unpack_models },
	    }, widgets.DOMWidgetModel.serializers)
	});
	
	var Toolbar = widgets.DOMWidgetView.extend({
	
	    render: function() {
	        var that = this;
	        this.el.classList.add("jupyter-widget"); // @jupyter-widgets/controls css
	        this.el.classList.add("widget-hbox"); // @jupyter-widgets/controls css
	
	        // We use @jupyter-widgets/controls css classes (ipywidget and widget-*-*) to
	        // benefit from default width, shadows.
	        // We do not use btn-group to not break alignment with jupyter
	        // buttons.
	
	        // Create the buttons
	        var _panzoom = document.createElement("button");
	        _panzoom.classList.add("jupyter-widgets"); // @jupyter-widgets/controls css
	        _panzoom.classList.add("jupyter-button"); // @jupyter-widgets/controls css
	        _panzoom.classList.add("widget-toggle-button") // @jupyter-widgets/controls css
	        _panzoom.setAttribute("data-toggle", "tooltip");
	        _panzoom.setAttribute("title", "PanZoom");
	        _panzoom.onclick = function (e) {
	            e.preventDefault();
	            that.model.panzoom();
	        };
	        var panzoomicon = document.createElement("i");
	        panzoomicon.className = "fa fa-arrows";
	        _panzoom.appendChild(panzoomicon);
	
	        var _reset = document.createElement("button");
	        _reset.classList.add("jupyter-widgets"); // @jupyter-widgets/controls css
	        _reset.classList.add("jupyter-button"); // @jupyter-widgets/controls css
	        _reset.classList.add("widget-button") // @jupyter-widgets/controls css
	        _reset.setAttribute("data-toggle", "tooltip");
	        _reset.setAttribute("title", "Reset");
	        _reset.onclick = function (e) {
	            e.preventDefault();
	            that.model.reset();
	        };
	        var refreshicon = document.createElement("i");
	        refreshicon.className = "fa fa-refresh";
	        _reset.appendChild(refreshicon);
	
	        var _save = document.createElement("button");
	        _save.classList.add("jupyter-widgets"); // @jupyter-widgets/controls css
	        _save.classList.add("jupyter-button"); // @jupyter-widgets/controls css
	        _save.classList.add("widget-button") // @jupyter-widgets/controls css
	        _save.setAttribute("data-toggle", "tooltip");
	        _save.setAttribute("title", "Save");
	        _save.onclick = function (e) {
	            e.preventDefault();
	            that.model.save_png();
	        };
	        var saveicon = document.createElement("i");
	        saveicon.className = "fa fa-save";
	        _save.appendChild(saveicon);
	
	        this.el.appendChild(_panzoom);
	        this.el.appendChild(_reset);
	        this.el.appendChild(_save);
	
	        // Handle initial state
	        this._panzoom = _panzoom;
	        this.update();
	    },
	
	    update: function() {
	        if (this.model.get("_panning")) {
	            this._panzoom.classList.add("mod-active");
	        } else {
	            this._panzoom.classList.remove("mod-active");
	        }
	    }
	});
	
	module.exports = {
	    Toolbar: Toolbar,
	    ToolbarModel: ToolbarModel
	};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var GraphModel = markmodel.MarkModel.extend({
	    defaults: function() {
	        return _.extend({}, markmodel.MarkModel.prototype.defaults, {
	        _model_name: "GraphModel",
	        _view_name: "Graph",
	
	        x: [],
	        y: [],
	        color: null,
	        hovered_point: null,
	        scales_metadata: {
	            x: { orientation: "horizontal", dimension: "x" },
	            y: { orientation: "vertical", dimension: "y" },
	            color: { dimension: "color" }
	        },
	        colors: [],
	        });
	    },
	
	    initialize: function() {
	        GraphModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(["x", "y", "color", "link_color",
	                             "node_data", "link_data", "link_color", ],
	                            this.update_data, this);
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.update_data();
	    },
	
	    update_node_data: function() {
	        var node_data = this.get("node_data"),
	            x = this.get_typed_field("x"),
	            y = this.get_typed_field("y"),
	            color = this.get_typed_field("color"),
	
	            scales = this.get("scales"),
	            x_scale = scales.x,
	            y_scale = scales.y,
	            color_scale = scales.color;
	
	        function get_shape_attrs(shape, attrs) {
	            var new_attrs = {};
	            switch (shape) {
	                case "circle":
	                    new_attrs.r = attrs.r || 15;
	                    break;
	                case "rect":
	                    new_attrs.width = attrs.width || 25;
	                    new_attrs.height = attrs.height || new_attrs.width * 0.8;
	                    new_attrs.rx = attrs.rx || 0;
	                    new_attrs.ry = attrs.ry || 0;
	                    break;
	                case "ellipse":
	                    new_attrs.rx = attrs.rx || 20;
	                    new_attrs.ry = attrs.ry || new_attrs.rx * 0.6;
	                    break;
	                default:
	                    console.log("Invalid shape passed - ", shape);
	                }
	            return new_attrs;
	        }
	
	        if (node_data.length > 0 && typeof node_data[0] === "string") {
	            node_data = node_data.map(function(d) { return {label: d}; });
	        }
	
	        this.mark_data = [];
	        var that = this;
	        //populate mark data from node data with meaningful defaults filled in
	        node_data.forEach(function(d, i) {
	            d.label = d.label || "N" + i;
	            d.label_display = d.label_display || "center";
	            d.shape = d.shape || "circle";
	            d.shape_attrs = get_shape_attrs(d.shape, d.shape_attrs || {});
	            d.value = d.value || null;
	            that.mark_data.push(d);
	        });
	
	        // also add x, y and color fields
	        if (x.length !== 0 && y.length !== 0) {
	            if (color_scale) {
	                if (!this.get("preserve_domain").color) {
	                    color_scale.compute_and_set_domain(color,
	                                                       this.model_id + "_color");
	                } else {
	                    color_scale.del_domain([], this.model_id + "_color");
	                }
	            }
	
	            this.mark_data.forEach(function(d, i) {
	                d.xval = x[i];
	                d.yval = y[i];
	                d.color = color[i];
	            });
	        }
	    },
	
	    update_link_data: function() {
	        var link_color_scale = this.get("scales").link_color;
	        this.link_data = this.get("link_data");
	        var link_matrix = this.get_typed_field("link_matrix");
	        var link_color = this.get_typed_field("link_color");
	        var that = this;
	
	        if (link_color_scale !== undefined && link_color.length > 0) {
	            link_matrix = link_color;
	        }
	
	        //coerce link matrix into format understandable by d3 force layout
	        if (this.link_data.length === 0 && link_matrix.length > 0) {
	            link_matrix.forEach(function(d, i) {
	                d.forEach(function(e, j) {
	                    if (e !== null) {
	                        that.link_data.push({source: i, target: j, value: e});
	                    }
	                });
	            });
	        }
	    },
	
	    update_data: function() {
	        this.dirty = true;
	        this.update_node_data();
	        this.update_link_data();
	        this.update_unique_ids();
	        this.update_domains();
	        this.dirty = false;
	        this.trigger("data_updated");
	    },
	
	    update_unique_ids: function() {},
	
	    get_data_dict: function(data, index) {
	        return data;
	    },
	
	    update_domains: function() {
	        var data_scale_key_map = {x: 'xval', y: 'yval'};
	
	        if (!this.mark_data) {
	            return;
	        }
	
	        var scales = this.get("scales");
	        for (var key in scales) {
	            if (scales.hasOwnProperty(key)) {
	                var scale = scales[key];
	                if (!this.get("preserve_domain")[key]) {
	                    scale.compute_and_set_domain(this.mark_data.map(function(d) {
	                        return d[key] || d[data_scale_key_map[key]];
	                    }), this.model_id + key);
	                } else {
	                    scale.del_domain([], this.model_id + key);
	                }
	            }
	       }
	    }
	});
	
	module.exports = {
	    GraphModel: GraphModel
	};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var utils = __webpack_require__(10);
	var mark = __webpack_require__(15);
	
	var min_size = 10;
	
	var Graph = mark.Mark.extend({
	    render: function() {
	        var base_creation_promise = Graph.__super__.render.apply(this);
	
	        var that = this;
	        this.selected_style = this.model.get("selected_style");
	        this.unselected_style = this.model.get("unselected_style");
	        this.selected_indices = this.model.get("selected");
	
	        this.hovered_style = this.model.get("hovered_style");
	        this.unhovered_style = this.model.get("unhovered_style");
	        this.hovered_index = !this.model.get("hovered_point") ? null: [this.model.get("hovered_point")];
	
	        this.display_el_classes = ["element"];
	        this.event_metadata = {
	            "mouse_over": {
	                "msg_name": "hover",
	                "lookup_data": false,
	                "hit_test": true
	            },
	            "element_clicked": {
	                "msg_name": "element_click",
	                "lookup_data": false,
	                "hit_test": true
	            },
	            "parent_clicked": {
	                "msg_name": "background_click",
	                "hit_test": false
	            }
	        };
	        this.displayed.then(function() {
	            that.parent.tooltip_div.node().appendChild(that.tooltip_div.node());
	            that.create_tooltip();
	        });
	
	        this.d3el.attr("class", "network");
	
	        this.arrow = this.parent.svg.append("defs")
	            .append("marker")
	            .attr("id", "arrow")
	            .attr("refX", 0)
	            .attr("refY", 3)
	            .attr("markerWidth", 10)
	            .attr("markerHeight", 10)
	            .attr("orient", "auto")
	            .append("path")
	            .attr("class", "linkarrow")
	            .attr("d", "M0,0 L0,6 L9,3 z");
	
	        return base_creation_promise.then(function() {
	            that.event_listeners = {};
	            that.process_interactions();
	            that.create_listeners();
	            that.compute_view_padding();
	            that.draw();
	        });
	    },
	
	    set_ranges: function() {
	        var x_scale = this.scales.x,
	            y_scale = this.scales.y;
	        if (x_scale) {
	            x_scale.set_range(this.parent.padded_range("x", x_scale.model));
	        }
	        if (y_scale) {
	            y_scale.set_range(this.parent.padded_range("y", y_scale.model));
	        }
	    },
	
	    set_positional_scales: function() {
	        this.x_scale = this.scales.x;
	        this.y_scale = this.scales.y;
	
	        // If no scale for "x" or "y" is specified, figure scales are used.
	        if (!this.x_scale) {
	            this.x_scale = this.parent.scale_x;
	        }
	        if (!this.y_scale) {
	            this.y_scale = this.parent.scale_y;
	        }
	
	        this.listenTo(this.x_scale, "domain_changed", function() {
	            if (!this.model.dirty) {
	                this.update_position(); }
	        });
	        this.listenTo(this.y_scale, "domain_changed", function() {
	            if (!this.model.dirty) {
	                this.update_position(); }
	        });
	    },
	
	    relayout: function() {
	        this.set_ranges();
	        this.update_position();
	    },
	
	    update_position: function() {
	        var x_scale = this.scales.x,
	            y_scale = this.scales.y;
	        this.set_ranges();
	
	        var that = this;
	        if (x_scale && y_scale) {
	            // set x and y positions on mark data manually
	            // and redraw the force layout
	            this.model.mark_data.forEach(function(d) {
	                d.x = x_scale.scale(d.xval) + x_scale.offset;
	                d.y = y_scale.scale(d.yval) + y_scale.offset;
	            });
	
	            if (this.force_layout) {
	                 this.force_layout
	                    .nodes(this.model.mark_data)
	                    .links(this.model.link_data)
	                    .start();
	
	                if (this.links) {
	                    this.links.data(this.force_layout.links());
	                }
	                if (this.nodes) {
	                    this.nodes.data(this.force_layout.nodes());
	                }
	
	                if (this.nodes && this.links) {
	                    this.tick();
	                }
	            }
	        }
	    },
	
	    initialize_additional_scales: function() {
	        var color_scale = this.scales.color;
	        if (color_scale) {
	            this.listenTo(color_scale, "domain_changed", function() {
	                this.color_scale_updated();
	            });
	            color_scale.on("color_scale_range_changed",
	                            this.color_scale_updated, this);
	        }
	
	        var link_color_scale = this.scales.link_color;
	        if (link_color_scale) {
	            this.listenTo(link_color_scale, "domain_changed", function() {
	                this.link_color_scale_updated();
	            });
	        }
	    },
	
	    create_listeners: function() {
	        Graph.__super__.create_listeners.apply(this);
	        this.d3el.on("mouseover", _.bind(function() {
	              this.event_dispatcher("mouse_over");
	          }, this))
	          .on("mousemove", _.bind(function() {
	              this.event_dispatcher("mouse_move");
	          }, this))
	          .on("mouseout", _.bind(function() {
	              this.event_dispatcher("mouse_out");
	          }, this));
	
	        this.listenTo(this.model, "change:charge", this.update_charge);
	        this.listenTo(this.model, "change:link_distance", this.update_link_distance);
	        this.listenTo(this.model, "data_updated", this.data_updated, this);
	        this.listenTo(this.model, "change:tooltip", this.create_tooltip, this);
	        this.listenTo(this.model, "change:enable_hover", function() { this.hide_tooltip(); }, this);
	        this.listenTo(this.model, "change:interactions", this.process_interactions);
	        this.listenTo(this.model, "change:selected", this.update_selected);
	        this.listenTo(this.model, "change:hovered_point", this.update_hovered);
	        this.listenTo(this.model, "change:hovered_style", this.hovered_style_updated, this);
	        this.listenTo(this.model, "change:unhovered_style", this.unhovered_style_updated, this);
	
	        this.listenTo(this.parent, "bg_clicked", function() {
	            this.event_dispatcher("parent_clicked");
	        });
	    },
	
	    data_updated: function() {
	        this.draw();
	        this.relayout();
	    },
	
	    get_node_color: function(data, index) {
	        var color_scale = this.scales.color;
	        var colors = this.model.get("colors");
	        var len = colors.length;
	        if (color_scale && data.color !== undefined) {
	            return color_scale.scale(data.color);
	        }
	        return colors[index % len];
	    },
	
	    draw: function() {
	        this.set_ranges();
	        var x_scale = this.scales.x,
	            y_scale = this.scales.y,
	            color_scale = this.scales.color,
	            link_color_scale = this.scales.link_color;
	
	        // clean up the old graph
	        this.d3el.selectAll(".node").remove();
	        this.d3el.selectAll(".link").remove();
	
	        this.force_layout = d3.layout.force()
	            .size([this.parent.width, this.parent.height])
	            .linkDistance(this.model.get("link_distance"));
	
	        if (x_scale && y_scale) {
	            //set x and y on mark data manually
	            this.model.mark_data.forEach(function(d) {
	                d.x = x_scale.scale(d.xval) + x_scale.offset;
	                d.y = y_scale.scale(d.yval) + y_scale.offset;
	            });
	        }
	
	        this.force_layout
	            .nodes(this.model.mark_data)
	            .links(this.model.link_data);
	
	        if (!x_scale && !y_scale) {
	            this.force_layout
	                .charge(this.model.get("charge"))
	                .on("tick", _.bind(this.tick, this))
	                .start();
	        }
	
	        var directed = this.model.get("directed");
	
	        this.links = this.d3el.selectAll(".link")
	            .data(this.force_layout.links())
	            .enter().append("path")
	            .attr("class", "link")
	            .style("stroke", function(d) {
	                return link_color_scale ? link_color_scale.scale(d.value) : null;
	            })
	            .style("stroke-width", function(d) { return d.link_width; })
	            .attr("marker-mid", directed ? "url(#arrow)" : null);
	
	        var that = this;
	        this.nodes = this.d3el.selectAll(".node")
	            .data(this.force_layout.nodes())
	            .enter().append("g")
	            .attr("class", "node")
	            .call(this.force_layout.drag);
	
	        this.nodes
	            .append(function(d) {
	                return document.createElementNS(d3.ns.prefix.svg, d.shape);
	            })
	            .attr("class", "element")
	            .each(function(d) {
	                var node = d3.select(this);
	                for(var key in d.shape_attrs) {
	                    node.attr(key, d.shape_attrs[key]);
	                }
	            })
	            .style("fill", function(d, i) {
	                return that.get_node_color(d, i);
	            });
	
	        this.nodes.append("text")
	            .attr("class", "label")
	            .attr("text-anchor", function(d) {
	                return d.label_display === "center" ? "middle": "start";
	            })
	            .attr("x", function(d) {
	                var xloc = 0;
	                if (d.label_display === "outside") {
	                    switch (d.shape) {
	                        case "rect":
	                            xloc = d.shape_attrs.width / 2 + 5;
	                            break;
	                        case "circle":
	                            xloc = d.shape_attrs.r + 5;
	                            break;
	                        case "ellipse":
	                            xloc = d.shape_attrs.rx + 5;
	                            break;
	                        default:
	                            xloc = 0;
	                    }
	                }
	                return xloc;
	            })
	            .attr("y", ".31em")
	            .text(function(d) { return d.label; })
	            .style("display", function(d) {
	                return d.label_display === "none" ? "none" : "inline";
	            });
	
	        this.nodes.on("click", _.bind(function(d, i) {
	            this.event_dispatcher("element_clicked",
	                  {"data": d, "index": i});
	        }, this));
	        this.nodes.on("mouseover", _.bind(function(d, i) {
	            this.hover_handler({"data": d, "index": i});
	        }, this));
	        this.nodes.on("mouseout", _.bind(function() {
	            this.reset_hover();
	        }, this));
	    },
	
	    color_scale_updated: function() {
	        var that = this;
	        this.nodes
	            .selectAll(".element")
	            .style("fill", function(d, i) {
	                return that.get_node_color(d, i);
	            });
	    },
	
	    link_color_scale_updated: function() {
	        var link_color_scale = this.scales.link_color;
	
	        this.links.style("stroke", function(d) {
	            return link_color_scale ? link_color_scale.scale(d.value) : null;
	        });
	    },
	
	    process_interactions: function() {
	        var interactions = this.model.get("interactions");
	        if(_.isEmpty(interactions)) {
	            //set all the event listeners to blank functions
	            this.reset_interactions();
	        } else {
	            if(interactions.click !== undefined &&
	               interactions.click !== null) {
	                if(interactions.click === "tooltip") {
	                    this.event_listeners.element_clicked = function() {
	                        return this.refresh_tooltip(true);
	                    };
	                    this.event_listeners.parent_clicked = this.hide_tooltip;
	                } else if (interactions.click == "select") {
	                    this.event_listeners.parent_clicked = this.reset_selection;
	                    this.event_listeners.element_clicked = this.click_handler;
	                }
	            } else {
	                this.reset_click();
	            }
	            if(interactions.hover !== undefined &&
	              interactions.hover !== null) {
	                if(interactions.hover === "tooltip") {
	                    this.event_listeners.mouse_over = this.refresh_tooltip;
	                    this.event_listeners.mouse_move = this.move_tooltip;
	                    this.event_listeners.mouse_out = this.hide_tooltip;
	                }
	            } else {
	                this.reset_hover();
	            }
	        }
	    },
	
	    reset_hover: function() {
	        this.links.style("opacity", 1);
	        this.model.set("hovered_point", null);
	        this.hovered_index = null;
	        this.touch();
	    },
	
	    hover_handler: function(args) {
	        var data = args.data;
	        var index = args.index;
	        var highlight_links = this.model.get("highlight_links");
	
	        if (highlight_links) {
	            this.links.style("opacity", function(d) {
	                return d.source.label === data.label ||
	                       d.target.label === data.label ? 1 : 0.1;
	            });
	        } else {
	            this.links.style("opacity", 1);
	        }
	
	        this.model.set("hovered_point",
	                       index, {updated_view: this});
	        this.touch();
	    },
	
	    reset_selection: function() {
	        this.model.set("selected", null);
	        this.selected_indices = null;
	        this.touch();
	    },
	
	    click_handler: function(args) {
	        var data = args.data;
	        var index = args.index;
	        var that = this;
	        var idx = this.model.get("selected");
	        var selected = idx ? utils.deepCopy(idx) : [];
	        var elem_index = selected.indexOf(index);
	        // Replacement for "Accel" modifier.
	        var accelKey = d3.event.ctrlKey || d3.event.metaKey;
	
	        if(elem_index > -1 && accelKey) {
	            // if the index is already selected and if accel key is
	            // pressed, remove the node from the list
	            selected.splice(elem_index, 1);
	        } else {
	            if(accelKey) {
	                //If accel is pressed and the bar is not already selcted
	                //add the bar to the list of selected bars.
	                selected.push(index);
	            }
	            // updating the array containing the bar indexes selected
	            // and updating the style
	            else {
	                //if accel is not pressed, then clear the selected ones
	                //and set the current node to the selected
	                selected = [];
	                selected.push(index);
	            }
	        }
	        this.model.set("selected",
	                       ((selected.length === 0) ? null : selected),
	                       {updated_view: this});
	        this.touch();
	        if(!d3.event) {
	            d3.event = window.event;
	        }
	        var e = d3.event;
	        if(e.cancelBubble !== undefined) { // IE
	            e.cancelBubble = true;
	        }
	        if(e.stopPropagation) {
	            e.stopPropagation();
	        }
	        e.preventDefault();
	    },
	
	    hovered_style_updated: function(model, style) {
	        this.hovered_style = style;
	        this.clear_style(model.previous("hovered_style"), this.hovered_index);
	        this.style_updated(style, this.hovered_index);
	    },
	
	    unhovered_style_updated: function(model, style) {
	        this.unhovered_style = style;
	        var hov_indices = this.hovered_index;
	        var unhovered_indices = (hov_indices) ?
	            _.range(this.model.mark_data.length).filter(function(index){
	                return hov_indices.indexOf(index) === -1;
	            }) : [];
	        this.clear_style(model.previous("unhovered_style"), unhovered_indices);
	        this.style_updated(style, unhovered_indices);
	    },
	
	    update_selected: function(model, value) {
	        this.selected_indices = value;
	        this.apply_styles();
	    },
	
	    update_hovered: function(model, value) {
	        this.hovered_index = value === null ? value : [value];
	        this.apply_styles();
	    },
	
	    apply_styles: function(style_arr) {
	        if(style_arr === undefined || style_arr === null) {
	            style_arr = [this.selected_style, this.unselected_style,
	                         this.hovered_style, this.unhovered_style];
	        }
	        Graph.__super__.apply_styles.apply(this, [style_arr]);
	
	        var all_indices = _.range(this.model.mark_data.length);
	
	        this.set_style_on_elements(this.hovered_style, this.hovered_index);
	        var unhovered_indices = (!this.hovered_index) ?
	            [] : _.difference(all_indices, this.hovered_index);
	        this.set_style_on_elements(this.unhovered_style, unhovered_indices);
	    },
	
	    clear_style: function(style_dict, indices) {
	        var nodes = this.d3el.selectAll(".element");
	        if(indices) {
	            nodes = nodes.filter(function(d, index) {
	                return indices.indexOf(index) !== -1;
	            });
	        }
	        var clearing_style = {};
	        for(var key in style_dict) {
	            clearing_style[key] = null;
	        }
	        nodes.style(clearing_style);
	    },
	
	    set_style_on_elements: function(style, indices) {
	        // If the index array is undefined or of length=0, exit the
	        // function without doing anything
	        if(!indices || indices.length === 0) {
	            return;
	        }
	        // Also, return if the style object itself is blank
	        if(style !== undefined && Object.keys(style).length === 0) {
	            return;
	        }
	        var nodes = this.d3el.selectAll(".element");
	        nodes = nodes.filter(function(data, index) {
	            return indices.indexOf(index) !== -1;
	        });
	        nodes.style(style);
	    },
	
	    compute_view_padding: function() {
	        var x_padding = d3.max(this.model.mark_data.map(function(d) {
	                return (d.shape_attrs.r ||
	                        d.shape_attrs.width / 2 ||
	                        d.shape_attrs.rx) + 1.0;
	            }));
	
	        var y_padding = d3.max(this.model.mark_data.map(function(d) {
	                return (d.shape_attrs.r ||
	                        d.shape_attrs.height / 2 ||
	                        d.shape_attrs.ry) + 1.0;
	            }));
	
	        if (x_padding !== this.x_padding || y_padding !== this.y_padding) {
	            this.x_padding = x_padding;
	            this.y_padding = x_padding;
	            this.trigger("mark_padding_updated");
	        }
	    },
	
	    selected_deleter: function() {
	        d3.event.stopPropagation();
	        return;
	    },
	
	    update_link_distance: function() {
	        var x_scale = this.scales.x,
	            y_scale = this.scales.y;
	
	        var link_dist = this.model.get("link_distance");
	        if (!x_scale && !y_scale) {
	            this.force_layout.linkDistance(link_dist).start();
	        }
	    },
	
	    update_charge: function() {
	        var x_scale = this.scales.x,
	            y_scale = this.scales.y;
	
	        var charge = this.model.get("charge");
	        if (!x_scale && !y_scale) {
	            this.force_layout.charge(charge).start();
	        }
	    },
	
	    link_arc: function(d) {
	        var dx = d.target.x - d.source.x,
	            dy = d.target.y - d.source.y,
	            dr = Math.sqrt(dx * dx + dy * dy);
	        return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr +
	               " 0 0,1 " + d.target.x + "," + d.target.y;
	    },
	
	    link_line: function(d) {
	        var midx = (d.source.x + d.target.x) / 2,
	            midy = (d.source.y + d.target.y) / 2;
	        return "M" + d.source.x + "," + d.source.y + "L" + midx + "," +
	               midy + "L" +  d.target.x + "," + d.target.y;
	    },
	
	    link_slant_line: function(d) {
	        var midx = (d.source.x + d.target.x) / 2;
	        return "M" + d.source.x + "," + d.source.y +
	               "L" +  midx + "," + d.target.y +
	               "L" +  d.target.x + "," + d.target.y;
	    },
	
	    tick: function() {
	        var link_type = this.model.get("link_type");
	
	        this.nodes.attr("transform", transform);
	
	        // move rects to center since x, y of rect is at the corner
	        this.nodes.select("rect")
	            .attr("transform", function(d) {
	                return "translate(" +
	                       (-d.shape_attrs.width/2) + "," +
	                       (-d.shape_attrs.height/2) + ")";
	            });
	
	        var link_path_func = this.link_arc;
	        switch(link_type) {
	            case 'arc':
	                link_path_func = this.link_arc;
	                break;
	            case 'line':
	                link_path_func = this.link_line;
	                break;
	            case 'slant_line':
	                link_path_func = this.link_slant_line;
	                break;
	            default:
	                link_path_func = this.link_arc;
	        }
	
	        this.links.attr("d", function(d) { return link_path_func(d); });
	
	        function transform(d) {
	            return "translate(" + d.x + "," + d.y + ")";
	        }
	    },
	});
	
	module.exports = {
	    Graph: Graph
	};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var d3 = __webpack_require__(8);
	var mark = __webpack_require__(15);
	var utils = __webpack_require__(10);
	var _ = __webpack_require__(9);
	
	
	var Image = mark.Mark.extend({
	
	    render: function() {
	        var base_render_promise = Image.__super__.render.apply(this);
	        var el = this.d3el || this.el;
	        window.last_el = el;
	        window.last_image = this;
	        this.im = el.append("image")
	            .attr("x", 0)
	            .attr("y", 0)
	            .attr("width", 1)
	            .attr("height", 1)
	            .attr("preserveAspectRatio", "none");
	        this.update_image();
	
	        var that = this;
	        return base_render_promise.then(function() {
	            that.create_listeners();
	            that.listenTo(that.parent, "margin_updated", function() {
	                that.draw();
	            });
	        });
	    },
	
	    set_positional_scales: function() {
	        var x_scale = this.scales.x,
	            y_scale = this.scales.y;
	        this.listenTo(x_scale, "domain_changed", function() {
	            if (!this.model.dirty) {
	                this.draw();
	             }
	        });
	        this.listenTo(y_scale, "domain_changed", function() {
	            if (!this.model.dirty) {
	                this.draw();
	            }
	        });
	    },
	
	    set_ranges: function() {
	        var x_scale = this.scales.x,
	            y_scale = this.scales.y;
	        if(x_scale) {
	            x_scale.set_range(this.parent.padded_range("x", x_scale.model));
	        }
	        if(y_scale) {
	            y_scale.set_range(this.parent.padded_range("y", y_scale.model));
	        }
	    },
	
	    create_listeners: function() {
	        Image.__super__.create_listeners.apply(this);
	        this.listenTo(this.model, "change:image", this.update_image, this);
	        this.listenTo(this.model, "data_updated", function() {
	            //animate on data update
	            var animate = true;
	            this.draw(animate);
	        }, this);
	    },
	
	    update_image: function() {
	        if(this.im.attr("href")) {
	            URL.revokeObjectURL(this.im.attr("href"));
	        }
	        var image = this.model.get("image");
	        var blob = new Blob([image.get("value")], {type: "image/" + image.get("format")});
	        var url = URL.createObjectURL(blob);
	        this.im.attr("href", url);
	    },
	
	    remove: function() {
	        URL.revokeObjectURL(this.im.attr("href"));
	        Image.__super__.remove.apply(this);
	    },
	
	    relayout: function() {
	        this.draw(true);
	    },
	
	    draw: function(animate) {
	        this.set_ranges()
	
	        var x_scale = this.scales.x ? this.scales.x : this.parent.scale_x;
	        var y_scale = this.scales.y ? this.scales.y : this.parent.scale_y;
	
	        var that = this;
	        var animation_duration = animate ? this.parent.model.get("animation_duration") : 0;
	        var el = this.d3el || this.el;
	        var x_scaled = this.model.mark_data["x"].map(x_scale.scale),
	            y_scaled = this.model.mark_data["y"].map(y_scale.scale);
	
	        el.selectAll("image").transition()
	            .duration(animation_duration)
	            .attr("transform", function(d) {
	                var tx = x_scaled[0] + x_scale.offset;
	                var ty = y_scaled[1] + y_scale.offset;
	                var sx = x_scaled[1] - x_scaled[0];
	                var sy = y_scaled[0] - y_scaled[1];
	                return "translate(" + tx + "," + ty + ") scale(" + sx + ", " + sy + ")"});
	    },
	});
	
	module.exports = {
	    Image: Image
	};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 Bloomberg Finance L.P.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	var widgets = __webpack_require__(7);
	var d3 = __webpack_require__(8);
	var _ = __webpack_require__(9);
	var markmodel = __webpack_require__(12);
	
	var ImageModel = markmodel.MarkModel.extend({
	
	    defaults: function() {
	        return _.extend(markmodel.MarkModel.prototype.defaults(), {
	            _model_name: "ImageModel",
	            _view_name: "Image",
	            x: (0.0, 1.0),
	            y: (0.0, 1.0),
	            scales_metadata: {
	                'x': {'orientation': 'horizontal', 'dimension': 'x'},
	                'y': {'orientation': 'vertical', 'dimension': 'y'},
	            },
	        });
	    },
	
	    initialize: function() {
	        ImageModel.__super__.initialize.apply(this, arguments);
	        this.on_some_change(['x', 'y'], this.update_data, this);
	        this.on_some_change(["preserve_domain"], this.update_domains, this);
	        this.update_data();
	    },
	
	    update_data: function() {
	        this.mark_data = {
	            x: this.get_typed_field("x"), y: this.get_typed_field("y")
	        };
	        this.update_domains();
	        this.trigger("data_updated");
	    },
	
	    update_domains: function() {
	        if(!this.mark_data) {
	            return;
	        }
	        var scales = this.get("scales");
	        var x_scale = scales.x;
	        var y_scale = scales.y;
	
	        if(x_scale) {
	            if(!this.get("preserve_domain").x) {
	                x_scale.compute_and_set_domain(this.mark_data['x'], this.model_id + "_x");
	            } else {
	                x_scale.del_domain([], this.model_id + "_x");
	            }
	        }
	        if(y_scale) {
	            if(!this.get("preserve_domain").y) {
	                y_scale.compute_and_set_domain(this.mark_data['y'], this.model_id + "_y");
	            } else {
	                y_scale.del_domain([], this.model_id + "_y");
	            }
	        }
	    },
	
	}, {
	    serializers: _.extend({
	        image: { deserialize: widgets.unpack_models },
	    }, markmodel.MarkModel.serializers)
	});
	
	module.exports = {
	    ImageModel: ImageModel
	};


/***/ })
/******/ ])});;
//# sourceMappingURL=index.js.map