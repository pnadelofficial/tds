{"nbformat": 4, "nbformat_minor": 0, "metadata": {"colab": {"name": "nb_test", "provenance": []}, "kernelspec": {"name": "python3", "display_name": "Python 3"}, "language_info": {"name": "python"}}, "cells": [{"cell_type": "markdown", "source": ["# New Section"], "metadata": {"id": "-UsXkkQxS0qs"}}, {"cell_type": "code", "source": ["import pandas as pd\n", "import numpy as np"], "metadata": {"id": "sgD0JBv35Ir3"}, "execution_count": 1, "outputs": []}, {"cell_type": "markdown", "source": ["Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor magna in dolor euismod sollicitudin. Pellentesque tempus dui condimentum, accumsan purus eu, bibendum justo. Suspendisse fermentum vestibulum erat nec pulvinar. Aliquam at viverra augue. Proin dolor purus, iaculis eget purus eu, sagittis efficitur lorem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Aenean imperdiet ultrices ipsum, eget blandit neque congue vitae. Sed consectetur neque dui. Interdum et malesuada fames ac ante ipsum primis in faucibus.\n", "\n", "Curabitur sed scelerisque justo. Sed ornare sceleris"], "metadata": {"id": "I944yLiJSpe7"}}, {"cell_type": "code", "source": ["1 + 1"], "metadata": {"colab": {"base_uri": "https://localhost:8080/"}, "id": "ReZtfvfm5M3-", "outputId": "f1cb9998-dca3-462c-ed1d-5b4794ffc9d3"}, "execution_count": 2, "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["2"]}, "metadata": {}, "execution_count": 2}]}, {"cell_type": "code", "source": ["print('Hello World')"], "metadata": {"colab": {"base_uri": "https://localhost:8080/"}, "id": "2FvwfHtq5OU-", "outputId": "3b6bdc73-c801-4992-f0ef-15dce8d02ea5"}, "execution_count": 3, "outputs": [{"output_type": "stream", "name": "stdout", "text": ["Hello World\n"]}]}, {"cell_type": "code", "source": ["a_list = ['Hello World','I am', 'Peter']\n", "print(a_list)"], "metadata": {"colab": {"base_uri": "https://localhost:8080/"}, "id": "39TVbgQT5RlG", "outputId": "11528c01-4b8e-4be3-dba3-2bd96909f11d"}, "execution_count": 4, "outputs": [{"output_type": "stream", "name": "stdout", "text": ["['Hello World', 'I am', 'Peter']\n"]}]}, {"cell_type": "code", "source": ["import matplotlib.pyplot as plt\n", "import numpy as np\n", "\n", "# make data\n", "x = np.linspace(0, 10, 100)\n", "y = 4 + 2 * np.sin(2 * x)\n", "\n", "# plot\n", "fig, ax = plt.subplots()\n", "\n", "ax.plot(x, y, linewidth=2.0)\n", "\n", "ax.set(xlim=(0, 8), xticks=np.arange(1, 8),\n", "       ylim=(0, 8), yticks=np.arange(1, 8))\n", "\n", "plt.show()"], "metadata": {"colab": {"base_uri": "https://localhost:8080/", "height": 265}, "id": "0ht3p-W85Y1O", "outputId": "c4071589-eaf8-4e54-c08b-4eae20993529"}, "execution_count": 5, "outputs": [{"output_type": "display_data", "data": {"text/plain": ["<Figure size 432x288 with 1 Axes>"], "image/png": "\n"}, "metadata": {"needs_background": "light"}}]}, {"cell_type": "markdown", "source": ["Aliquam ac metus convallis, aliquam tellus ac, cursus tortor. Maecenas quis luctus risus. Vivamus iaculis sit amet mi ac feugiat. Suspendisse ultrices purus tortor, non scelerisque neque commodo eu. Vivamus sit amet vehicula risus, id porta est. Cras quis augue dui. Etiam at ultrices lorem. Donec id rhoncus quam, non faucibus sem. Maecenas non eleifend metus. Duis felis ligula, volutpat a quam nec, tempus placerat tortor. Nam volutpat nisl sed lectus scelerisque, in cursus odio dapibus. Integer lorem eros, imperdiet bibendum eros sit amet, laoreet rutrum leo. Fusce pellentesque lacinia justo, et pellentesque purus. Integer sagittis ornare magna, ac accumsan ipsum tristique eu.\n", "\n", "Proin dui enim, hendrerit nec auctor vel, elementum in orci. Etiam eu imperdiet massa. Integer a sapien eget nulla dictum pharetra in quis est. Curabitur eu purus felis. Aenean porttitor nisi nec est rutrum vestibulum sit amet non nulla. Duis sed blandit tellus, tempor semper lectus. Sed nibh orci, vulputate vel tortor vitae, finibus pellentesque risus. Curabitur iaculis sed libero nec dapibus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent at accumsan nibh. Nulla fringilla porta fringilla. Suspendisse maximus egestas massa et ornare."], "metadata": {"id": "HG6Pj_WTSwcT"}}, {"cell_type": "code", "source": ["import pandas as pd\n", "a = [1,2,3,4]\n", "b = [4,3,2,1]\n", "pd.DataFrame([a,b])"], "metadata": {"colab": {"base_uri": "https://localhost:8080/", "height": 112}, "id": "3nFof8qgKXhp", "outputId": "b71bafcf-ad79-43bb-fa88-be8be82315a2"}, "execution_count": 6, "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["   0  1  2  3\n", "0  1  2  3  4\n", "1  4  3  2  1"], "text/html": ["\n", "  <div id=\"df-b7cf9ede-08d7-4c41-bd85-f429a52bf133\">\n", "    <div class=\"colab-df-container\">\n", "      <div>\n", "<style scoped>\n", "    .dataframe tbody tr th:only-of-type {\n", "        vertical-align: middle;\n", "    }\n", "\n", "    .dataframe tbody tr th {\n", "        vertical-align: top;\n", "    }\n", "\n", "    .dataframe thead th {\n", "        text-align: right;\n", "    }\n", "</style>\n", "<table border=\"1\" class=\"dataframe\">\n", "  <thead>\n", "    <tr style=\"text-align: right;\">\n", "      <th></th>\n", "      <th>0</th>\n", "      <th>1</th>\n", "      <th>2</th>\n", "      <th>3</th>\n", "    </tr>\n", "  </thead>\n", "  <tbody>\n", "    <tr>\n", "      <th>0</th>\n", "      <td>1</td>\n", "      <td>2</td>\n", "      <td>3</td>\n", "      <td>4</td>\n", "    </tr>\n", "    <tr>\n", "      <th>1</th>\n", "      <td>4</td>\n", "      <td>3</td>\n", "      <td>2</td>\n", "      <td>1</td>\n", "    </tr>\n", "  </tbody>\n", "</table>\n", "</div>\n", "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7cf9ede-08d7-4c41-bd85-f429a52bf133')\"\n", "              title=\"Convert this dataframe to an interactive table.\"\n", "              style=\"display:none;\">\n", "        \n", "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n", "       width=\"24px\">\n", "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n", "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n", "  </svg>\n", "      </button>\n", "      \n", "  <style>\n", "    .colab-df-container {\n", "      display:flex;\n", "      flex-wrap:wrap;\n", "      gap: 12px;\n", "    }\n", "\n", "    .colab-df-convert {\n", "      background-color: #E8F0FE;\n", "      border: none;\n", "      border-radius: 50%;\n", "      cursor: pointer;\n", "      display: none;\n", "      fill: #1967D2;\n", "      height: 32px;\n", "      padding: 0 0 0 0;\n", "      width: 32px;\n", "    }\n", "\n", "    .colab-df-convert:hover {\n", "      background-color: #E2EBFA;\n", "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n", "      fill: #174EA6;\n", "    }\n", "\n", "    [theme=dark] .colab-df-convert {\n", "      background-color: #3B4455;\n", "      fill: #D2E3FC;\n", "    }\n", "\n", "    [theme=dark] .colab-df-convert:hover {\n", "      background-color: #434B5C;\n", "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n", "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n", "      fill: #FFFFFF;\n", "    }\n", "  </style>\n", "\n", "      <script>\n", "        const buttonEl =\n", "          document.querySelector('#df-b7cf9ede-08d7-4c41-bd85-f429a52bf133 button.colab-df-convert');\n", "        buttonEl.style.display =\n", "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n", "\n", "        async function convertToInteractive(key) {\n", "          const element = document.querySelector('#df-b7cf9ede-08d7-4c41-bd85-f429a52bf133');\n", "          const dataTable =\n", "            await google.colab.kernel.invokeFunction('convertToInteractive',\n", "                                                     [key], {});\n", "          if (!dataTable) return;\n", "\n", "          const docLinkHtml = 'Like what you see? Visit the ' +\n", "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n", "            + ' to learn more about interactive tables.';\n", "          element.innerHTML = '';\n", "          dataTable['output_type'] = 'display_data';\n", "          await google.colab.output.renderOutput(dataTable, element);\n", "          const docLink = document.createElement('div');\n", "          docLink.innerHTML = docLinkHtml;\n", "          element.appendChild(docLink);\n", "        }\n", "      </script>\n", "    </div>\n", "  </div>\n", "  "]}, "metadata": {}, "execution_count": 6}]}]}